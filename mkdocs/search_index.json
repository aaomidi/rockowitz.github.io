{
    "docs": [
        {
            "location": "/", 
            "text": "ddcutil\n\n\nAnnouncements\n\n\n13 May 2018\n\n\nRelease 0.9.0 contains minor enhancements and a few very minor bug fixes.  However. the C API is extensively revised\n(see \nAPI Changes in Release 9.0\n).\n\n\nTwo enhancements will be of interest to general users:\n\n- The \nsetvcp\n command now allows new values for Continuous type features to be specified as relative values,\ne.g. the following commands increase or decrease the value of the brightness feature by 5. \n\n\n$ ddcutil setvcp 10 + 5\n$ ddcutil setvcp 10 - 5\n\n\n\n\nNote that parsing requires that \"+\" and \"-\" be surrounded by spaces.\n\n\n\n\nTable type features are by default not included in most feature groups specified on \ngetvcp\n, e.g. \ngetvcp known\n.\nFeatures of type Table are rare.  The DDC/CI spec does not provide a clean way for \ngetvcp\n to determine that a table \nfeature does not exist.  As a result, \ngetvcp\n typically has to exceed its retry count before giving up.\n(Exclusion of table features does not occur if a feature is explicitly specified by its hex code, or for feature group \nTABLE\n.)\n\nThe \n--no-table\n (formerly \n--notable\n) and \n-show-table\n options explicitly control this behavior.\n\n\n\n\nFor a complete list of changes and bug fixes, see \nRelease Notes\n.\nPrior announcements can be found \nhere\n.\n\n\nIntroduction\n\n\nddcutil\n is a Linux program for querying and changing monitor settings, such as \nbrightness and color levels.   \n\n\nddcutil\n primarily uses DDC/CI (Display Data Channel Command Interface) to communicate with monitors implementing MCCS \n(Monitor Control Command Set) over I2C.  Normally, the video driver for the\nmonitor exposes the I2C channel as devices named /dev/i2c-n.  Alternatively, there is support for monitors (such as Eizo ColorEdge displays) that implement MCCS using a USB connection.  See \nUSB Connected Monitors\n. \n\n\nGenerally speaking, any settings that can be changed by pressing buttons on the monitor can be modified by \nddcutil\n.\nExamples include controlling brigtness and switching input source.\n\n\nA particular use case for \nddcutil\n, and the one that inspired its development, is as part of color profile management. \nMonitor calibration is relative to the monitor color settings currently in effect, \ne.g. red gain.  ddcutil allows color related settings to be saved at the time \na monitor is calibrated, and then restored when the calibration is applied.\n\n\nRestrictions:  \n\n\n\n\nddcutil\n does not support laptop displays, which are controlled using a special API, not I2C.   \n\n\nNvidia's proprietary video driver may require special configuration.  See \n\nSpecial Nvidia Driver Settings\n.   \n\n\nOperation with AMD's proprietary video driver fglrx requires a \nspecially built version of \nddcutil\n.  See \nBuilding with ADL Support\n.  \n\n\nReading and writing \nTable\n type features is implemented but untested.  See \nTable Features\n  \n\n\n\n\nddcutil\n is released under the GNU Public License, V2 (GPLV2).\nThe source is hosted on \nGithub\n.\n\n\nGeneral support questions are best directed the to the \nissue tracker\n on Github.\nUse of that forum allows everyone to benefit from individual questions and ideas. For details, see \nTechnical Support\n. \n\n\nTopics\n\n\nUsing \nddcutil\n:\n\n\n\n\nCommand Overview\n\n\nCommand Arguments\n\n\nCommand Specific Options\n\n\nCommand Output Examples\n\n\nMonitor Control Command Set\n\n\nColor Management\n\n\nInstrumentation and Tuning\n\n\n\n\nInstallation and Configuration:\n\n\n\n\nInstall \nddcutil\n From Prebuilt Packages\n\n\nBuilding From Source\n\n\nConfiguration and Installation Diagnostics\n\n\nAMD fglrx Driver\n\n\n\n\nOther:\n\n\n\n\nFrequently Asked Questions\n\n\nTechnical Support\n\n\nFeedback\n\n\nReleases\n\n\nRelease Notes\n\n\nAnnouncement History\n\n\nVirtual Machines\n\n\nComparison with ddccontrol\n\n\nNotes on Specific Monitors\n\n\nDDC Null Response\n\n\nAPIs\n\n\nFuture Tasks\n\n\nReferences\n\n\nAcknowledgements\n\n\n\n\nAuthor\n\n\nSanford Rockowitz", 
            "title": "Overview"
        }, 
        {
            "location": "/#ddcutil", 
            "text": "", 
            "title": "ddcutil"
        }, 
        {
            "location": "/#announcements", 
            "text": "13 May 2018  Release 0.9.0 contains minor enhancements and a few very minor bug fixes.  However. the C API is extensively revised\n(see  API Changes in Release 9.0 ).  Two enhancements will be of interest to general users: \n- The  setvcp  command now allows new values for Continuous type features to be specified as relative values,\ne.g. the following commands increase or decrease the value of the brightness feature by 5.   $ ddcutil setvcp 10 + 5\n$ ddcutil setvcp 10 - 5  Note that parsing requires that \"+\" and \"-\" be surrounded by spaces.   Table type features are by default not included in most feature groups specified on  getvcp , e.g.  getvcp known .\nFeatures of type Table are rare.  The DDC/CI spec does not provide a clean way for  getvcp  to determine that a table \nfeature does not exist.  As a result,  getvcp  typically has to exceed its retry count before giving up.\n(Exclusion of table features does not occur if a feature is explicitly specified by its hex code, or for feature group  TABLE .) \nThe  --no-table  (formerly  --notable ) and  -show-table  options explicitly control this behavior.   For a complete list of changes and bug fixes, see  Release Notes .\nPrior announcements can be found  here .", 
            "title": "Announcements"
        }, 
        {
            "location": "/#introduction", 
            "text": "ddcutil  is a Linux program for querying and changing monitor settings, such as \nbrightness and color levels.     ddcutil  primarily uses DDC/CI (Display Data Channel Command Interface) to communicate with monitors implementing MCCS \n(Monitor Control Command Set) over I2C.  Normally, the video driver for the\nmonitor exposes the I2C channel as devices named /dev/i2c-n.  Alternatively, there is support for monitors (such as Eizo ColorEdge displays) that implement MCCS using a USB connection.  See  USB Connected Monitors .   Generally speaking, any settings that can be changed by pressing buttons on the monitor can be modified by  ddcutil .\nExamples include controlling brigtness and switching input source.  A particular use case for  ddcutil , and the one that inspired its development, is as part of color profile management. \nMonitor calibration is relative to the monitor color settings currently in effect, \ne.g. red gain.  ddcutil allows color related settings to be saved at the time \na monitor is calibrated, and then restored when the calibration is applied.  Restrictions:     ddcutil  does not support laptop displays, which are controlled using a special API, not I2C.     Nvidia's proprietary video driver may require special configuration.  See  Special Nvidia Driver Settings .     Operation with AMD's proprietary video driver fglrx requires a \nspecially built version of  ddcutil .  See  Building with ADL Support .    Reading and writing  Table  type features is implemented but untested.  See  Table Features      ddcutil  is released under the GNU Public License, V2 (GPLV2).\nThe source is hosted on  Github .  General support questions are best directed the to the  issue tracker  on Github.\nUse of that forum allows everyone to benefit from individual questions and ideas. For details, see  Technical Support .", 
            "title": "Introduction"
        }, 
        {
            "location": "/#topics", 
            "text": "Using  ddcutil :   Command Overview  Command Arguments  Command Specific Options  Command Output Examples  Monitor Control Command Set  Color Management  Instrumentation and Tuning   Installation and Configuration:   Install  ddcutil  From Prebuilt Packages  Building From Source  Configuration and Installation Diagnostics  AMD fglrx Driver   Other:   Frequently Asked Questions  Technical Support  Feedback  Releases  Release Notes  Announcement History  Virtual Machines  Comparison with ddccontrol  Notes on Specific Monitors  DDC Null Response  APIs  Future Tasks  References  Acknowledgements", 
            "title": "Topics"
        }, 
        {
            "location": "/#author", 
            "text": "Sanford Rockowitz", 
            "title": "Author"
        }, 
        {
            "location": "/commands/", 
            "text": "Command Overview\n\n\nddcutil\n is a command line program.  (A GUI user interface is planned.)  \nddcutil\n implements \nthe following subcommands:\n\n\n\n\n\n\n\n\nSubcommand\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\ndetect\n\n\nreport monitors detected\n\n\n\n\n\n\ncapabilities\n\n\nreport a monitor's capabilities string\n\n\n\n\n\n\nvcpinfo (feature-code-or-group)\n\n\nlist VCP features codes that ddcutil knows how to interpret\n\n\n\n\n\n\ngetvcp feature-code-or-group\n\n\nreport a single VCP feature value, or a group of values\n\n\n\n\n\n\nsetvcp feature-code new-value\n\n\nset a single VCP feature value\n\n\n\n\n\n\ndumpvcp filename\n\n\nsave color related VCP feature values to a file\n\n\n\n\n\n\nloadvcp filename\n\n\nrestore color related VCP feature values from a file\n\n\n\n\n\n\nenvironment\n\n\nexplore the ddcutil installation environment (other than USB)\n\n\n\n\n\n\nusbenv\n\n\nexplore USB aspects of the ddcutil installation environment\n\n\n\n\n\n\nprobe\n\n\nreport the capabilities string and probe the features of a single monitor\n\n\n\n\n\n\ninterrogate\n\n\ncollect maximal information for problem diagnosis\n\n\n\n\n\n\nchkusbmon  /dev/hiddevN\n\n\nused by udev rules to test if a USB device represents a monitor\n\n\n\n\n\n\n\n\nThere is an extensive set of options for tailoring ddcutil operation. \nSome are described in this documentation.   For a full list of options and detailed documentation for each command, \nuse the \n--help\n option or \nsee the man page:\n\n\n$ ddcutil --help\n$ man 1 ddcutil\n\n\n\n\nMonitor Selection\n\n\nIf more than one monitor is attached, the desired monitor can be specified \nusing any of the following options:\n\n\n--display \ndisplay number\n\n--bus \ni2c bus number\n\n--adl \niAdapterNumber\n.\niDisplayNumber\n\n--usb \nusb bus number\n.\nusb device number\n\n--edid \n256 character hex string\n\n--mfg \nmfg code\n --model \nmodel name\n and/or --sn \nserial number\n\n\n\n\n\nNotes:   \n\n\n\n\nMonitors under control of AMD's proprietary driver (fglrx) are selected by\n  adapter number and display number. These numbers are specified on the --adl \n  option separated by a period, e.g. \"--adl 1.0\"  \n\n\nAny combination of manufacturer code, model name and serial number can be used together to identify a monitor.\n  The first monitor to satisfy all the specified criteria is selected.\n  (This behavior differs from releases prior to 0.7 where model name and serial number had to be specified together.)\n\n\n\n\nTo see a list of all attached monitors and their associated identifiers:\n\n\n$ ddcutil detect\n\n\n\n\nExamples\n\n\n\n\nddcutil vcpinfo\n\n\nddcutil detect\n\n\nddcutil capabilities\n\n\nddcutil getvcp", 
            "title": "Command Overview"
        }, 
        {
            "location": "/commands/#command-overview", 
            "text": "ddcutil  is a command line program.  (A GUI user interface is planned.)   ddcutil  implements \nthe following subcommands:     Subcommand  Function      detect  report monitors detected    capabilities  report a monitor's capabilities string    vcpinfo (feature-code-or-group)  list VCP features codes that ddcutil knows how to interpret    getvcp feature-code-or-group  report a single VCP feature value, or a group of values    setvcp feature-code new-value  set a single VCP feature value    dumpvcp filename  save color related VCP feature values to a file    loadvcp filename  restore color related VCP feature values from a file    environment  explore the ddcutil installation environment (other than USB)    usbenv  explore USB aspects of the ddcutil installation environment    probe  report the capabilities string and probe the features of a single monitor    interrogate  collect maximal information for problem diagnosis    chkusbmon  /dev/hiddevN  used by udev rules to test if a USB device represents a monitor     There is an extensive set of options for tailoring ddcutil operation. \nSome are described in this documentation.   For a full list of options and detailed documentation for each command, \nuse the  --help  option or \nsee the man page:  $ ddcutil --help\n$ man 1 ddcutil", 
            "title": "Command Overview"
        }, 
        {
            "location": "/commands/#monitor-selection", 
            "text": "If more than one monitor is attached, the desired monitor can be specified \nusing any of the following options:  --display  display number \n--bus  i2c bus number \n--adl  iAdapterNumber . iDisplayNumber \n--usb  usb bus number . usb device number \n--edid  256 character hex string \n--mfg  mfg code  --model  model name  and/or --sn  serial number   Notes:      Monitors under control of AMD's proprietary driver (fglrx) are selected by\n  adapter number and display number. These numbers are specified on the --adl \n  option separated by a period, e.g. \"--adl 1.0\"    Any combination of manufacturer code, model name and serial number can be used together to identify a monitor.\n  The first monitor to satisfy all the specified criteria is selected.\n  (This behavior differs from releases prior to 0.7 where model name and serial number had to be specified together.)   To see a list of all attached monitors and their associated identifiers:  $ ddcutil detect", 
            "title": "Monitor Selection"
        }, 
        {
            "location": "/commands/#examples", 
            "text": "ddcutil vcpinfo  ddcutil detect  ddcutil capabilities  ddcutil getvcp", 
            "title": "Examples"
        }, 
        {
            "location": "/cmdargs/", 
            "text": "Command Arguments\n\n\nThe \nfeature-code\n argument to \nvcpinfo\n, \ngetvcp\n, and \nsetvcp\n is a hexadecimal feature number, \nwith or without a leading \"0x\", e.g.\n\n\n# ddcutil getvcp 10\n# ddcutil vcpinfo 0x10\n\n\n\n\nThe \nfeature-group\n argument to \nvcpinfo\n and \ngetvcp\n is a named collection of features.\n\nThe most useful are: \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nKNOWN\n\n\nall feature codes known to \nddcutil\n\n\n\n\n\n\nSCAN\n\n\nscan all feature codes 0x00..0xff\n\n\n\n\n\n\nCOLOR\n\n\ncolor related features\n\n\n\n\n\n\nPROFILE\n\n\nfeatuers saved by dumpvcp (subset of COLOR)\n\n\n\n\n\n\n\n\nFor example: \n\n\n# ddcutil getvcp known\n\n\n\n\nFor a complete list of feature groups, use the \n--help\n option. \n\n\nThe \nnew-value\n argument to \nsetvcp\n is a decimal number in the range 0..255, or a single \nbyte hex value.  For example:\n\n\n# ddcutil setvcp 10 50\n# ddcutil setvcp 10 0x32", 
            "title": "Command Arguments"
        }, 
        {
            "location": "/cmdargs/#command-arguments", 
            "text": "The  feature-code  argument to  vcpinfo ,  getvcp , and  setvcp  is a hexadecimal feature number, \nwith or without a leading \"0x\", e.g.  # ddcutil getvcp 10\n# ddcutil vcpinfo 0x10  The  feature-group  argument to  vcpinfo  and  getvcp  is a named collection of features. \nThe most useful are:      Name  Description      KNOWN  all feature codes known to  ddcutil    SCAN  scan all feature codes 0x00..0xff    COLOR  color related features    PROFILE  featuers saved by dumpvcp (subset of COLOR)     For example:   # ddcutil getvcp known  For a complete list of feature groups, use the  --help  option.   The  new-value  argument to  setvcp  is a decimal number in the range 0..255, or a single \nbyte hex value.  For example:  # ddcutil setvcp 10 50\n# ddcutil setvcp 10 0x32", 
            "title": "Command Arguments"
        }, 
        {
            "location": "/cmdopts/", 
            "text": "Command Specific Options\n\n\nCommand \ngetvcp\n\n\nOption \n--terse\n\n\nIf --terse is specified on a getvcp command, output is in a format this is easily machine readable,\nto facilitate use in scripts.  The format depends on the feature type.  \n\n\nIn keeping with \nddcutil\n \npractice, VCP feature codes are shown without a leading hex indicator even though they are \nhexidecimal values.\n\n\nFor a continuous VCP feature, both the current value (in decimal) and maximum value (in decimal) \nare shown.  Output takes the form:\n\n\n\n\nVCP\n feature-code \nC\n cur-value-decimal max-value-decimal\n\n\n\n\nFor example:\n\n\nVCP 10  C 50 100\n\n\n\n\nFor a simple non-continuous VCP feature, i.e. one for which only the SL response byte is \nsignificant, the value is reported in hex.   Output takes the form:  \n\n\n\n\nVCP\n feature-code \nSNC\n hex-value\n\n\n\n\nFor example:\n\n\nVCP 60 SNC x03\n\n\n\n\nComplex non-continuous VCP features are ones for which more then 1 response byte is \nsignificant.  In that case all 4 bytes are reported in hex.  Output takes the form:\n\n\n\n\nVCP\n feature-code \nCNC\n mh-hex ml-hex sh-hex sl-hex\n\n\n\n\nFor example:\n\n\nVCP DF CND xff xff x02 x00\n\n\n\n\nTable VCP features report the value as hexidecimal string.  Output takes the form:\n\n\n\n\nVCP\n feature-code \nT\n hex-string\n\n\n\n\nFor example:\n\n\nVCP 73 T x01020304\n\n\n\n\nFinally, if a feature is not supported or some other error occurs, this may be reported\nor there may simply be no output.  It is always reported for single feature getvcp requests. \nNormally not reported for multi-feature getvcp requests, but see \n--show-unsupported\n \nIf reported, output takes the form:\n\n\n\n\nVCP\n feature-code \nERR\n\n\n\n\n\nFor example:\n\n\nVCP 84 ERR\n\n\n\n\nOption \n--show-unsupported\n\n\nIf querying a single feature, \ngetvcp\n reports an error if the feature is unsupported or \nsome other error occurs.  If querying a feature subset, e.g. COLOR, output for invalid features is suppressd.\nThe \n--show-unsupported\n option forces error messages in all cases. \n\n\nCommands \nsetvcp, loadvcp\n\n\nOption \n--noverify\n\n\nThe underlying DDC operation used by \nsetvcp\n writes the command specifying a new VCP value to \nthe I2C bus.  The status code from this operation simply indicates whether the write was successful.\nIt does not indicate whether the display successfully received and processed the command.  There \nhave been occasional reports in the field of cases where the \nsetvcp\n command appeared to succeed, but \nthe new value was not set.  Therefore \nsetvcp\n and \nloadvcp\n by default read the feature value \nto verify that the value in the monitor has actually changed.\n\n\nAs this facility causes a minor increase in processing time and addresses a rare condition, it \ncan be disabled using the \n--noverify\n option.\n\n\nOption \n--verbose\n\n\nDisplay informational messages regarding verification.", 
            "title": "Command Specific Options"
        }, 
        {
            "location": "/cmdopts/#command-specific-options", 
            "text": "", 
            "title": "Command Specific Options"
        }, 
        {
            "location": "/cmdopts/#command-getvcp", 
            "text": "", 
            "title": "Command getvcp"
        }, 
        {
            "location": "/cmdopts/#option-terse", 
            "text": "If --terse is specified on a getvcp command, output is in a format this is easily machine readable,\nto facilitate use in scripts.  The format depends on the feature type.    In keeping with  ddcutil  \npractice, VCP feature codes are shown without a leading hex indicator even though they are \nhexidecimal values.  For a continuous VCP feature, both the current value (in decimal) and maximum value (in decimal) \nare shown.  Output takes the form:   VCP  feature-code  C  cur-value-decimal max-value-decimal  For example:  VCP 10  C 50 100  For a simple non-continuous VCP feature, i.e. one for which only the SL response byte is \nsignificant, the value is reported in hex.   Output takes the form:     VCP  feature-code  SNC  hex-value  For example:  VCP 60 SNC x03  Complex non-continuous VCP features are ones for which more then 1 response byte is \nsignificant.  In that case all 4 bytes are reported in hex.  Output takes the form:   VCP  feature-code  CNC  mh-hex ml-hex sh-hex sl-hex  For example:  VCP DF CND xff xff x02 x00  Table VCP features report the value as hexidecimal string.  Output takes the form:   VCP  feature-code  T  hex-string  For example:  VCP 73 T x01020304  Finally, if a feature is not supported or some other error occurs, this may be reported\nor there may simply be no output.  It is always reported for single feature getvcp requests. \nNormally not reported for multi-feature getvcp requests, but see  --show-unsupported  \nIf reported, output takes the form:   VCP  feature-code  ERR   For example:  VCP 84 ERR", 
            "title": "Option --terse"
        }, 
        {
            "location": "/cmdopts/#option-show-unsupported", 
            "text": "If querying a single feature,  getvcp  reports an error if the feature is unsupported or \nsome other error occurs.  If querying a feature subset, e.g. COLOR, output for invalid features is suppressd.\nThe  --show-unsupported  option forces error messages in all cases.", 
            "title": "Option --show-unsupported"
        }, 
        {
            "location": "/cmdopts/#commands-setvcp-loadvcp", 
            "text": "", 
            "title": "Commands setvcp, loadvcp"
        }, 
        {
            "location": "/cmdopts/#option-noverify", 
            "text": "The underlying DDC operation used by  setvcp  writes the command specifying a new VCP value to \nthe I2C bus.  The status code from this operation simply indicates whether the write was successful.\nIt does not indicate whether the display successfully received and processed the command.  There \nhave been occasional reports in the field of cases where the  setvcp  command appeared to succeed, but \nthe new value was not set.  Therefore  setvcp  and  loadvcp  by default read the feature value \nto verify that the value in the monitor has actually changed.  As this facility causes a minor increase in processing time and addresses a rare condition, it \ncan be disabled using the  --noverify  option.", 
            "title": "Option --noverify"
        }, 
        {
            "location": "/cmdopts/#option-verbose", 
            "text": "Display informational messages regarding verification.", 
            "title": "Option --verbose"
        }, 
        {
            "location": "/cmd_output/", 
            "text": "Command Output Examples\n\n\n\n\nddcutil vcpinfo\n\n\nddcutil detect\n\n\nddcutil capabilities\n\n\nddcutil getvcp", 
            "title": "Command Output Examples"
        }, 
        {
            "location": "/cmd_output/#command-output-examples", 
            "text": "ddcutil vcpinfo  ddcutil detect  ddcutil capabilities  ddcutil getvcp", 
            "title": "Command Output Examples"
        }, 
        {
            "location": "/vcpinfo_output/", 
            "text": "The following example reports \nddcutil\n's internal table of VCP Feature definitions.\n\n\n$ ddcutil vcpinfo\n\nVCP code 01: Degauss\n   Causes a CRT to perform a degauss cycle\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: CRT\n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 02: New control value\n   Indicates that a display user control (other than power) has been used to change and save (or autosave) a new value.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (complex)\nVCP code 03: Soft controls\n   Allows display controls to be used as soft keys\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 04: Restore factory defaults\n   Restore all factor presets including brightness/contrast, geometry, color, and TV defaults.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Preset\n   ddcutil feature subsets: COLOR\n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 05: Restore factory brightness/contrast defaults\n   Restore factory defaults for brightness and contrast\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Preset\n   ddcutil feature subsets: COLOR\n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 06: Restore factory geometry defaults\n   Restore factory defaults for geometry adjustments\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Preset\n   ddcutil feature subsets: \n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 08: Restore color defaults\n   Restore factory defaults for color settings.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Preset\n   ddcutil feature subsets: COLOR\n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 0A: Restore factory TV defaults\n   Restore factory defaults for TV functions.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Preset\n   ddcutil feature subsets: TV\n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 0B: Color temperature increment\n   Color temperature increment used by feature 0Ch Color Temperature Request\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Only, Non-Continuous (complex)\nVCP code 0C: Color temperature request\n   Specifies a color temperature (degrees Kelvin)\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (complex)\nVCP code 0E: Clock\n   Increase/decrease the sampling clock frequency.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Continuous (standard)\nVCP code 10: Brightness\n   Increase/decrease the brightness of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 11: Flesh tone enhancement\n   Select contrast enhancement algorithm respecting flesh tone region\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Non-Continuous (complex)\nVCP code 12: Contrast\n   Increase/decrease the contrast of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 13: Backlight control\n   Increase/decrease the specified backlight control value\n   MCCS versions: 2.1, 3.0\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes (v2.1): Read Write, Continuous (complex)\n   Attributes (v3.0): Read Write, Continuous (complex)\n   Attributes (v2.2): Deprecated\nVCP code 14: Select color preset\n   Select a specified color temperature\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Non-Continuous (complex)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code 16: Video gain: Red\n   Increase/decrease the luminesence of red pixels\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 17: User color vision compensation\n   Increase/decrease the degree of compensation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 18: Video gain: Green\n   Increase/decrease the luminesence of green pixels\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 1A: Video gain: Blue\n   Increase/decrease the luminesence of blue pixels\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 1C: Focus\n   Increase/decrease the focus of the image\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Continuous (standard)\nVCP code 1E: Auto setup\n   Perform autosetup function (H/V position, clock, clock phase, A/D converter, etc.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 1F: Auto color setup\n   Perform color autosetup function (R/G/B gain and offset, A/D setup, etc. \n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 20: Horizontal Position (Phase)\n   Increasing (decreasing) this value moves the image toward the right (left) of the display.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 22: Horizontal Size\n   Increase/decrease the width of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 24: Horizontal Pincushion\n   Increasing (decreasing) this value causes the right and left sides of the image to become more (less) convex.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 26: Horizontal Pincushion Balance\n   Increasing (decreasing) this value moves the center section of the image toward the right (left) side of the display.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 28: Horizontal Convergence R/B\n   Increasing (decreasing) this value shifts the red pixels to the right (left) and the blue pixels left (right) across the image with respect to the green pixels.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 29: Horizontal Convergence M/G\n   Increasing (decreasing) this value shifts the magenta pixels to the right (left) and the green pixels left (right) across the image with respect to the magenta (sic) pixels.\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 2A: Horizontal Linearity\n   Increase/decrease the density of pixels in the image center.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 2C: Horizontal Linearity Balance\n   Increasing (decreasing) this value shifts the density of pixels from the left (right) side to the right (left) side of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 2E: Gray scale expansion\n   Gray Scale Expansion\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Non-Continuous (complex)\nVCP code 30: Vertical Position (Phase)\n   Increasing (decreasing) this value moves the image toward the top (bottom) edge of the display.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 32: Vertical Size\n   Increase/decreasing the height of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 34: Vertical Pincushion\n   Increasing (decreasing) this value will cause the top and bottom edges of the image to become more (less) convex.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 36: Vertical Pincushion Balance\n   Increasing (decreasing) this value will move the center section of the image toward the top (bottom) edge of the display.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 38: Vertical Convergence R/B\n   Increasing (decreasing) this value shifts the red pixels up (down) across the image and the blue pixels down (up) across the image with respect to the green pixels.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 39: Vertical Convergence M/G\n   Increasing (decreasing) this value shifts the magenta pixels up (down) across the image and the green pixels down (up) across the image with respect to the magenta (sic) pixels.\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 3A: Vertical Linearity\n   Increase/decease the density of scan lines in the image center.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 3C: Vertical Linearity Balance\n   Increase/decrease the density of scan lines in the image center.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 3E: Clock phase\n   Increase/decrease the sampling clock phase shift\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Continuous (standard)\nVCP code 40: Horizontal Parallelogram\n   Increasing (decreasing) this value shifts the top section of the image to the right (left) with respect to the bottom section of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 41: Vertical Parallelogram\n   Increasing (decreasing) this value shifts the top section of the image to the right (left) with respect to the bottom section of the image. (sic)\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 42: Horizontal Keystone\n   Increasing (decreasing) this value will increase (decrease) the ratio between the horizontal size at the top of the image and the horizontal size at the bottom of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 43: Vertical Keystone\n   Increasing (decreasing) this value will increase (decrease) the ratio between the vertical size at the left of the image and the vertical size at the right of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 44: Rotation\n   Increasing (decreasing) this value rotates the image (counter) clockwise around the center point of the screen.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 46: Top Corner Flare\n   Increase/decrease the distance between the left and right sides at the top of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 48: Top Corner Hook\n   Increasing (decreasing) this value moves the top of the image to the right (left).\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 4A: Bottom Corner Flare\n   Increase/decrease the distance between the left and right sides at the bottom of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 4C: Bottom Corner Hook\n   Increasing (decreasing) this value moves the bottom end of the image to the right (left).\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 52: Active control\n   Read id of one feature that has changed, 0x00 indicates no more\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (complex)\nVCP code 54: Performance Preservation\n   Controls features aimed at preserving display performance\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (complex)\nVCP code 56: Horizontal Moire\n   Increase/decrease horizontal moire cancellation.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Continuous (standard)\nVCP code 58: Vertical Moire\n   Increase/decrease vertical moire cancellation.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Continuous (standard)\nVCP code 59: 6 axis saturation: Red\n   Increase/decrease red saturation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 5A: 6 axis saturation: Yellow\n   Increase/decrease yellow saturation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 5B: 6 axis saturation: Green\n   Increase/decrease green saturation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 5C: 6 axis saturation: Cyan\n   Increase/decrease cyan saturation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 5D: 6 axis saturation: Blue\n   Increase/decrease blue saturation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 5E: 6 axis saturation: Magenta\n   Increase/decrease magenta saturation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 60: Input Source\n   Selects active video source\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Table\n   Attributes (v2.2): Read Write, Non-Continuous (simple)\nVCP code 62: Audio speaker volume\n   Adjusts speaker volume\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: AUDIO\n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Read Write, Continuous (complex)\n   Attributes (v2.2): Read Write, Continuous (standard)\nVCP code 63: Speaker Select\n   Selects a group of speakers\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: AUDIO\n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 64: Audio: Microphone Volume\n   Increase/decrease microphone gain\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: AUDIO\n   Attributes: Read Write, Continuous (standard)\nVCP code 66: Ambient light sensor\n   Enable/Disable ambient light sensor\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 6B: Backlight Level: White\n   Increase/decrease the white backlight level\n   MCCS versions: 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 6C: Video black level: Red\n   Increase/decrease the black level of red pixels\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 6D: Backlight Level: Red\n   Increase/decrease the red backlight level\n   MCCS versions: 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 6E: Video black level: Green\n   Increase/decrease the black level of green pixels\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 6F: Backlight Level: Green\n   Increase/decrease the green backlight level\n   MCCS versions: 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 70: Video black level: Blue\n   Increase/decrease the black level of blue pixels\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 71: Backlight Level: Blue\n   Increase/decrease the blue backlight level\n   MCCS versions: 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 72: Gamma\n   Select relative or absolute gamma\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Non-Continuous (complex)\nVCP code 73: LUT Size\n   Provides the size (number of entries and number of bits/entry) for the Red, Green, and Blue LUT in the display.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: LUT\n   Attributes: Read Only, Table\nVCP code 74: Single point LUT operation\n   Writes a single point within the display's LUT, reads a single point from the LUT\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: LUT\n   Attributes: Read Write, Table\nVCP code 75: Block LUT operation\n   Load (read) multiple values into (from) the display's LUT\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: LUT\n   Attributes: Read Write, Table\nVCP code 76: Remote Procedure Call\n   Initiates a routine resident in the display\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: LUT\n   Attributes: Write Only, Table\nVCP code 78: Display Identification Operation\n   Causes a selected 128 byte block of Display Identification Data (EDID or Display ID) to be read\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes (v2.1): Read Only, Table\n   Attributes (v3.0): Read Only, Table\n   Attributes (v2.2): Read Only, Table\nVCP code 7A: Adjust Focal Plane\n   Increase/decrease the distance to the focal plane of the image\n   MCCS versions: 2.0, 2.1\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Deprecated\n   Attributes (v2.2): Deprecated\nVCP code 7C: Adjust Zoom\n   Increase/decrease the distance to the zoom function of the projection lens (optics)\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Continuous (standard)\nVCP code 7E: Trapezoid\n   Increase/decrease the trapezoid distortion in the image\n   MCCS versions: 2.0, 2.1\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Deprecated\n   Attributes (v2.2): Deprecated\nVCP code 80: Keystone\n   Increase/decrease the keystone distortion in the image.\n   MCCS versions: 2.0\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Deprecated\n   Attributes (v3.0): Deprecated\n   Attributes (v2.2): Deprecated\nVCP code 82: Horizontal Mirror (Flip)\n   Flip picture horizontally\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Geometry\n   ddcutil feature subsets: \n   Attributes (v2.0): Write Only, Non-Continuous (write-only)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.2): Read Write, Non-Continuous (simple)\nVCP code 84: Vertical Mirror (Flip)\n   Flip picture vertically\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Geometry\n   ddcutil feature subsets: \n   Attributes (v2.0): Write Only, Non-Continuous (write-only)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.2): Read Write, Non-Continuous (simple)\nVCP code 86: Display Scaling\n   Control the scaling (input vs output) of the display\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 87: Sharpness\n   Selects one of a range of algorithms. Increasing (decreasing) the value must increase (decrease) the edge sharpness of image features.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Read Write, Continuous (standard)\n   Attributes (v2.2): Read Write, Continuous (standard)\nVCP code 88: Velocity Scan Modulation\n   Increase (decrease) the velocity modulation of the horizontal scan as a function of the change in luminescence level\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 8A: Color Saturation\n   Increase/decrease the amplitude of the color difference components of the video signal\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR, TV\n   Attributes: Read Write, Continuous (standard)\nVCP code 8B: TV Channel Up/Down\n   Increment (1) or decrement (2) television channel\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: TV\n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 8C: TV Sharpness\n   Increase/decrease the amplitude of the high frequency components  of the video signal\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: TV\n   Attributes: Read Write, Continuous (standard)\nVCP code 8D: Audio mute/Screen blank\n   Mute/unmute audio, and (v2.2) screen blank\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: TV, AUDIO\n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code 8E: TV Contrast\n   Increase/decrease the ratio between blacks and whites in the image\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: TV\n   Attributes: Read Write, Continuous (standard)\nVCP code 8F: Audio Treble\n   Emphasize/de-emphasize high frequency audio\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: AUDIO\n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Read Write, Non-Continuous (complex)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code 90: Hue\n   Increase/decrease the wavelength of the color component of the video signal. AKA tint.  Applies to currently active interface\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: COLOR, TV\n   Attributes: Read Write, Continuous (standard)\nVCP code 91: Audio Bass\n   Emphasize/de-emphasize low frequency audio\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: AUDIO\n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Read Write, Non-Continuous (complex)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code 92: TV Black level/Luminesence\n   Increase/decrease the black level of the video\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: TV\n   Attributes: Read Write, Continuous (standard)\nVCP code 93: Audio Balance L/R\n   Controls left/right audio balance\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: AUDIO\n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Read Write, Non-Continuous (complex)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code 94: Audio Processor Mode\n   Select audio mode\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: TV, AUDIO\n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 95: Window Position(TL_X)\n   Top left X pixel of an area of the image\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry, Window\n   ddcutil feature subsets: WINDOW\n   Attributes: Read Write, Continuous (standard)\nVCP code 96: Window Position(TL_Y)\n   Top left Y pixel of an area of the image\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry, Window\n   ddcutil feature subsets: WINDOW\n   Attributes: Read Write, Continuous (standard)\nVCP code 97: Window Position(BR_X)\n   Bottom right X pixel of an area of the image\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry, Window\n   ddcutil feature subsets: WINDOW\n   Attributes: Read Write, Continuous (standard)\nVCP code 98: Window Position(BR_Y)\n   Bottom right Y pixel of an area of the image\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry, Window\n   ddcutil feature subsets: WINDOW\n   Attributes: Read Write, Continuous (standard)\nVCP code 99: Window control on/off\n   Enables the brightness and color within a window to be different from the desktop.\n   MCCS versions: 2.0, 2.1, 2.2\n   MCCS specification groups: Window\n   ddcutil feature subsets: WINDOW\n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Deprecated\n   Attributes (v2.2): Read Write, Non-Continuous (simple)\nVCP code 9A: Window background\n   Changes the contrast ratio between the area of the window and the rest of the desktop\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: WINDOW\n   Attributes: Read Write, Continuous (standard)\nVCP code 9B: 6 axis hue control: Red\n   Decrease shifts toward magenta, increase shifts toward yellow\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 9C: 6 axis hue control: Yellow\n   Decrease shifts toward green, increase shifts toward red\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 9D: 6 axis hue control: Green\n   Decrease shifts toward yellow, increase shifts toward cyan\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 9E: 6 axis hue control: Cyan\n   Decrease shifts toward green, increase shifts toward blue\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 9F: 6 axis hue control: Blue\n   Decrease shifts toward cyan, increase shifts toward magenta\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code A0: 6 axis hue control: Magenta\n   Decrease shifts toward blue, 127 no effect, increase shifts toward red\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code A2: Auto setup on/off\n   Turn on/off an auto setup function\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code A4: Window mask control\n   Turn selected window operation on/off, window mask\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: WINDOW\n   Attributes (v2.0): Read Write, Non-Continuous (complex)\n   Attributes (v2.1): Read Write, Non-Continuous (complex)\n   Attributes (v3.0): Read Write, Table\n   Attributes (v2.2): Read Write, Table\nVCP code A5: Change the selected window\n   Change selected window (as defined by 95h..98h)\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: WINDOW\n   Attributes: Read Write, Non-Continuous (simple)\nVCP code AA: Screen Orientation\n   Indicates screen orientation\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Geometry\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (simple)\nVCP code AC: Horizontal frequency\n   Horizontal sync signal frequency as determined by the display\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Continuous (complex)\nVCP code AE: Vertical frequency\n   Vertical sync signal frequency as determined by the display, in .01 hz\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Continuous (complex)\nVCP code B0: Settings\n   Store/restore the user saved values for the current mode.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Preset\n   ddcutil feature subsets: \n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code B2: Flat panel sub-pixel layout\n   LCD sub-pixel structure\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (simple)\nVCP code B4: Source Timing Mode\n   Indicates timing mode being sent by host\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Control\n   ddcutil feature subsets: \n   Attributes (v2.1): Read Write, Non-Continuous (complex)\n   Attributes (v3.0): Read Write, Table\n   Attributes (v2.2): Read Write, Table\nVCP code B6: Display technology type\n   Indicates the base technology type\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (simple)\nVCP code B7: Monitor status\n   Video mode and status of a DPVL capable monitor\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Only, Non-Continuous (complex)\nVCP code B8: Packet count\n   Counter for DPVL packets received\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Continuous (complex)\nVCP code B9: Monitor X origin\n   X origin of the monitor in the vertical screen\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Continuous (complex)\nVCP code BA: Monitor Y origin\n   Y origin of the monitor in the vertical screen\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Continuous (complex)\nVCP code BB: Header error count\n   Error counter for the DPVL header\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Continuous (complex)\nVCP code BC: Body CRC error count\n   CRC error counter for the DPVL body\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Continuous (complex)\nVCP code BD: Client ID\n   Assigned identification number for the monitor\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Continuous (complex)\nVCP code BE: Link control\n   Indicates status of the DVI link\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Non-Continuous (complex)\nVCP code C0: Display usage time\n   Active power on time in hours\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Continuous (complex)\nVCP code C2: Display descriptor length\n   Length in bytes of non-volatile storage in the display available for writing a display descriptor, max 256\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Continuous (standard)\nVCP code C3: Transmit display descriptor\n   Reads (writes) a display descriptor from (to) non-volatile storage in the display.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Table\nVCP code C4: Enable display of 'display descriptor'\n   If enabled, the display descriptor shall be displayed when no video is being received.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (complex)\nVCP code C6: Application enable key\n   A 2 byte value used to allow an application to only operate with known products.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (complex)\nVCP code C8: Display controller type\n   Mfg id of controller and 2 byte manufacturer-specific controller type\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Control, Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (complex)\nVCP code C9: Display firmware level\n   2 byte firmware level\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Control, Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (complex)\nVCP code CA: OSD/Button Control\n   Sets and indicates the current operational state of OSD (and buttons in v2.2)\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Control, Miscellaneous\n   ddcutil feature subsets: \n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code CC: OSD Language\n   On Screen Display languge\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Control, Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code CD: Status Indicators\n   Control up to 16 LED (or similar) indicators to indicate system status\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (complex)\nVCP code CE: Auxiliary display size\n   Rows and characters/row of auxiliary display\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (complex)\nVCP code CF: Auxiliary display data\n   Sets contents of auxiliary display device\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Write Only, Table\nVCP code D0: Output select\n   Selects the active output\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Table\n   Attributes (v2.2): Read Write, Non-Continuous (simple)\nVCP code D2: Asset Tag\n   Read an Asset Tag to/from the display\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Table\nVCP code D4: Stereo video mode\n   Stereo video mode\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (complex)\nVCP code D6: Power mode\n   DPM and DPMS status\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Control, Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code D7: Auxiliary power output\n   Controls an auxiliary power output from a display to a host device\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code DA: Scan mode\n   Controls scan characteristics (aka format)\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Non-Continuous (simple)\nVCP code DB: Image Mode\n   Controls aspects of the displayed image (TV applications)\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Control\n   ddcutil feature subsets: TV\n   Attributes: Read Write, Non-Continuous (simple)\nVCP code DC: Display Mode\n   Type of application used on display\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code DE: Scratch Pad\n   Operation mode (2.0) or scratch pad (3.0/2.2)\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes (v2.0): Write Only, Non-Continuous (write-only)\n   Attributes (v2.1): Read Write, Non-Continuous (complex)\n   Attributes (v3.0): Read Write, Non-Continuous (complex)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code DF: VCP Version\n   MCCS version\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (complex)", 
            "title": "ddcutil vcpinfo example"
        }, 
        {
            "location": "/detect_verbose_output/", 
            "text": "The following example shows verbose output of \nddcutil detect\n command on a system with 4 monitors attached.\n\n\n$ ddcutil detect --verbose\n\nOutput level:               Verbose\nReporting DDC data errors:  false\nTrace groups active:        none\n\nDisplay 1\n   Bus:                 /dev/i2c-0\n   Supports DDC:        true\n   EDID synopsis:\n      Mfg id:           DEL\n      Model:            DELL P2411H\n      Serial number:    F8NDP11G119U\n      Manufacture year: 2011\n      EDID version:     1.3\n      EDID hex dump:\n        +0          +4          +8          +c            0   4   8   c   \n+0000   00 ff ff ff ff ff ff 00 10 ac 6e a0 55 39 31 31   ..........n.U911\n+0010   04 15 01 03 80 35 1e 78 ea bb 04 a1 59 55 9e 28   .....5.x....YU.(\n+0020   0d 50 54 a5 4b 00 71 4f 81 80 d1 c0 01 01 01 01   .PT.K.qO........\n+0030   01 01 01 01 01 01 02 3a 80 18 71 38 2d 40 58 2c   .......:..q8-@X,\n+0040   45 00 13 2b 21 00 00 1e 00 00 00 ff 00 46 38 4e   E..+!........F8N\n+0050   44 50 31 31 47 31 31 39 55 0a 00 00 00 fc 00 44   DP11G119U......D\n+0060   45 4c 4c 20 50 32 34 31 31 48 0a 20 00 00 00 fd   ELL P2411H. ....\n+0070   00 38 4c 1e 53 11 00 0a 20 20 20 20 20 20 00 63   .8L.S...      .c\n   VCP version:         2.1\n   Controller mfg:      Mstar\n   Firmware version:    1.1\n\nDisplay 2\n   Bus:                 /dev/i2c-3\n   Supports DDC:        true\n   EDID synopsis:\n      Mfg id:           ACI\n      Model:            VE247\n      Serial number:    AALMQS027787\n      Manufacture year: 2010\n      EDID version:     1.3\n      EDID hex dump:\n        +0          +4          +8          +c            0   4   8   c   \n+0000   00 ff ff ff ff ff ff 00 04 69 93 24 01 01 01 01   .........i.$....\n+0010   2c 14 01 03 80 35 1e 78 ea 2c c5 a4 56 50 a1 28   ,....5.x.,..VP.(\n+0020   0f 50 54 bf ef 00 71 4f 81 80 81 40 95 00 a9 40   .PT...qO...@...@\n+0030   b3 00 d1 c0 01 01 02 3a 80 18 71 38 2d 40 58 2c   .......:..q8-@X,\n+0040   45 00 13 2b 21 00 00 1e 00 00 00 fd 00 32 4c 1e   E..+!........2L.\n+0050   53 11 00 0a 20 20 20 20 20 20 00 00 00 fc 00 56   S...      .....V\n+0060   45 32 34 37 0a 20 20 20 20 20 20 20 00 00 00 ff   E247.       ....\n+0070   00 41 41 4c 4d 51 53 30 32 37 37 38 37 0a 00 9e   .AALMQS027787...\n   VCP version:         2.0\n   Controller mfg:      RealTek\n   Firmware version:    2.0\n\nDisplay 3\n   Bus:                 /dev/i2c-5\n   Supports DDC:        true\n   EDID synopsis:\n      Mfg id:           ACR\n      Model:            Acer X243W\n      Serial number:    LAG040064310\n      Manufacture year: 2007\n      EDID version:     1.3\n      EDID hex dump:\n        +0          +4          +8          +c            0   4   8   c   \n+0000   00 ff ff ff ff ff ff 00 04 72 00 00 cf 12 60 74   .........r....`t\n+0010   2e 11 01 03 80 34 20 78 2a ef 95 a3 54 4c 9b 26   .....4 x*...TL.\n\n+0020   0f 50 54 a5 4b 00 81 80 81 00 81 0f 95 00 95 0f   .PT.K...........\n+0030   a9 40 b3 00 01 01 28 3c 80 a0 70 b0 23 40 30 20   .@....(\n..p.#@0 \n+0040   36 00 06 44 21 00 00 1a 00 00 00 fd 00 38 4c 1e   6..D!........8L.\n+0050   52 11 00 0a 20 20 20 20 20 20 00 00 00 fc 00 41   R...      .....A\n+0060   63 65 72 20 58 32 34 33 57 0a 20 20 00 00 00 ff   cer X243W.  ....\n+0070   00 4c 41 47 30 34 30 30 36 34 33 31 30 0a 00 68   .LAG040064310..h\n   VCP version:         2.1\n   Controller mfg:      Mstar\n   Firmware version:    0.3\n\nDisplay 4\n   Bus:                 /dev/i2c-6\n   Supports DDC:        true\n   EDID synopsis:\n      Mfg id:           DEL\n      Model:            DELL U3011\n      Serial number:    PH5NY2CIANXL\n      Manufacture year: 2012\n      EDID version:     1.4\n      EDID hex dump:\n        +0          +4          +8          +c            0   4   8   c   \n+0000   00 ff ff ff ff ff ff 00 10 ac 65 40 4c 58 4e 41   ..........e@LXNA\n+0010   33 16 01 04 b5 40 28 78 3a 8d 85 ad 4f 35 b1 25   3....@(x:...O5.%\n+0020   0e 50 54 a5 4b 00 71 4f 81 00 81 80 a9 40 d1 00   .PT.K.qO.....@..\n+0030   d1 40 01 01 01 01 e2 68 00 a0 a0 40 2e 60 30 20   .@.....h...@.`0 \n+0040   36 00 81 91 21 00 00 1a 00 00 00 ff 00 50 48 35   6...!........PH5\n+0050   4e 59 32 43 49 41 4e 58 4c 0a 00 00 00 fc 00 44   NY2CIANXL......D\n+0060   45 4c 4c 20 55 33 30 31 31 0a 20 20 00 00 00 fd   ELL U3011.  ....\n+0070   00 31 56 1d 71 1c 00 0a 20 20 20 20 20 20 01 56   .1V.q...      .V\n   VCP version:         2.1\n   Controller mfg:      Mstar\n   Firmware version:    1.5", 
            "title": "ddcutil detect example"
        }, 
        {
            "location": "/cap_u3011_verbose_output/", 
            "text": "Below is the result of executing the \nddcutil capabilities\n command for a Dell U3011 monitor that \nddcutil\n has identified as display number 4.\n\n\n$ ddcutil capabilities --display 4 --verbose\n\nOutput level:               Verbose\nReporting DDC data errors:  false\nTrace groups active:        none\n\nUnparsed capabilities string: (prot(monitor)type(lcd)model(U3011)cmds(01 02 03 07 0C E3 F3)vcp(02 04 05 06 08 10 12 14(01 05 08 0B 0C) 16 18 1A 52 60(01 03 04 0C 0F 11 12) AC AE B2 B6 C6 C8 C9 D6(01 04 05) DC(00 02 03 04 05) DF FD)mccs_ver(2.1)mswhql(1))\nMCCS version: 2.1\nCommands:\n  Command: 01 (VCP Request)\n  Command: 02 (VCP Response)\n  Command: 03 (VCP Set)\n  Command: 07 (Timing Request)\n  Command: 0c (Save Settings)\n  Command: e3 (Capabilities Reply)ls \n  Command: f3 (Capabilities Request)\nVCP Features:\n  Feature: 02 (New control value)\n  Feature: 04 (Restore factory defaults)\n  Feature: 05 (Restore factory brightness/contrast defaults)\n  Feature: 06 (Restore factory geometry defaults)\n  Feature: 08 (Restore color defaults)\n  Feature: 10 (Brightness)\n  Feature: 12 (Contrast)\n  Feature: 14 (Select color preset)\n    Values (unparsed): 01 05 08 0B 0C\n    Values (  parsed):\n       01: sRGB\n       05: 6500 K\n       08: 9300 K\n       0b: User 1\n       0c: User 2\n  Feature: 16 (Video gain: Red)\n  Feature: 18 (Video gain: Green)\n  Feature: 1A (Video gain: Blue)\n  Feature: 52 (Active control)\n  Feature: 60 (Input Source)\n    Values (unparsed): 01 03 04 0C 0F 11 12\n    Values (  parsed):\n       01: VGA-1\n       03: DVI-1\n       04: DVI-2\n       0c: Component video (YPrPb/YCrCb) 1\n       0f: DisplayPort-1\n       11: HDMI-1\n       12: HDMI-2\n  Feature: AC (Horizontal frequency)\n  Feature: AE (Vertical frequency)\n  Feature: B2 (Flat panel sub-pixel layout)\n  Feature: B6 (Display technology type)\n  Feature: C6 (Application enable key)\n  Feature: C8 (Display controller type)\n  Feature: C9 (Display firmware level)\n  Feature: D6 (Power mode)\n    Values (unparsed): 01 04 05\n    Values (  parsed):\n       01: DPM: On,  DPMS: Off\n       04: DPM: Off, DPMS: Off\n       05: Write only value to turn off display\n  Feature: DC (Display Mode)\n    Values (unparsed): 00 02 03 04 05\n    Values (  parsed):\n       00: Standard/Default mode\n       02: Mixed\n       03: Movie\n       04: User defined\n       05: Games\n  Feature: DF (VCP Version)\n  Feature: FD (manufacturer specific feature)", 
            "title": "ddcutil capabilities example"
        }, 
        {
            "location": "/getvcp_known_u3011_output/", 
            "text": "The following example shows the values of all VCP Feature Codes that \nddcutil\n understands for a Dell U3011 monitor attached at bus /dev/i2c-6.\n\n\n$ ddcutil getvcp known --bus 6\n\nVCP code 0x02 (New control value             ): One or more new control values have been saved (0x02)\nVCP code 0x0b (Color temperature increment   ): Invalid value: 0\nVCP code 0x0c (Color temperature request     ): 3000 + 2 * (feature 0B color temp increment) degree(s) Kelvin\nVCP code 0x0e (Clock                         ): current value =    50, max value =   100\nVCP code 0x10 (Brightness                    ): current value =    57, max value =   100\nVCP code 0x12 (Contrast                      ): current value =    56, max value =   100\nVCP code 0x14 (Select color preset           ): sRGB (sl=0x01)\nVCP code 0x16 (Video gain: Red               ): current value =   100, max value =   100\nVCP code 0x18 (Video gain: Green             ): current value =   100, max value =   100\nVCP code 0x1a (Video gain: Blue              ): current value =   100, max value =   100\nVCP code 0x1e (Auto setup                    ): Auto setup not active (sl=0x00)\nVCP code 0x20 (Horizontal Position (Phase)   ): current value =    50, max value =   100\nVCP code 0x30 (Vertical Position (Phase)     ): current value =    50, max value =   100\nVCP code 0x3e (Clock phase                   ): current value =    31, max value =   100\nVCP code 0x52 (Active control                ): Value: 0x14\nVCP code 0x59 (6 axis saturation: Red        ): current value =    50, max value =   100\nVCP code 0x5a (6 axis saturation: Yellow     ): current value =    50, max value =   100\nVCP code 0x5b (6 axis saturation: Green      ): current value =    50, max value =   100\nVCP code 0x5c (6 axis saturation: Cyan       ): current value =    50, max value =   100\nVCP code 0x5d (6 axis saturation: Blue       ): current value =    50, max value =   100\nVCP code 0x5e (6 axis saturation: Magenta    ): current value =    50, max value =   100\nVCP code 0x60 (Input Source                  ): DisplayPort-1 (sl=0x0f)\nVCP code 0x6c (Video black level: Red        ): current value =    50, max value =   100\nVCP code 0x6e (Video black level: Green      ): current value =    50, max value =   100\nVCP code 0x70 (Video black level: Blue       ): current value =    50, max value =   100\nVCP code 0x87 (Sharpness                     ): current value =     8, max value =   100\nVCP code 0x8a (Color Saturation              ): current value =    50, max value =   100\nVCP code 0x90 (Hue                           ): current value =    50, max value =   100\nVCP code 0x9b (6 axis hue control: Red       ): current value =    50, max value =   100\nVCP code 0x9c (6 axis hue control: Yellow    ): current value =    50, max value =   100\nVCP code 0x9d (6 axis hue control: Green     ): current value =    50, max value =   100\nVCP code 0x9e (6 axis hue control: Cyan      ): current value =    50, max value =   100\nVCP code 0x9f (6 axis hue control: Blue      ): current value =    50, max value =   100\nVCP code 0xa0 (6 axis hue control: Magenta   ): current value =    50, max value =   100\nVCP code 0xac (Horizontal frequency          ): 32864 hz\nVCP code 0xae (Vertical frequency            ): 59.80 hz\nVCP code 0xb2 (Flat panel sub-pixel layout   ): Red/Green/Blue vertical stripe (sl=0x01)\nVCP code 0xb4 (Source Timing Mode            ): mh=0x00, ml=0x02, sh=0x00, sl=0x01\nVCP code 0xb6 (Display technology type       ): LCD (active matrix) (sl=0x03)\nVCP code 0xc0 (Display usage time            ): Usage time (hours) = 5199 (0x00144f) mh=0x00, ml=0x00, sh=0x14, sl=0x4f\nVCP code 0xc6 (Application enable key        ): 0x45cc\nVCP code 0xc8 (Display controller type       ): Mfg: Mstar (sl=0x05), controller number: mh=0x00, ml=0x94, sh=0x85\nVCP code 0xc9 (Display firmware level        ): 1.5\nVCP code 0xca (OSD                           ): OSD Enabled (sl=0x02)\nVCP code 0xcc (OSD Language                  ): English (sl=0x02)\nVCP code 0xd6 (Power mode                    ): DPM: On,  DPMS: Off (sl=0x01)\nVCP code 0xdc (Display Mode                  ): Standard/Default mode (sl=0x00)\nVCP code 0xdf (VCP Version                   ): 2.1", 
            "title": "ddcutil getvcp example"
        }, 
        {
            "location": "/mccs_background/", 
            "text": "Monitor Control Command Set\n\n\nMCCS Terminology\n\n\nMonitor settings are referred to as Virtual Control Panel (VCP) features.\nFeatures are numbered from 0..255, and are specified using the hex\nrepresentation, e.g. 1A for blue level.   \n\n\nMCCS designates features as being one of three types:\n\n\n\n\nContinuous (C): Able to take any value up to some maximum\n\n\nNon-continuous (NC): Able to take only a designated set of values\n\n\nTable (T): Used for \"raw\" data such as a video LUT\n\n\n\n\nThis clean distinction has broken down as the MCCS specification has \nevolved.   Some features have changed category.  ddcutil distinguishes\nbetween \"simple\" NC fields, which are encoded using only a single byte (in field SL) and for which there is a simple list of possible values,\nand \"complex\" NC fields, where an algorithm must be applied to \ninterpret the bytes of a feature query.  This is a ddcutil distinction and \nnot part of the MCCS specification.\n\n\nMost features are both readable and writable (RW).  Some, such as \nVCP Version (DF), are read-only (RO), while others, such as Restore\nFactory Defaults (02) are write-only.\n\n\nMCCS Versions\n\n\n\n\nVersion 1, September 1998\n\n\n\n\nInitial version. \n\n\n\n\nVersion 2.0, October 1998\n\n\n\n\nIntroduced required features Display Controller Type (C8), Display Firmware Level (C9) and VCP Version (DF).\n\n\n\n\n\n\nVersion 2.1, May 2005   \n\n\n\n\n\n\nVersion 3.0, July 2006 \n\n\n\n\n\n\nNot upward compatible with Version 2.1.  Appears not to have achieved industry acceptance.  I have not seen\nany monitors implementing MCCS 3.0. \n\n\n\n\nVersion 2.2, July 2009 \n\n\n\n\nA revision to Version 2.1, incorporating most of the new features from Version 3.0 in a manner upwardly compatible with 2.1. \n\n\nNote that because Version 2.2 was issued after Version 3.0, when \nddcutil\n reports MCCS versions it orders them 1.0, 2.0, 2.1, 3.0, 2.2. \n\n\n\n\nVersion 2.2a, July 2011 \n\n\n\n\nMinor revision to Version 2.2.", 
            "title": "Monitor Control Command Set"
        }, 
        {
            "location": "/mccs_background/#monitor-control-command-set", 
            "text": "", 
            "title": "Monitor Control Command Set"
        }, 
        {
            "location": "/mccs_background/#mccs-terminology", 
            "text": "Monitor settings are referred to as Virtual Control Panel (VCP) features.\nFeatures are numbered from 0..255, and are specified using the hex\nrepresentation, e.g. 1A for blue level.     MCCS designates features as being one of three types:   Continuous (C): Able to take any value up to some maximum  Non-continuous (NC): Able to take only a designated set of values  Table (T): Used for \"raw\" data such as a video LUT   This clean distinction has broken down as the MCCS specification has \nevolved.   Some features have changed category.  ddcutil distinguishes\nbetween \"simple\" NC fields, which are encoded using only a single byte (in field SL) and for which there is a simple list of possible values,\nand \"complex\" NC fields, where an algorithm must be applied to \ninterpret the bytes of a feature query.  This is a ddcutil distinction and \nnot part of the MCCS specification.  Most features are both readable and writable (RW).  Some, such as \nVCP Version (DF), are read-only (RO), while others, such as Restore\nFactory Defaults (02) are write-only.", 
            "title": "MCCS Terminology"
        }, 
        {
            "location": "/mccs_background/#mccs-versions", 
            "text": "Version 1, September 1998   Initial version.    Version 2.0, October 1998   Introduced required features Display Controller Type (C8), Display Firmware Level (C9) and VCP Version (DF).    Version 2.1, May 2005       Version 3.0, July 2006     Not upward compatible with Version 2.1.  Appears not to have achieved industry acceptance.  I have not seen\nany monitors implementing MCCS 3.0.    Version 2.2, July 2009    A revision to Version 2.1, incorporating most of the new features from Version 3.0 in a manner upwardly compatible with 2.1.   Note that because Version 2.2 was issued after Version 3.0, when  ddcutil  reports MCCS versions it orders them 1.0, 2.0, 2.1, 3.0, 2.2.    Version 2.2a, July 2011    Minor revision to Version 2.2.", 
            "title": "MCCS Versions"
        }, 
        {
            "location": "/colormgt/", 
            "text": "Color Management\n\n\nA primary use for \nddcutil\n is as part of color profile management.  A monitor calibration is meaningful only if the color settings on the monitor are the same as when the calibration was performed. \n\n\nNormally, monitor settings are changed by pressing buttons on the monitor bezel.  Depending on the monitor, the process ranges from annoying to excruciating.  \nddcutil\n allows this process to be automated.\n\n\nCommand \nddcutil dumpvcp\n saves the current color related monitor settings in a file, and \nddcutil loadvcp\n restores them from a file. \n\n\nIf implemented by the monitor, the VCP feature codes in feature group \nPROFILE\n are saved by \ndumpvcp\n and restored by \nloadvcp\n. \nThese are:\n\n\n\n\n10: Brightness\n\n\n12: Contrast\n\n\n13: Backlight control\n\n\n14: Video gain: Red\n\n\n16: Video gain: Green\n\n\n18: Video gain: Blue\n\n\n6B: Backlight level: White\n\n\n6C: Video black level: Red\n\n\n6D: Backlight Level: Red\n\n\n6E: Video black level: Green\n\n\n6F: Backlight level: Green\n\n\n70: Video black level: Blue\n\n\n71: Backlight Level: Blue\n\n\n\n\nTo see the list of feature codes saved and restored, you can also issue the command: \n\n\nddcutil vcpinfo profile --terse\n\n\n\n\nColor Management Workflow\n\n\nTo discuss: \n\n\n\n\n\n\nSave profile related VCP values in a custom tag in monitor profile file instead of a separate file\n\n\n\n\n\n\nHaving a GUI for ddcutil would make monitor color adjustment much easier.   Such as GUI could be shown along size the \ndispcal\n color balance screen shown at the start of calibration.\n\n\n\n\n\n\nAPI access to dump/load features for simpler integration with other programs.\n\n\n\n\n\n\nMonitor Lookup Tables\n\n\nTypically, monitor calibration creates a color lookup table that is loaded into the video card.  Some advanced monitors have an internal lookup table.   Typically, these monitors have a software development kit with an API for accessing the LUT, and typically thse SDKs support Linux either poorly or not at all.  \n\n\nThe MCCS specification defines a set of features for accessing the monitor's internal lookup table: \n\n\n\n\n73: LUT size\n\n\n74: Single point LUT operation\n\n\n75: Block LUT operation\n\n\n76: Remote procedure call\n\n\n\n\nThese are what MCCS categorizes as \"Table\" type features.   Reading and writing table type features is implemented in \nddcutil\n, but has not yet been tested for lack of a monitor to test with.\n\n\nIf a monitor were to implement these features, \nddcutil\n should be able to load the LUT.  Unfortunately, no monitor with an internal hardware LUT that has yet been tested do implement them.  None of the following monitors with a hardware LUT implement the VCP codes:\n\n\n\n\nHP Dreamcolor LP2480zx\n\n\nNEC PA241\n\n\nEizo CG19 (has only USB interface)\n\n\nDell U2413", 
            "title": "Color Management"
        }, 
        {
            "location": "/colormgt/#color-management", 
            "text": "A primary use for  ddcutil  is as part of color profile management.  A monitor calibration is meaningful only if the color settings on the monitor are the same as when the calibration was performed.   Normally, monitor settings are changed by pressing buttons on the monitor bezel.  Depending on the monitor, the process ranges from annoying to excruciating.   ddcutil  allows this process to be automated.  Command  ddcutil dumpvcp  saves the current color related monitor settings in a file, and  ddcutil loadvcp  restores them from a file.   If implemented by the monitor, the VCP feature codes in feature group  PROFILE  are saved by  dumpvcp  and restored by  loadvcp . \nThese are:   10: Brightness  12: Contrast  13: Backlight control  14: Video gain: Red  16: Video gain: Green  18: Video gain: Blue  6B: Backlight level: White  6C: Video black level: Red  6D: Backlight Level: Red  6E: Video black level: Green  6F: Backlight level: Green  70: Video black level: Blue  71: Backlight Level: Blue   To see the list of feature codes saved and restored, you can also issue the command:   ddcutil vcpinfo profile --terse", 
            "title": "Color Management"
        }, 
        {
            "location": "/colormgt/#color-management-workflow", 
            "text": "To discuss:     Save profile related VCP values in a custom tag in monitor profile file instead of a separate file    Having a GUI for ddcutil would make monitor color adjustment much easier.   Such as GUI could be shown along size the  dispcal  color balance screen shown at the start of calibration.    API access to dump/load features for simpler integration with other programs.", 
            "title": "Color Management Workflow"
        }, 
        {
            "location": "/colormgt/#monitor-lookup-tables", 
            "text": "Typically, monitor calibration creates a color lookup table that is loaded into the video card.  Some advanced monitors have an internal lookup table.   Typically, these monitors have a software development kit with an API for accessing the LUT, and typically thse SDKs support Linux either poorly or not at all.    The MCCS specification defines a set of features for accessing the monitor's internal lookup table:    73: LUT size  74: Single point LUT operation  75: Block LUT operation  76: Remote procedure call   These are what MCCS categorizes as \"Table\" type features.   Reading and writing table type features is implemented in  ddcutil , but has not yet been tested for lack of a monitor to test with.  If a monitor were to implement these features,  ddcutil  should be able to load the LUT.  Unfortunately, no monitor with an internal hardware LUT that has yet been tested do implement them.  None of the following monitors with a hardware LUT implement the VCP codes:   HP Dreamcolor LP2480zx  NEC PA241  Eizo CG19 (has only USB interface)  Dell U2413", 
            "title": "Monitor Lookup Tables"
        }, 
        {
            "location": "/tuning/", 
            "text": "Instrumentation and Tuning\n\n\nddcutil\n has extensive facilities for reporting DDC protocol errors \nand peformance statistics, and some ability to tweak execution parameters from\nthe command line.\n\n\nI2C is an inherently unreliable protocol, requiring retry management.  Furthermore, 90% of\nddcutil's elapsed time is spent in timeouts mandated by the DDC specification.    \n\n\nThe relevant options are:\n\n\n\n\n\n\n\n\nOption\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\n--stats\n\n\nReport execution statistics\n\n\n\n\n\n\n--ddc\n\n\nReport DDC protocol errors\n\n\n\n\n\n\n--maxtries()\n\n\nSet maximum tries\n\n\n\n\n\n\n--force-slave-address\n\n\nForce control of I2C slave addresses\n\n\n\n\n\n\n--force\n\n\nRelax various internal checks\n\n\n\n\n\n\n--nodetect\n\n\nSkip display detection (valid only with --bus)\n\n\n\n\n\n\n--async\n\n\nExecute portion of monitor detection in parallel\n\n\n\n\n\n\n\n\nOption --ddc\n\n\nIf option \n--ddc\n is specified, \nddcutil\n reports protocol errors that it detects.  These may reflect I2C bus errors, or deviations by monitors from the MCCS specfication.  Most I2C errors cause a retry.  Some monitors are very clean.  Others, like the Dell P2411h, are very dirty. \n\n\nOption --stats\n\n\nOption \n--stats\n causes \nddcutil\n to report execution statistics.  It takes the following optional arguments: \n\n\n\n\n\n\n\n\n--stats Argument\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nerrors\n\n\nReport I2C/DDC error counts\n\n\n\n\n\n\ntries\n\n\nReport retry statistics\n\n\n\n\n\n\ncalls\n\n\nReport system call counts and time\n\n\n\n\n\n\nelapsed\n\n\nReport elapsed time\n\n\n\n\n\n\ntime\n\n\nSynonum for \nelapsed\n\n\n\n\n\n\nall\n\n\nReport all statistics\n\n\n\n\n\n\n\n\nIf \n--stats all\n is specified, or no argument is given, then all statistics are output. \n\n\n--stats calls\n implies \n--stats elapsed\n\n\nOption --maxtries\n\n\nThere are 3 kinds of exchanges in which retry is possible: \n\n\n\n\nwrite-only exchange.  Bytes are written with no subsequent read.\n\n  Used only to set a VCP feature value.  \n\n\nwrite-read exchange.  A write to the monitor, followed by a read.\n\n  Most DDC protocol exchanges are of this form.\n\n\nmulti-part exchange.  This is a \"meta\" exchange, consisting multiple \n  write-read exchanges. Used to query monitor capabilities, and for \n  querying and setting Table type VCP features. \n\n\n\n\nBy default, the maximum number of tries for each exchange is:\n\n\n\n\nwrite-only exchange:    4\n\n\nwrite-read exchange:   10\n\n\nmulti-part exchange:    8\n\n\n\n\nOption \n--maxtries\n allows you to play with the maximum try count.  Its argument\nconsists of 3 comma-separated values.  The following example sets the maximum \ntry counts to 3 for write-only exchanges, 6 for write-read exchanges, and 9 \nfor multi-part exchanges.\n\n\n--maxtries(3,6,9) \n\n\n\n\nA blank value leaves the corresponding try count unchanged.   The following \nexample changes only the maximum write-read try count:\n\n\n--maxtries(,7,) \n\n\n\n\nThe maximum maximum value is 15.\n\n\nOption --force-slave-address\n\n\nPer the DDC specification, \nddcutil\n reads the EDID over an I2C bus using slave address x50, and performs DDC communication\nusing slave address x37.  Occasionally, communication cannot be established because these addresses are marked as busy.\nThis option allows \nddcutil\n to take control of those slave\naddresses, potentially impacting the other program.  (Internally, \nddcutil\n uses \nioctl(I2C_SLAVE_FORCE)\n instead of\n\nioctl(I2C_SLAVE)\n.)\n\n\nOption --nodetect\n\n\nIf a display is specified by its I2C bus number (option \n--bus\n) and option \n--nodetect\n is specified,\nglobal display detection is skipped, improving startup time.\n\n\nOption --async\n\n\nIf there are multiple monitors and option \n--async\n is specified, initial monitor checks are performed in separate threads.\nimproving startup time.  \n\n\nOption --force\n\n\nA catchall option that allows \nddcutil\n to continue execution despite various failure conditions.   May be fatal.  Subject to change.", 
            "title": "Instrumentation and Tuning"
        }, 
        {
            "location": "/tuning/#instrumentation-and-tuning", 
            "text": "ddcutil  has extensive facilities for reporting DDC protocol errors \nand peformance statistics, and some ability to tweak execution parameters from\nthe command line.  I2C is an inherently unreliable protocol, requiring retry management.  Furthermore, 90% of\nddcutil's elapsed time is spent in timeouts mandated by the DDC specification.      The relevant options are:     Option  Function      --stats  Report execution statistics    --ddc  Report DDC protocol errors    --maxtries()  Set maximum tries    --force-slave-address  Force control of I2C slave addresses    --force  Relax various internal checks    --nodetect  Skip display detection (valid only with --bus)    --async  Execute portion of monitor detection in parallel", 
            "title": "Instrumentation and Tuning"
        }, 
        {
            "location": "/tuning/#option-ddc", 
            "text": "If option  --ddc  is specified,  ddcutil  reports protocol errors that it detects.  These may reflect I2C bus errors, or deviations by monitors from the MCCS specfication.  Most I2C errors cause a retry.  Some monitors are very clean.  Others, like the Dell P2411h, are very dirty.", 
            "title": "Option --ddc"
        }, 
        {
            "location": "/tuning/#option-stats", 
            "text": "Option  --stats  causes  ddcutil  to report execution statistics.  It takes the following optional arguments:      --stats Argument  Action      errors  Report I2C/DDC error counts    tries  Report retry statistics    calls  Report system call counts and time    elapsed  Report elapsed time    time  Synonum for  elapsed    all  Report all statistics     If  --stats all  is specified, or no argument is given, then all statistics are output.   --stats calls  implies  --stats elapsed", 
            "title": "Option --stats"
        }, 
        {
            "location": "/tuning/#option-maxtries", 
            "text": "There are 3 kinds of exchanges in which retry is possible:    write-only exchange.  Bytes are written with no subsequent read. \n  Used only to set a VCP feature value.    write-read exchange.  A write to the monitor, followed by a read. \n  Most DDC protocol exchanges are of this form.  multi-part exchange.  This is a \"meta\" exchange, consisting multiple \n  write-read exchanges. Used to query monitor capabilities, and for \n  querying and setting Table type VCP features.    By default, the maximum number of tries for each exchange is:   write-only exchange:    4  write-read exchange:   10  multi-part exchange:    8   Option  --maxtries  allows you to play with the maximum try count.  Its argument\nconsists of 3 comma-separated values.  The following example sets the maximum \ntry counts to 3 for write-only exchanges, 6 for write-read exchanges, and 9 \nfor multi-part exchanges.  --maxtries(3,6,9)   A blank value leaves the corresponding try count unchanged.   The following \nexample changes only the maximum write-read try count:  --maxtries(,7,)   The maximum maximum value is 15.", 
            "title": "Option --maxtries"
        }, 
        {
            "location": "/tuning/#option-force-slave-address", 
            "text": "Per the DDC specification,  ddcutil  reads the EDID over an I2C bus using slave address x50, and performs DDC communication\nusing slave address x37.  Occasionally, communication cannot be established because these addresses are marked as busy.\nThis option allows  ddcutil  to take control of those slave\naddresses, potentially impacting the other program.  (Internally,  ddcutil  uses  ioctl(I2C_SLAVE_FORCE)  instead of ioctl(I2C_SLAVE) .)", 
            "title": "Option --force-slave-address"
        }, 
        {
            "location": "/tuning/#option-nodetect", 
            "text": "If a display is specified by its I2C bus number (option  --bus ) and option  --nodetect  is specified,\nglobal display detection is skipped, improving startup time.", 
            "title": "Option --nodetect"
        }, 
        {
            "location": "/tuning/#option-async", 
            "text": "If there are multiple monitors and option  --async  is specified, initial monitor checks are performed in separate threads.\nimproving startup time.", 
            "title": "Option --async"
        }, 
        {
            "location": "/tuning/#option-force", 
            "text": "A catchall option that allows  ddcutil  to continue execution despite various failure conditions.   May be fatal.  Subject to change.", 
            "title": "Option --force"
        }, 
        {
            "location": "/table_features/", 
            "text": "Table Features\n\n\nSome VCP features are designated as type Table (T), as opposed to Continuous (C) or Non-Continuous (NC).\nRead and write requests for table features transmit blocks of data.\nIn particular, LUT related features are of type Table. \n\n\nddcutil\n exposes table feature values as uninterpreted hex strings,\ne.g. \n\n\nddcutil setvcp 60 01020304F1F2FEFF\n\n\n\n\nTable features support is currently implemented over DDC/CI, but has never been tested with an actual monitor. \n\n\nTo see the list of Table features, issue the command: \n\n\nddcutil vcpinfo table\n\n\n\n\nNote that whether a feature is of type Table can vary with MCCS version.  The \nddcutil vcpinfo\n command tries to\ntake this into account.\n\n\n\n\n\n\n\n\nCode\n\n\nFeature\n\n\nVersion Detail\n\n\n\n\n\n\n\n\n\n\n60\n\n\nSelect Active Video Source\n\n\nType NC in Versions 2.0 through 2.2\n\n\n\n\n\n\na4\n\n\nControl Selected Window Operation\n\n\nType NC in MCCS 2.0, T in 3.0, 2.2\n\n\n\n\n\n\nb4\n\n\nHost time mode\n\n\nType NC in MCCS 2.0, 2.1, T in 3.0, 2.2\n\n\n\n\n\n\nd0\n\n\nSelect Active Output\n\n\nType T in MCCS 3.0, NC otherwise", 
            "title": "Table Type Features"
        }, 
        {
            "location": "/table_features/#table-features", 
            "text": "Some VCP features are designated as type Table (T), as opposed to Continuous (C) or Non-Continuous (NC).\nRead and write requests for table features transmit blocks of data.\nIn particular, LUT related features are of type Table.   ddcutil  exposes table feature values as uninterpreted hex strings,\ne.g.   ddcutil setvcp 60 01020304F1F2FEFF  Table features support is currently implemented over DDC/CI, but has never been tested with an actual monitor.   To see the list of Table features, issue the command:   ddcutil vcpinfo table  Note that whether a feature is of type Table can vary with MCCS version.  The  ddcutil vcpinfo  command tries to\ntake this into account.     Code  Feature  Version Detail      60  Select Active Video Source  Type NC in Versions 2.0 through 2.2    a4  Control Selected Window Operation  Type NC in MCCS 2.0, T in 3.0, 2.2    b4  Host time mode  Type NC in MCCS 2.0, 2.1, T in 3.0, 2.2    d0  Select Active Output  Type T in MCCS 3.0, NC otherwise", 
            "title": "Table Features"
        }, 
        {
            "location": "/usb/", 
            "text": "USB Connected Monitors\n\n\nddcutil\n has support for monitors that implement the Monitor Control Command Set (MCCS) over USB.\nThe support is considered initial in that it has only been tested with only a few models of USB connected monitors.\n\n\nNote that some monitors use USB to communicate, but do not follow the specification for MCCS over USB. \nFor example, the HP Dreamcolor 2480zx uses a proprietary, undocumented protocol. \n\n\nLimitations: \n\n- The MCCS over USB specification has no mechanism for querying a capabilities string.  The \nddcutil capabilities\n \ncommand synthesizes a response based on the feature codes it detects. \n\n- Table type features are completely unsupported.\n\n- Apple Thunderbolt displays might work, but are not supported.  Thunderbolt integrates video, USB, and ethernet into a single cable, and \nappears to require a Thunderbolt capable capable computer, as I can find no adapters that split out all the signals.\nOther than actual Macs, these are uncommon.\n\n\nOn the other hand, MCCS over USB has advantages:\n\n- Unlike I2C, the protocol is inherently reliable.  No retry logic is needed.\n\n- Unlike I2C, USB communication does not require waits between system calls.  It is therefore faster. \n\n\nThanks to Ojdrej Zary, whose \nusbmonctl\n was used as the basis for USB support in \nddcutil\n.\n\n\nCommand \nddcutil chkusbmon\n\n\nCommand \nddcutil chkusbmon\n helps to detect USB HID compliant monitors.  It is intended for use in udev rules.\n\n\nddcutil chkusbmon ***hiddev device name***\n\n\n\n\ne.g. \n\n\nddcutil chkusbmon /dev/usb/hiddev3 \n\n\n\n\nReturns 0 if a device represents a USB attached monitor, non-zero if not.  See \nDevice Permissions\n\n\nCommand option --hiddev\n\n\nUSB connected monitors can be specfied by their hiddev device number, which specifies the /dev file \nby which they are accessed. That is, \n--hiddev 2\n refers to /dev/usb/hiddev2. \n\n\nCommand option --usb\n\n\nUSB connected monitors can be specified by their USB bus number and device number.  The numbers are separated by either a period or colon.\n\n\nFor example: \n\n\nddcutil --usb 3.5 ...\n\n\n\n\nselects the monitor at USB bus number 3, device number 5.  \n\n\nTo see a list of all USB devices: \n\n\nlsusb", 
            "title": "USB Connected Monitors"
        }, 
        {
            "location": "/usb/#usb-connected-monitors", 
            "text": "ddcutil  has support for monitors that implement the Monitor Control Command Set (MCCS) over USB.\nThe support is considered initial in that it has only been tested with only a few models of USB connected monitors.  Note that some monitors use USB to communicate, but do not follow the specification for MCCS over USB. \nFor example, the HP Dreamcolor 2480zx uses a proprietary, undocumented protocol.   Limitations:  \n- The MCCS over USB specification has no mechanism for querying a capabilities string.  The  ddcutil capabilities  \ncommand synthesizes a response based on the feature codes it detects.  \n- Table type features are completely unsupported. \n- Apple Thunderbolt displays might work, but are not supported.  Thunderbolt integrates video, USB, and ethernet into a single cable, and \nappears to require a Thunderbolt capable capable computer, as I can find no adapters that split out all the signals.\nOther than actual Macs, these are uncommon.  On the other hand, MCCS over USB has advantages: \n- Unlike I2C, the protocol is inherently reliable.  No retry logic is needed. \n- Unlike I2C, USB communication does not require waits between system calls.  It is therefore faster.   Thanks to Ojdrej Zary, whose  usbmonctl  was used as the basis for USB support in  ddcutil .", 
            "title": "USB Connected Monitors"
        }, 
        {
            "location": "/usb/#command-ddcutil-chkusbmon", 
            "text": "Command  ddcutil chkusbmon  helps to detect USB HID compliant monitors.  It is intended for use in udev rules.  ddcutil chkusbmon ***hiddev device name***  e.g.   ddcutil chkusbmon /dev/usb/hiddev3   Returns 0 if a device represents a USB attached monitor, non-zero if not.  See  Device Permissions", 
            "title": "Command ddcutil chkusbmon"
        }, 
        {
            "location": "/usb/#command-option-hiddev", 
            "text": "USB connected monitors can be specfied by their hiddev device number, which specifies the /dev file \nby which they are accessed. That is,  --hiddev 2  refers to /dev/usb/hiddev2.", 
            "title": "Command option --hiddev"
        }, 
        {
            "location": "/usb/#command-option-usb", 
            "text": "USB connected monitors can be specified by their USB bus number and device number.  The numbers are separated by either a period or colon.  For example:   ddcutil --usb 3.5 ...  selects the monitor at USB bus number 3, device number 5.    To see a list of all USB devices:   lsusb", 
            "title": "Command option --usb"
        }, 
        {
            "location": "/install/", 
            "text": "Installing \nddcutil\n From Prebuilt Packages\n\n\nPrebuilt packages fall into 2 groups, those maintained as part of the \nddcutil\n project, and those in Linux distribution repositories.\n\n\nIf no prebuilt package is available for your distribution, or if using AMD's proprietary fglrx driver, ddcutil must be \nbuilt from source\n.\n\n\nPrebuilt Packages Maintained by the \nddcutil\n Project\n\n\nThese packages are rebuilt with each \nddcutil\n release.\n\n\nPackages for recent Debian, Fedora, openSUSE, and Ubuntu releases are available for download from the openSUSE Build Service.\nUnfortunately, there's not one clean link for downloading OBS packages, so here are several.  \n\n\n\n\nAdd repository and download package ddcutil\n.\nThis is all you will need if just installing the command line version of ddcutil.  \n\n\nAll ddcutil packages\n\nPackages for both the command line and shared library version of \nddcutil\n.  Note that the development package is named \n\nlibddcutil-devel\n on RPM based distributions (SUSE, Fedora) and \nlibddcutil-dev\n on dpkg based distributions (Debian, Ubuntu).  \n\n\nFile system view\n  \n\n\n\n\nFor Ubuntu xenial, there's a \nPPA\n.\nTo use it, add the following lines to /etc/apt/sources.list:\n\n\ndeb http://ppa.launchpad.net/rockowitz/ddcutil/ubuntu xenial main \ndeb-src http://ppa.launchpad.net/rockowitz/ddcutil/ubuntu xenial main \n\n\n\n\nNote that this PPA is marked as xenial, but is valid for subsequent Ubuntu releases as well.\n\n\nPrebuilt Packages Maintained by Linux Distributions\n\n\nNote it may take some time for the lasted \"upstream\" version of \nddcutil\n to appear in \"downstream\" distributions. \n\n\nDownstream \nddcutil\n packages can be found at the following locations:\n\n\n\n\nAUR\n\n\nDebian Testing\n\n\nGentoo\n\n\nopenSUSE Tumbleweed\n\n\nUbuntu 18.04\n\n\n\n\nFor an up to date list of \nddcutil\n package locations, see the \nRepology\n web site.", 
            "title": "Install ddcutil From Prebuilt Packages"
        }, 
        {
            "location": "/install/#installing-ddcutil-from-prebuilt-packages", 
            "text": "Prebuilt packages fall into 2 groups, those maintained as part of the  ddcutil  project, and those in Linux distribution repositories.  If no prebuilt package is available for your distribution, or if using AMD's proprietary fglrx driver, ddcutil must be  built from source .", 
            "title": "Installing ddcutil From Prebuilt Packages"
        }, 
        {
            "location": "/install/#prebuilt-packages-maintained-by-the-ddcutil-project", 
            "text": "These packages are rebuilt with each  ddcutil  release.  Packages for recent Debian, Fedora, openSUSE, and Ubuntu releases are available for download from the openSUSE Build Service.\nUnfortunately, there's not one clean link for downloading OBS packages, so here are several.     Add repository and download package ddcutil .\nThis is all you will need if just installing the command line version of ddcutil.    All ddcutil packages \nPackages for both the command line and shared library version of  ddcutil .  Note that the development package is named  libddcutil-devel  on RPM based distributions (SUSE, Fedora) and  libddcutil-dev  on dpkg based distributions (Debian, Ubuntu).    File system view      For Ubuntu xenial, there's a  PPA .\nTo use it, add the following lines to /etc/apt/sources.list:  deb http://ppa.launchpad.net/rockowitz/ddcutil/ubuntu xenial main \ndeb-src http://ppa.launchpad.net/rockowitz/ddcutil/ubuntu xenial main   Note that this PPA is marked as xenial, but is valid for subsequent Ubuntu releases as well.", 
            "title": "Prebuilt Packages Maintained by the ddcutil Project"
        }, 
        {
            "location": "/install/#prebuilt-packages-maintained-by-linux-distributions", 
            "text": "Note it may take some time for the lasted \"upstream\" version of  ddcutil  to appear in \"downstream\" distributions.   Downstream  ddcutil  packages can be found at the following locations:   AUR  Debian Testing  Gentoo  openSUSE Tumbleweed  Ubuntu 18.04   For an up to date list of  ddcutil  package locations, see the  Repology  web site.", 
            "title": "Prebuilt Packages Maintained by Linux Distributions"
        }, 
        {
            "location": "/building/", 
            "text": "Building From Source\n\n\nBuilding from tarball\n\n\nddcutil\n can be built from its \ntarball\n in the usual way.\nUnpack the tar file, change to its directory, and issue the commands: \n\n\n# ./configure\n# make\n# sudo make install\n\n\n\n\nNote that additional steps are required to build \nddcutil\n with \nADL\n support.\nSee \nADL support\n.\n\n\nconfigure\n options\n\n\nThe \nconfigure\n script has several custom options.  Some reflect features under development, or tools used for development.\nThe publicly supported options are:\n\n\n\n\n\n\n\n\nOption\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\n--with-adl \n\n\nBuild with support for ADL connected monitors. See below\n\n\n\n\n\n\n--enable-usb\n\n\nBuild with support for USB connected monitors.  Setting --disable-usb reduces size and package requirements. (Default is --enable-usb.)\n\n\n\n\n\n\n--enable-drm\n\n\nBuild with DRM support, used for enhanced diagnostics.  Setting --disable-drm reduces size and package requirements. (Default is --enable-drm.)\n\n\n\n\n\n\n--enable-lib\n\n\nBuild with shared libraries.  Needed for API support.  (Default is --enable-lib.)\n\n\n\n\n\n\n--enable-x11\n\n\nBuild using X11 services, used for enhanced diagnostics.  Setting --disable-x11 allows for use on systems lacking X11.  (Default is --enable-x11.)\n\n\n\n\n\n\n\n\nRequired packages\n\n\nBecause of the variation among distributions, only general guidelines can be \ngiven for ddcutil prerequisites.  Ultimately, you'll have to try to build ddcutil and see what breaks.\n\n\nddcutil requires the following packages for both building and execution:\n\n\n\n\ni2c-tools\n\n\nglib-2.0  (Note: glib-2.0 can be packaged with different names, e.g. libglib2.0-0, and may entail installing multiple packages.)\n\n\nlibgudev  (e.g. libgudev1)\n\n\nlibusb-1.0 (e.g. libusb-1.0-0) \n\n\nlibudev (e.g. libudev1)\n\n\nlibdrm2 \n\n\nlibxrandr2\n\n\n\n\nOn most platforms, development related files (e.g. headers files) are in separate packages having a \n\"-dev\" or similar suffix in their names.   ddcutil needs development packages for:\n\n\n\n\nlibc6 (e.g. libc6-dev)\n\n\nglib2.0 (e.g. libglib2.0-0)\n\n\nlibusb (e.g. libusb-1_0-devel, libusb-1.0-0-dev)\n\n\npython (e.g. python-all-dev)\n\n\nudev or systemd  (udev may be part of systemd, e.g. libudev-devel, libudev-dev)\n\n\nx11 (e.g. libx11-dev)\n\n\nxrandr (e.g. libxrandr-dev)\n\n\nlibdrm2 (e.g. libdrm-devel)\n\n\n\n\nAt least on Ubuntu, the i2c.h header file is found in a separate package. \n\nIf the following package exists, it is required to build ddcutil.\n\n\n\n\nlibi2c-dev \n\n\n\n\nError messages from \nconfigure\n regarding missing packages can be misleading.  If \nconfigure\n complains that a package \nis not found but it seems to be installed, it's likely that the associated development package \n(with a suffix like \"-dev\") needs to be installed.\n\n\nBuilding requires that the core build files be installed (e.g. the files listed in build-essential on Ubuntu) and also the pkg-config system. \n\n\n\n\npkg-config\n\n\n\n\nBuilding from git\n\n\nThe git repository for \nddcutil\n is \nhere\n\n\n\n\n\n\nBuilding \nddcutil\n from git requires that the \nautotools\n related packages be installed.\n\nThe exact packages vary from distribution to distribution.   On Ubuntu, these include:\n\n\n\n\nautoconf  \n\n\nautomake  \n\n\nautotools-dev  \n\n\nlibtool  \n\n\nm4  \n\n\n\n\n\n\n\n\nTo configure the build, change to the main \nddcutil\n directory and execute the file: \n\n\n# ./autogen.sh\n\n\n\n\nOr issue the individual commands: \n\n\n# aclocal\n# autoconf\n# automake\n\n\n\n\nThen to configure, build, and install \nddcutil\n: \n\n\n# ./configure\n# make\n# sudo make install\n\n\n\n\nCommon issues:\n\n\n\n\nBuilding with support for the AMD proprietary video driver (fglrx) requires that \nconfigure\n be executed using \nthe \n-with-adl-headers\n argument.  See \nADL support\n.  \n\n\nIf you see a message \"required file './ltmain.sh.' not found\", run \nlibtoolize\n\n  (See https://www.gnu.org/software/automake/manual/html_node/Error-required-file-ltmain_002esh-not-found.html)  \n\n\nMay get the following warning when running automake\n\n\n\n\nsrc/Makefile.am:38: warning: compiling 'cmdline/cmd_parser_aux.c' in subdir requires 'AM_PROG_CC_C_O' in 'configure.ac'\n\n\n\n\nThis is an autotools versioning issue.  It appears that this warning can be ignored.\n\n- (need notes on other warnings that can be ignored) \n\n\nDevelopment configuration options.\n\n\nThere are several \nconfigure\n options that exist for developing \nddcutil\n.  They are listed here for completeness,\nand should be left disabled.\n\n\n\n\n--enable-callgraph\n \n\n\n--enable-cffi\n\n\n--enable-cython\n\n\n--enable-doxygen\n\n\n--enable-failisim\n\n\n--enable-gobject-api\n\n\n--enable-swig\n\n\n--enable-testcases", 
            "title": "Building From Source"
        }, 
        {
            "location": "/building/#building-from-source", 
            "text": "", 
            "title": "Building From Source"
        }, 
        {
            "location": "/building/#building-from-tarball", 
            "text": "ddcutil  can be built from its  tarball  in the usual way.\nUnpack the tar file, change to its directory, and issue the commands:   # ./configure\n# make\n# sudo make install  Note that additional steps are required to build  ddcutil  with  ADL  support.\nSee  ADL support .", 
            "title": "Building from tarball"
        }, 
        {
            "location": "/building/#configure-options", 
            "text": "The  configure  script has several custom options.  Some reflect features under development, or tools used for development.\nThe publicly supported options are:     Option  Purpose      --with-adl   Build with support for ADL connected monitors. See below    --enable-usb  Build with support for USB connected monitors.  Setting --disable-usb reduces size and package requirements. (Default is --enable-usb.)    --enable-drm  Build with DRM support, used for enhanced diagnostics.  Setting --disable-drm reduces size and package requirements. (Default is --enable-drm.)    --enable-lib  Build with shared libraries.  Needed for API support.  (Default is --enable-lib.)    --enable-x11  Build using X11 services, used for enhanced diagnostics.  Setting --disable-x11 allows for use on systems lacking X11.  (Default is --enable-x11.)", 
            "title": "configure options"
        }, 
        {
            "location": "/building/#required-packages", 
            "text": "Because of the variation among distributions, only general guidelines can be \ngiven for ddcutil prerequisites.  Ultimately, you'll have to try to build ddcutil and see what breaks.  ddcutil requires the following packages for both building and execution:   i2c-tools  glib-2.0  (Note: glib-2.0 can be packaged with different names, e.g. libglib2.0-0, and may entail installing multiple packages.)  libgudev  (e.g. libgudev1)  libusb-1.0 (e.g. libusb-1.0-0)   libudev (e.g. libudev1)  libdrm2   libxrandr2   On most platforms, development related files (e.g. headers files) are in separate packages having a \n\"-dev\" or similar suffix in their names.   ddcutil needs development packages for:   libc6 (e.g. libc6-dev)  glib2.0 (e.g. libglib2.0-0)  libusb (e.g. libusb-1_0-devel, libusb-1.0-0-dev)  python (e.g. python-all-dev)  udev or systemd  (udev may be part of systemd, e.g. libudev-devel, libudev-dev)  x11 (e.g. libx11-dev)  xrandr (e.g. libxrandr-dev)  libdrm2 (e.g. libdrm-devel)   At least on Ubuntu, the i2c.h header file is found in a separate package.  \nIf the following package exists, it is required to build ddcutil.   libi2c-dev    Error messages from  configure  regarding missing packages can be misleading.  If  configure  complains that a package \nis not found but it seems to be installed, it's likely that the associated development package \n(with a suffix like \"-dev\") needs to be installed.  Building requires that the core build files be installed (e.g. the files listed in build-essential on Ubuntu) and also the pkg-config system.    pkg-config", 
            "title": "Required packages"
        }, 
        {
            "location": "/building/#building-from-git", 
            "text": "The git repository for  ddcutil  is  here    Building  ddcutil  from git requires that the  autotools  related packages be installed. \nThe exact packages vary from distribution to distribution.   On Ubuntu, these include:   autoconf    automake    autotools-dev    libtool    m4       To configure the build, change to the main  ddcutil  directory and execute the file:   # ./autogen.sh  Or issue the individual commands:   # aclocal\n# autoconf\n# automake  Then to configure, build, and install  ddcutil :   # ./configure\n# make\n# sudo make install  Common issues:   Building with support for the AMD proprietary video driver (fglrx) requires that  configure  be executed using \nthe  -with-adl-headers  argument.  See  ADL support .    If you see a message \"required file './ltmain.sh.' not found\", run  libtoolize \n  (See https://www.gnu.org/software/automake/manual/html_node/Error-required-file-ltmain_002esh-not-found.html)    May get the following warning when running automake   src/Makefile.am:38: warning: compiling 'cmdline/cmd_parser_aux.c' in subdir requires 'AM_PROG_CC_C_O' in 'configure.ac'  This is an autotools versioning issue.  It appears that this warning can be ignored. \n- (need notes on other warnings that can be ignored)", 
            "title": "Building from git"
        }, 
        {
            "location": "/building/#development-configuration-options", 
            "text": "There are several  configure  options that exist for developing  ddcutil .  They are listed here for completeness,\nand should be left disabled.   --enable-callgraph    --enable-cffi  --enable-cython  --enable-doxygen  --enable-failisim  --enable-gobject-api  --enable-swig  --enable-testcases", 
            "title": "Development configuration options."
        }, 
        {
            "location": "/adl/", 
            "text": "Building with ADL Support\n\n\nSpecial consideration is required if using AMD's proprietary driver (fglrx).\nThis driver does not expose /dev/i2c-* devices.  Instead, the driver provides\nI2C communication with the montior through its API, known as the AMD Device Library (ADL).\n\n\nThe ADL license does not allow its header files to be redistributed with the ddcutil source. \n\nConsequently, extra steps are required to build a copy of ddcutil that supports fglrx monitors: \n\n\n\n\nDownload the ADL SDK from \nhere\n.\n\n\nExtract the following files (they will be found in various subdirectories).\n\n  Copy them to some directory on your system: \n\n\n\n\n adl_defines.h\n adl_sdk.h\n adl_structures.h\n mccs.h\n\n\n\n\n\n\nWhen building ddcutil from either the git source or tarball, execute configure as follows\n\n\n\n\n# ./configure --with-adl-headers=DIR\n\n\n\n\nwhere DIR is the name of the directory where you saved the ADL header files.\n\n\nNote: The license for the AMD Device Library (ADL) SDK library does allow for \nincorporating its components in distributed executables.  In the future, binaries \ndistributed from this site will be built with ADL support. That is not currently the case.", 
            "title": "AMD fglrx Driver"
        }, 
        {
            "location": "/adl/#building-with-adl-support", 
            "text": "Special consideration is required if using AMD's proprietary driver (fglrx).\nThis driver does not expose /dev/i2c-* devices.  Instead, the driver provides\nI2C communication with the montior through its API, known as the AMD Device Library (ADL).  The ADL license does not allow its header files to be redistributed with the ddcutil source.  \nConsequently, extra steps are required to build a copy of ddcutil that supports fglrx monitors:    Download the ADL SDK from  here .  Extract the following files (they will be found in various subdirectories). \n  Copy them to some directory on your system:     adl_defines.h\n adl_sdk.h\n adl_structures.h\n mccs.h   When building ddcutil from either the git source or tarball, execute configure as follows   # ./configure --with-adl-headers=DIR  where DIR is the name of the directory where you saved the ADL header files.  Note: The license for the AMD Device Library (ADL) SDK library does allow for \nincorporating its components in distributed executables.  In the future, binaries \ndistributed from this site will be built with ADL support. That is not currently the case.", 
            "title": "Building with ADL Support"
        }, 
        {
            "location": "/config/", 
            "text": "ddcutil\n Configuration\n\n\nSeveral aspects of the communication environment must be configured.  \n\n\nEnsure the monitor is enabled for DDC communication\n\n\nNearly all monitors manufactured since the mid 2000's support DDC/CI, as do many made earlier.  For most monitors that\nsupport DDC/CI, whether DDC/CI comminication is actually enabled is controlled by a setting in the on screen display.\nThe item is typically found in a submenu named something like \"Other Settings\"\n\n\nVideo Driver\n\n\nThe video driver must support I2C bus communication.   All major open source drivers (nouveau, radeon, admdgpu, i915) support \nI2C bus communication, as do the Nvidia and old AMD fglrx proprietary drivers.  \n\n\nIf using Nvidia's proprietary video driver, special settings may be necessary.  See \nSpecial Nvidia Driver Settings\n\n\nFor the Rapberry Pi, see the section \nRaspberry Pi\n.\n\n\nEnsure that the /dev/i2c-N devices exist\n\n\nTypically, the I2C buses are exposed as devices named /dev/i2c-N.  (The one exception is the older proprietary AMD fglrx driver, \nwhich instead provides an API for I2C communication.)\nIf using an open source video driver, kernel module i2c-dev must be loaded to create the /dev/i2c-N devices.  See \nKernel Module Configuration\n\n\nGrant read/write permission for the /dev/i2c-N devices representing monitors\n\n\nddcutil\n users require read/write permission to /dev/i2c-N devices.  With varying complexity, this can be effected in several ways.\n\n\n\n\n\n\nRun \nddcutil\n as root.  \n\n\n\n\n\n\nGrant everyone RW access to the /dev/i2c devices.  \n\n\n\n\n\n\nAdd a file with the following line to /etc/udev/rules.d\n\n\nSUBSYSTEM==\ni2c-dev\n,KERNEL==\ni2c-[0-9]*\n, MODE=\n0666\n\n\n\n\n\n\n\nIf /dev/i2c-N devices are already assigned to group i2c, add users to that group. \n\n\n\n\nThis is the case, for exmample, if package i2c-tools has been installed on a Debian derived distribution (e.g. Ubuntu). \nAdd the users who will run \nddcutil\n to that group. \n\n\nusermod -G i2c -a \nyourname\n\n\n\n\n\n\n\nCreate group i2c to manage access.\n\n\n\n\nThe most general case entails creating group i2c, creating a UDEV rule assigning /dev/i2c-N devices to group i2c, and adding users to group i2c.  See section \n\n\nFor a full discussion, see \nDevice Permissions\n.\n\n\n\n\nUSB connected monitors\n\n\n\n\nFor details about USB device permissions for those monitors using USB instead of I2C to communicate the Monitor Control Command Set, \nsee see \nDevice Permissions\n.\n\n\nInstallation Diagnostics\n\n\nIf ddcutil installs successfully but execution fails, command \nddcutil environment\n\ncan be used to probe the I2C environment and may provide clues as to the problem.\nFor USB connected monitors, use command \nddcutil usbenvironment\n.", 
            "title": "Configuration and Installation Diagnostics"
        }, 
        {
            "location": "/config/#ddcutil-configuration", 
            "text": "Several aspects of the communication environment must be configured.", 
            "title": "ddcutil Configuration"
        }, 
        {
            "location": "/config/#ensure-the-monitor-is-enabled-for-ddc-communication", 
            "text": "Nearly all monitors manufactured since the mid 2000's support DDC/CI, as do many made earlier.  For most monitors that\nsupport DDC/CI, whether DDC/CI comminication is actually enabled is controlled by a setting in the on screen display.\nThe item is typically found in a submenu named something like \"Other Settings\"", 
            "title": "Ensure the monitor is enabled for DDC communication"
        }, 
        {
            "location": "/config/#video-driver", 
            "text": "The video driver must support I2C bus communication.   All major open source drivers (nouveau, radeon, admdgpu, i915) support \nI2C bus communication, as do the Nvidia and old AMD fglrx proprietary drivers.    If using Nvidia's proprietary video driver, special settings may be necessary.  See  Special Nvidia Driver Settings  For the Rapberry Pi, see the section  Raspberry Pi .", 
            "title": "Video Driver"
        }, 
        {
            "location": "/config/#ensure-that-the-devi2c-n-devices-exist", 
            "text": "Typically, the I2C buses are exposed as devices named /dev/i2c-N.  (The one exception is the older proprietary AMD fglrx driver, \nwhich instead provides an API for I2C communication.)\nIf using an open source video driver, kernel module i2c-dev must be loaded to create the /dev/i2c-N devices.  See  Kernel Module Configuration", 
            "title": "Ensure that the /dev/i2c-N devices exist"
        }, 
        {
            "location": "/config/#grant-readwrite-permission-for-the-devi2c-n-devices-representing-monitors", 
            "text": "ddcutil  users require read/write permission to /dev/i2c-N devices.  With varying complexity, this can be effected in several ways.    Run  ddcutil  as root.      Grant everyone RW access to the /dev/i2c devices.      Add a file with the following line to /etc/udev/rules.d  SUBSYSTEM== i2c-dev ,KERNEL== i2c-[0-9]* , MODE= 0666    If /dev/i2c-N devices are already assigned to group i2c, add users to that group.    This is the case, for exmample, if package i2c-tools has been installed on a Debian derived distribution (e.g. Ubuntu). \nAdd the users who will run  ddcutil  to that group.   usermod -G i2c -a  yourname    Create group i2c to manage access.   The most general case entails creating group i2c, creating a UDEV rule assigning /dev/i2c-N devices to group i2c, and adding users to group i2c.  See section   For a full discussion, see  Device Permissions .   USB connected monitors   For details about USB device permissions for those monitors using USB instead of I2C to communicate the Monitor Control Command Set, \nsee see  Device Permissions .", 
            "title": "Grant read/write permission for the /dev/i2c-N devices representing monitors"
        }, 
        {
            "location": "/config/#installation-diagnostics", 
            "text": "If ddcutil installs successfully but execution fails, command  ddcutil environment \ncan be used to probe the I2C environment and may provide clues as to the problem.\nFor USB connected monitors, use command  ddcutil usbenvironment .", 
            "title": "Installation Diagnostics"
        }, 
        {
            "location": "/i2c_permissions/", 
            "text": "Device Permissions\n\n\nExcept when using AMD's proprietary driver (see \nhere\n) ddcutil requires \nwrite access to /dev/i2c-*.  \n\n\nOn some distributions, package i2c-tools creates group i2c, and assigns that the group to\n/dev/i2c-* devices using a udev rule. In that case all that is necessary is to add your user\nname to group i2c: \n\n\n$ sudo usermod your-user-name -aG i2c\n\n\n\n\nFor testing, it may be simpler to give everyone permission to write to \n/dev/i2c-* for the current boot:\n\n\n$ sudo chmod a+rw /dev/i2c-*\n\n\n\n\nIf needed, a udev rule for giving group i2c RW permission on the /i2c-dev-* devices \ncan be found in distributed file \n45-ddcutils-i2c.rules\n.  It can be copied to \n/etc/udev/rules.d, but do check that this rule does not conflict with others in that directory.\n\n\n$ sudo cp /usr/share/ddcutil/data/etc/udev/rules.d/45-ddcutils-i2c.rules /etc/udev/rules.d\n\n\n\n\nIf using a monitor that transmits MCCS over USB, ddcutil requires read/write access to device\n/dev/usb/hiddev\nN\n, where \nN\n is the number for the device representing the monitor's USB connection.\n\n\nddcutil has to be careful when accessing the /dev/usb/hiddev* devices, as some of these \ncan represent USB attached input devices such as keyboards or mice. \n\n\nDistributed file \n45-ddcutil-usb.rules\n shows a couple ways to give ddcutil the required \naccess.  This file can be copied to /etc/udev/rules.d.  All but one of the command lines in \nthat file should commented out. \n\n\nThe following rule gives group \nvideo\n access to the USB port of an Apple Cinema Display by specifying its \nUSB device user id (aka uid) and product id (aka pid):\n\n\nSUBSYSTEM==\nusbmisc\n, ATTRS{idVendor}==\n05ac\n, ATTRS{idProduct}==\n9223\n,  MODE=\n0666\n \n\n\n\n\nThis line would of course have to edited for your monitor.  One way to find its uid/pid is the \n\nlsusb\n command. \n\n\nAn alternative way to set proper device permissions is to call \nddcutil\n from the udev rule \nto test whether a device is a HID compliant monitor: \n\n\nSUBSYSTEM==\nusbmisc\n,  KERNEL==\nhiddev*\n, PROGRAM=\n/usr/local/bin/ddcutil chkusbmon $env{DEVNAME} -v\n, MODE=\n0660\n, GROUP=\nvideo\n\n\n\n\n\nNote that the path to the ddcutil executable will have be edited to the location where ddcutil installed on your system. \n\n\nThe -v option produces informational messages.  These are lost when the rule is normally executed by\nudev, but can be helpful when rules are tested using the \"udevadm test\" command. \n\n\nDistribution\nfile \n45-ddcutils-usb.rules\n contains sample udev rules to set permissions for USB connector monitors. \nIt can be copied to \n/etc/udev/rules.d, but do check that this rule does not conflict with others in that directory.\n\n\n$ sudo cp /usr/share/ddcutil/data/etc/udev/rules.d/45-ddcutils-usb.rules /etc/udev/rules.d\n\n\n\n\nBear in mind when looking at the variety of udev rules is that there are often several valid ways to identify a device.\n\n\nThe following section from the udev documentation \n(\nhttps://www.kernel.org/pub/linux/utils/kernel/hotplug/udev/udev.html\n) \nmay be helpful:\n\n\n\n\nThe udev rules are read from the files located in the system rules directory \n/usr/lib/udev/rules.d, the volatile runtime directory /run/udev/rules.d and \nthe local administration directory /etc/udev/rules.d. All rules files are \ncollectively sorted and processed in lexical order, regardless of the directories \nin which they live. However, files with identical file names replace each other. \nFiles in /etc have the highest priority, files in /run take precedence over files \nwith the same name in /lib. This can be used to override a system-supplied rules \nfile with a local file if needed; a symlink in /etc with the same name as a rules \nfile in /lib, pointing to /dev/null, disables the rules file entirely.", 
            "title": "Device Permissions"
        }, 
        {
            "location": "/i2c_permissions/#device-permissions", 
            "text": "Except when using AMD's proprietary driver (see  here ) ddcutil requires \nwrite access to /dev/i2c-*.    On some distributions, package i2c-tools creates group i2c, and assigns that the group to\n/dev/i2c-* devices using a udev rule. In that case all that is necessary is to add your user\nname to group i2c:   $ sudo usermod your-user-name -aG i2c  For testing, it may be simpler to give everyone permission to write to \n/dev/i2c-* for the current boot:  $ sudo chmod a+rw /dev/i2c-*  If needed, a udev rule for giving group i2c RW permission on the /i2c-dev-* devices \ncan be found in distributed file  45-ddcutils-i2c.rules .  It can be copied to \n/etc/udev/rules.d, but do check that this rule does not conflict with others in that directory.  $ sudo cp /usr/share/ddcutil/data/etc/udev/rules.d/45-ddcutils-i2c.rules /etc/udev/rules.d  If using a monitor that transmits MCCS over USB, ddcutil requires read/write access to device\n/dev/usb/hiddev N , where  N  is the number for the device representing the monitor's USB connection.  ddcutil has to be careful when accessing the /dev/usb/hiddev* devices, as some of these \ncan represent USB attached input devices such as keyboards or mice.   Distributed file  45-ddcutil-usb.rules  shows a couple ways to give ddcutil the required \naccess.  This file can be copied to /etc/udev/rules.d.  All but one of the command lines in \nthat file should commented out.   The following rule gives group  video  access to the USB port of an Apple Cinema Display by specifying its \nUSB device user id (aka uid) and product id (aka pid):  SUBSYSTEM== usbmisc , ATTRS{idVendor}== 05ac , ATTRS{idProduct}== 9223 ,  MODE= 0666    This line would of course have to edited for your monitor.  One way to find its uid/pid is the  lsusb  command.   An alternative way to set proper device permissions is to call  ddcutil  from the udev rule \nto test whether a device is a HID compliant monitor:   SUBSYSTEM== usbmisc ,  KERNEL== hiddev* , PROGRAM= /usr/local/bin/ddcutil chkusbmon $env{DEVNAME} -v , MODE= 0660 , GROUP= video   Note that the path to the ddcutil executable will have be edited to the location where ddcutil installed on your system.   The -v option produces informational messages.  These are lost when the rule is normally executed by\nudev, but can be helpful when rules are tested using the \"udevadm test\" command.   Distribution\nfile  45-ddcutils-usb.rules  contains sample udev rules to set permissions for USB connector monitors. \nIt can be copied to \n/etc/udev/rules.d, but do check that this rule does not conflict with others in that directory.  $ sudo cp /usr/share/ddcutil/data/etc/udev/rules.d/45-ddcutils-usb.rules /etc/udev/rules.d  Bear in mind when looking at the variety of udev rules is that there are often several valid ways to identify a device.  The following section from the udev documentation \n( https://www.kernel.org/pub/linux/utils/kernel/hotplug/udev/udev.html ) \nmay be helpful:   The udev rules are read from the files located in the system rules directory \n/usr/lib/udev/rules.d, the volatile runtime directory /run/udev/rules.d and \nthe local administration directory /etc/udev/rules.d. All rules files are \ncollectively sorted and processed in lexical order, regardless of the directories \nin which they live. However, files with identical file names replace each other. \nFiles in /etc have the highest priority, files in /run take precedence over files \nwith the same name in /lib. This can be used to override a system-supplied rules \nfile with a local file if needed; a symlink in /etc with the same name as a rules \nfile in /lib, pointing to /dev/null, disables the rules file entirely.", 
            "title": "Device Permissions"
        }, 
        {
            "location": "/kernel_module/", 
            "text": "Kernel Module Configuration\n\n\nIf using an open source video driver, kernel module i2c-dev must be available.\nOn some distributions, it is built into the Linux kernel.  If not, it must be loaded explicitly. \n\n\nTo see if i2c-dev is built into the kernel, issue the following command: \n\n\ngrep i2c-dev.ko  /lib/modules/`uname -r`/modules.builtin\n\n\n\n\nIf i2c-dev is not built in, add the line \"i2c_dev\" to /etc/modules or a file containing the single line:\n\n\ni2c_dev\n\n\n\n\nto directory /etc/modules-load.d\n\n\n\n\n\nFrom the freedesktop.org systemd doc: \n\n\n\n\nsystemd-modules-load.service(8) reads files from the [following]directories\nwhich contain kernel modules to load during boot in a static list. \n\n\n/etc/modules-load.d/\n.conf\n/run/modules-load.d/\n.conf\n/usr.lib.modules-load.d/*.conf\n\n\nEach configuration file is named in the style of /etc/modules-load.d/program.conf. \nNote that it is usually a better idea to rely on the automatic module loading \nby PCI IDs, USB IDs, DMI IDs or similar triggers encoded in the kernel modules \nthemselves instead of static configuration like this. In fact, most modern \nkernel modules are prepared for automatic loading already.", 
            "title": "Kernel Module Configuration"
        }, 
        {
            "location": "/kernel_module/#kernel-module-configuration", 
            "text": "If using an open source video driver, kernel module i2c-dev must be available.\nOn some distributions, it is built into the Linux kernel.  If not, it must be loaded explicitly.   To see if i2c-dev is built into the kernel, issue the following command:   grep i2c-dev.ko  /lib/modules/`uname -r`/modules.builtin  If i2c-dev is not built in, add the line \"i2c_dev\" to /etc/modules or a file containing the single line:  i2c_dev  to directory /etc/modules-load.d   From the freedesktop.org systemd doc:    systemd-modules-load.service(8) reads files from the [following]directories\nwhich contain kernel modules to load during boot in a static list.   /etc/modules-load.d/ .conf\n/run/modules-load.d/ .conf\n/usr.lib.modules-load.d/*.conf  Each configuration file is named in the style of /etc/modules-load.d/program.conf. \nNote that it is usually a better idea to rely on the automatic module loading \nby PCI IDs, USB IDs, DMI IDs or similar triggers encoded in the kernel modules \nthemselves instead of static configuration like this. In fact, most modern \nkernel modules are prepared for automatic loading already.", 
            "title": "Kernel Module Configuration"
        }, 
        {
            "location": "/nvidia/", 
            "text": "Special Nvidia Driver Settings\n\n\nWhen using Nvidia's proprietary driver, I2C communication fails on some cards. \n\n\nIt works on several older Nvidia cards I have, but failed with my more recent \nGTX660Ti. (Specfically, I2C reads of 1 or 2 bytes succeeded, but reads of 3 \nor more bytes failed.)  Others have reported similar problems. \n\n\nPer \nthis discussion\n, adding the \nfollowing to the \"Device\" section for the Nvidia driver resolves the problem for some cards:\n\n\n Option     \nRegistryDwords\n  \nRMUseSwI2c=0x01; RMI2cSpeed=100\n\n\n\n\n\nA file for making this change is 90-nvidia_i2c.conf located in distribution \n directory data/etc/X11/xorg.conf.d  \n\n\nSection \nDevice\n\n   Driver \nnvidia\n\n   Identifier \nDev0\n\n   Option     \nRegistryDwords\n  \nRMUseSwI2c=0x01; RMI2cSpeed=100\n\n   # solves problem of i2c errors with nvidia driver\n   # per https://devtalk.nvidia.com/default/topic/572292/-solved-does-gddccontrol-work-for-anyone-here-nvidia-i2c-monitor-display-ddc/#4309293\nEndSection\n\n\n\n\nCopy this file to /etc/X11/xorg.conf.d  \n\n\nNote: This file works if there is no /etc/X11/xorg.conf file.  If you do have an \nxorg.conf file the Identifier field will likely require modification.\n\n\nThis does not, however, appear to be a universal solution.  It has been reported to fail on a GTX960 with Nvidia driver version 358.16 and a GTX1060 (?) with driver Nvidia driver version ???\n\n\nIn a \nrelated post on Nvidia's site\n, \nuser arcnmx reported:\n\n\n\n\nI hadn't seen it suggested yet, so for anyone using KMS/nvidia-drm or otherwise loading the nvidia kernel module early on who can't get the xorg.conf setting to fix DDC on newer cards, I've had to add the following to modprobe.conf or modprobe.d/whatever.conf instead:\n\n\n\n\noptions nvidia NVreg_RegistryDwords=RMUseSwI2c=0x01;RMI2cSpeed=100\n\n\n\n\n\n\nTo confirm that the settings are working: \n\n\n\n\n    $ grep RegistryDwords /proc/driver/nvidia/params\n    RegistryDwords: \nRMUseSwI2c=0x01;RMI2cSpeed=100\n\n\n\n\n\n\n\nThis makes DDC over HDMI work with my Pascal card and fixes the \"invalid EDID\" errors at least, and also doesn't require starting X to use it, should help with wayland, etc.", 
            "title": "Special Nvidia Driver Settings"
        }, 
        {
            "location": "/nvidia/#special-nvidia-driver-settings", 
            "text": "When using Nvidia's proprietary driver, I2C communication fails on some cards.   It works on several older Nvidia cards I have, but failed with my more recent \nGTX660Ti. (Specfically, I2C reads of 1 or 2 bytes succeeded, but reads of 3 \nor more bytes failed.)  Others have reported similar problems.   Per  this discussion , adding the \nfollowing to the \"Device\" section for the Nvidia driver resolves the problem for some cards:   Option      RegistryDwords    RMUseSwI2c=0x01; RMI2cSpeed=100   A file for making this change is 90-nvidia_i2c.conf located in distribution \n directory data/etc/X11/xorg.conf.d    Section  Device \n   Driver  nvidia \n   Identifier  Dev0 \n   Option      RegistryDwords    RMUseSwI2c=0x01; RMI2cSpeed=100 \n   # solves problem of i2c errors with nvidia driver\n   # per https://devtalk.nvidia.com/default/topic/572292/-solved-does-gddccontrol-work-for-anyone-here-nvidia-i2c-monitor-display-ddc/#4309293\nEndSection  Copy this file to /etc/X11/xorg.conf.d    Note: This file works if there is no /etc/X11/xorg.conf file.  If you do have an \nxorg.conf file the Identifier field will likely require modification.  This does not, however, appear to be a universal solution.  It has been reported to fail on a GTX960 with Nvidia driver version 358.16 and a GTX1060 (?) with driver Nvidia driver version ???  In a  related post on Nvidia's site , \nuser arcnmx reported:   I hadn't seen it suggested yet, so for anyone using KMS/nvidia-drm or otherwise loading the nvidia kernel module early on who can't get the xorg.conf setting to fix DDC on newer cards, I've had to add the following to modprobe.conf or modprobe.d/whatever.conf instead:   options nvidia NVreg_RegistryDwords=RMUseSwI2c=0x01;RMI2cSpeed=100   To confirm that the settings are working:        $ grep RegistryDwords /proc/driver/nvidia/params\n    RegistryDwords:  RMUseSwI2c=0x01;RMI2cSpeed=100    This makes DDC over HDMI work with my Pascal card and fixes the \"invalid EDID\" errors at least, and also doesn't require starting X to use it, should help with wayland, etc.", 
            "title": "Special Nvidia Driver Settings"
        }, 
        {
            "location": "/virtual_machines/", 
            "text": "Virtual Machines\n\n\nddcutil can be built in a virtual machine.  However, when using the built-in video drivers, loading i2_dev does \nnot create /dev/i2c-* devices, either on VirtualBox or VMware.   This is as expected, since DDC features affect the physical monitor.\n\n\nIt's possible that ddcutil would work if using a normal video device driver with PCI passthrough, so that the device driver is \nactually controlling a real monitor.  This has not been tested.", 
            "title": "Virtual Machines"
        }, 
        {
            "location": "/virtual_machines/#virtual-machines", 
            "text": "ddcutil can be built in a virtual machine.  However, when using the built-in video drivers, loading i2_dev does \nnot create /dev/i2c-* devices, either on VirtualBox or VMware.   This is as expected, since DDC features affect the physical monitor.  It's possible that ddcutil would work if using a normal video device driver with PCI passthrough, so that the device driver is \nactually controlling a real monitor.  This has not been tested.", 
            "title": "Virtual Machines"
        }, 
        {
            "location": "/raspberry/", 
            "text": "Raspberry Pi\n\n\nThe following instructions for installing \nddcutil\n on the Raspberry Pi are a distillation of user feedback, my own experiences with a Raspberry Pi 3 Model B, \nand discussions on the Web. \n\n\nddcutil\n is known to work on both Raspberry Pi 3 Model B and Raspberry Pi 2.  It has been tested with the following distributions:\n\n\n\n\nRaspbian (Release 2017-09-07)\n\n\nUbuntu 16.04 \n\n\nFedora 26\n\n\nopenSUSE Tumbleweed with kernel 4.11.13 \n\n\n\n\nAt least on The Raspberry Pi 2 or 3, the I2C bus for the HDMI connection is /dev/i2c-2.  To enable it, the following line is required in the \nconfig.txt\n file: \n\n\ndtparam=i2c2_iknowwhatimdoing\n\n\n\n\nAlternatively, the experimental OpenGL \nvc4-kms-v3d driver\n enables /dev/i2c-2 automatically.   In that case, the above \ni2c2_iknowwhatimdoing\n setting is not needed, though this may possibly change:\n\n\ndtoverlay=vc4-kms-v3d\n\n\n\n\nAlso, ensure that i2c_dev is listed in /etc/modules, /etc/modules.conf, or a file in /etc/modules-load.d, as appropriate for your system.\n\n\nPrebuilt \nddcutil\n packages for the Raspberry Pi are available for many distributions.\nSee \nRepology\n for pointers.\nIf there is no prebuilt version for your environment, or the prebuilt version is out of date, \nddcutil\n can be built from source.\n\n\nBackground\n\n\nEnabling /dev/i2c-2 requires the peculiar dtpararm statement described above, instead of the more expected: \n\n\n# Won't work!\ndtparam=i2c2\n\n\n\n\nThe parameter name was chosen as a caution.  From the \ncommit\n that added the option: \n\n\n\n\nThe third I2C bus (I2C2) is normally reserved for HDMI use. Careless use of this bus can break an attached display - use with caution.\n\n\nIt is recommended to disable accesses by VideoCore by setting hdmi_ignore_edid=1 or hdmi_edid_file=1 in config.txt.\n\n\nThe interface is disabled by default - enable using the i2c2_iknowwhatimdoing DT parameter.\n\n\n\n\nThe issue appears to be that application access to /dev/i2c-2 from the CPU is independent of, and so can conflict with, video driver access via the GPU (at least with the default driver).  From an \nonline comment\n: \n\n\n\n\nYes, but the GPU considers itself to be the sole user of the BSC2 peripheral. Poking the i2c from the ARM CPU (via linux driver) will likely work, but beware if the GPU tries to access the same peripheral then bad things will happen.\n. As long as you stay away from hotplugging HDMI, or tvservice commands (or anything likely to use tvservice) then the GPU is unlikely cause any traffic on BSC2.\n\n\n\n\nAs a practical matter, this does not appear to be an issue.\n\n\nConcerns have also been expressed about 3.3v vs 5v voltage incompatibility on the I2C bus, since the HDMI spec is 5v.  However, as I read the \n\nI2C Specification\n any recent I2C implementation should be able to adapt to voltages up\nto 5.5 volt. Again, I have not experienced a problem in this regard.", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/raspberry/#raspberry-pi", 
            "text": "The following instructions for installing  ddcutil  on the Raspberry Pi are a distillation of user feedback, my own experiences with a Raspberry Pi 3 Model B, \nand discussions on the Web.   ddcutil  is known to work on both Raspberry Pi 3 Model B and Raspberry Pi 2.  It has been tested with the following distributions:   Raspbian (Release 2017-09-07)  Ubuntu 16.04   Fedora 26  openSUSE Tumbleweed with kernel 4.11.13    At least on The Raspberry Pi 2 or 3, the I2C bus for the HDMI connection is /dev/i2c-2.  To enable it, the following line is required in the  config.txt  file:   dtparam=i2c2_iknowwhatimdoing  Alternatively, the experimental OpenGL  vc4-kms-v3d driver  enables /dev/i2c-2 automatically.   In that case, the above  i2c2_iknowwhatimdoing  setting is not needed, though this may possibly change:  dtoverlay=vc4-kms-v3d  Also, ensure that i2c_dev is listed in /etc/modules, /etc/modules.conf, or a file in /etc/modules-load.d, as appropriate for your system.  Prebuilt  ddcutil  packages for the Raspberry Pi are available for many distributions.\nSee  Repology  for pointers.\nIf there is no prebuilt version for your environment, or the prebuilt version is out of date,  ddcutil  can be built from source.", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/raspberry/#background", 
            "text": "Enabling /dev/i2c-2 requires the peculiar dtpararm statement described above, instead of the more expected:   # Won't work!\ndtparam=i2c2  The parameter name was chosen as a caution.  From the  commit  that added the option:    The third I2C bus (I2C2) is normally reserved for HDMI use. Careless use of this bus can break an attached display - use with caution.  It is recommended to disable accesses by VideoCore by setting hdmi_ignore_edid=1 or hdmi_edid_file=1 in config.txt.  The interface is disabled by default - enable using the i2c2_iknowwhatimdoing DT parameter.   The issue appears to be that application access to /dev/i2c-2 from the CPU is independent of, and so can conflict with, video driver access via the GPU (at least with the default driver).  From an  online comment :    Yes, but the GPU considers itself to be the sole user of the BSC2 peripheral. Poking the i2c from the ARM CPU (via linux driver) will likely work, but beware if the GPU tries to access the same peripheral then bad things will happen.\n. As long as you stay away from hotplugging HDMI, or tvservice commands (or anything likely to use tvservice) then the GPU is unlikely cause any traffic on BSC2.   As a practical matter, this does not appear to be an issue.  Concerns have also been expressed about 3.3v vs 5v voltage incompatibility on the I2C bus, since the HDMI spec is 5v.  However, as I read the  I2C Specification  any recent I2C implementation should be able to adapt to voltages up\nto 5.5 volt. Again, I have not experienced a problem in this regard.", 
            "title": "Background"
        }, 
        {
            "location": "/faq/", 
            "text": "Frequently Asked Questions\n\n\n\n\nddcutil\n can't communicate with a monitor when it's plugged into a docking station.\n\n\nddcutil\n does work when the monitor is plugged directly into the laptop.\nThe problem affects DisplayPort, DVI, and HDMI connectors on the dock.\n\n\nThis is a problem with newer docking stations that implement DisplayPort Multi Stream Transport, and appears\nto be a bug in the DRI driver code.\n\n\nFor the gory details, see this \nthread\n on the Intel-gfx developers list. \n\n\nI'm using Nvidia's proprietary driver.  \nddcutil\n doesn't seem to be be working.\n\n\nSymptoms include \"DDC communication failed\" on \nddcutil detect\n, and lots of \"Maximum retries exceeded\" errors\non command \nddcutil getvcp known\n.  \n\n\nYou may need the Nvidia secret handshake.  See \nSpecial Nvidia Driver Settings\n.\n\n\nThe \ncapabilities\n command reports the MCCS (aka VCP) version, but elsewhere \nddcutil\n says the version is unknown.\n\n\nDDC/CI has two ways of reporting the the MCCS version:\n\n\n\n\nAs part of the capabilities string returned in response to a DDC Capabilities Request.  \n\n\nAs the response to a VCP Feature Request for feature xDF (VCP Version). \n\n\n\n\nSometimes they disagree.\n\n\nCommand \nddcutil capabilities\n reports the response to the DDC Capabilities Request.  However, \nddcutil\n regards this \noutput as purely informational.   It does not use the capabilities string when formulating commands and \ninterpeting responses.  This is for multiple reasons:\n\n\n\n\n\n\nA DDC capabilities request requires multiple I2C exchanges, making it both slow and unreliable.  Because of its complexity, it is particularly vulnerable to\nI2C errors.  On monitors with paticularly poor I2C implementations it sometimes fails because the maximum number of \nI2C retries is exceeded.\n\n\n\n\n\n\nThere is no capabilities request defined in the programming interface for USB connected monitors. \nddcutil simulates a capabilities response by looking at what USB HID reports exist for feature codes. \n\n\n\n\n\n\nThe response to the DDC capabilities API request may be incorrect.   For example, the capabilities response from the HP LP2480zx\nmonitor does not list VCP feature code x10 (brightness) as supported.  However, feature code x10 is in fact supported.  The only \nway to know for sure if a monitor implememts a VCP feature code is to try it.\n\n\n\n\n\n\nddcutil\n therefore relies on VCP feature code xDF to determine the VCP version.  (For USB connected monitors, it queries HID usage x00800004.)  It is possible that feature code xDF is unsupported, even though the capabilities response specifies a version.\n\n\nThe output of the \ncapabilities\n command is incorrect.\n\n\nFor example, a Dell P2210 monitor has VGA, DVI, and DisplayPort inputs, but capabilities only reports: \n\n\n Feature: 60 (Input Source)\n    Values (unparsed): 01 03\n    Values (  parsed):\n       01: VGA-1\n       03: DVI-1 \n\n\n\n\nThe capabilities string reported by a monitor is often incorrect. While the \nddcutil capabilities\n command parses and\nreports the string, this is solely informational. \n\n\nThe only way to know for sure if a monitor supports a VCP Feature Code is by testing using the \ngetvcp\n and \nsetvcp\n commands. \n\n\nThe following command will attempt to read all VCP codes that \nddcutil\n understands, other than those that are write-only: \n\n\nddcutil getvcp known\n\n\n\n\nTo attempt to read all possible VCP codes, whether understood by \nddcutil\n or not, except for those that are known to be write-only: \n\n\nddcutil getvcp scan\n\n\n\n\nTo see all the values defined for a non-continuous (NC) feature code, i.e. one with discrete values, use the \nvcpinfo\n command with the \n\n--verbose\n option.  For example, to see all the values defined in the \nMonitor Control Command Specification\n for VCP feature x60 (Input Source): \n\n\n# ddcutil vcpinfo 60 --verbose\n\nVCP code 60: Input Source\n   Selects active video source\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Table (normal)\n   Attributes (v2.2): Read Write, Non-Continuous (simple)\n   Simple NC values:\n      0x01: VGA-1\n      0x02: VGA-2\n      0x03: DVI-1\n      0x04: DVI-2\n      0x05: Composite video 1\n      0x06: Composite video 2\n      0x07: S-Video-1\n      0x08: S-Video-2\n      0x09: Tuner-1\n      0x0a: Tuner-2\n      0x0b: Tuner-3\n      0x0c: Component video (YPrPb/YCrCb) 1\n      0x0d: Component video (YPrPb/YCrCb) 2\n      0x0e: Component video (YPrPb/YCrCb) 3\n      0x0f: DisplayPort-1\n      0x10: DisplayPort-2\n      0x11: HDMI-1\n      0x12: HDMI-2\n\n\n\n\nIn practice, any given monitor will implement only a few of the NC values, and some monitors will implement undocumented values. \nThe only way to know for sure is by testing. \n\n\nddcutil detect --verbose\n reports that both I2C address x50 (EDID) and x37 (DDC) are responsive, but DDC communication fails.\n\n\nThere can be any number of reasons for this situation.\n\n\n\n\nCheck that DDC/CI communication is enabled in the monitor's on-screen display?\n\n\nIt has been observed in the case of a Tegra video card using the nouveau driver.\n\n\nSee also the discussions of \nduplicate entries for a DisplayPort monitor\n, and of \nfailures with newer docking stations\n.\n\n\n\n\n\n\nThe same DisplayPort connected monitor appears twice in the output of \nddcutil detect\n.\n\n\nSometimes the same DisplayPort connected monitor is detected at 2 different I2C bus numbers.  \nddcutil detect\n reads the\nEDID at on both buses, but DDC communication succeeds on only 1 bus.  The other bus is regarded as an invalid display.\nThe invalid bus appears to be related to the DisplayPort multistream facility.  You can ignore the invalid entry.\n\n\nThe \ndetect\n command reports different EDIDs depending on how the monitor is connected to the video card.\n\n\nStrange as it may seem at first, a monitor can have more than one EDID.\nThe EDID for a VGA connection will have a different video input definition (byte x14) than that for a  digital connection.\nThe VGA version of the EDID will have timing information.\n\n\nThe \ndetect\n command reports that I2C bus address x30 (EDID block number) is inactive.\n\n\nEDID version 1.4 allows for addtional 128 byte EDID blocks.  I2C bus address x30 specifies \nwhich block to read.  These blocks generally contain extended timing information.\n\nddcutil\n is interested only in the contents of the first EDID block.\nThe check of bus address x30 is purely informational.\n\n\nconfigure\n complains that a required package does not exist, but it is installed on my system.\n\n\nWhen building \nddcutil\n, error messages from pkg-config (which is called by configure) can be misleading.\nIf configure complains that a package is not found but it seems to be installed, it's likely that what's \nmissing is the associated development package (with a suffix like \"-dev\").", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#frequently-asked-questions", 
            "text": "", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#ddcutil-cant-communicate-with-a-monitor-when-its-plugged-into-a-docking-station", 
            "text": "ddcutil  does work when the monitor is plugged directly into the laptop.\nThe problem affects DisplayPort, DVI, and HDMI connectors on the dock.  This is a problem with newer docking stations that implement DisplayPort Multi Stream Transport, and appears\nto be a bug in the DRI driver code.  For the gory details, see this  thread  on the Intel-gfx developers list.", 
            "title": "ddcutil can't communicate with a monitor when it's plugged into a docking station."
        }, 
        {
            "location": "/faq/#im-using-nvidias-proprietary-driver-ddcutil-doesnt-seem-to-be-be-working", 
            "text": "Symptoms include \"DDC communication failed\" on  ddcutil detect , and lots of \"Maximum retries exceeded\" errors\non command  ddcutil getvcp known .    You may need the Nvidia secret handshake.  See  Special Nvidia Driver Settings .", 
            "title": "I'm using Nvidia's proprietary driver.  ddcutil doesn't seem to be be working."
        }, 
        {
            "location": "/faq/#the-capabilities-command-reports-the-mccs-aka-vcp-version-but-elsewhere-ddcutil-says-the-version-is-unknown", 
            "text": "DDC/CI has two ways of reporting the the MCCS version:   As part of the capabilities string returned in response to a DDC Capabilities Request.    As the response to a VCP Feature Request for feature xDF (VCP Version).    Sometimes they disagree.  Command  ddcutil capabilities  reports the response to the DDC Capabilities Request.  However,  ddcutil  regards this \noutput as purely informational.   It does not use the capabilities string when formulating commands and \ninterpeting responses.  This is for multiple reasons:    A DDC capabilities request requires multiple I2C exchanges, making it both slow and unreliable.  Because of its complexity, it is particularly vulnerable to\nI2C errors.  On monitors with paticularly poor I2C implementations it sometimes fails because the maximum number of \nI2C retries is exceeded.    There is no capabilities request defined in the programming interface for USB connected monitors. \nddcutil simulates a capabilities response by looking at what USB HID reports exist for feature codes.     The response to the DDC capabilities API request may be incorrect.   For example, the capabilities response from the HP LP2480zx\nmonitor does not list VCP feature code x10 (brightness) as supported.  However, feature code x10 is in fact supported.  The only \nway to know for sure if a monitor implememts a VCP feature code is to try it.    ddcutil  therefore relies on VCP feature code xDF to determine the VCP version.  (For USB connected monitors, it queries HID usage x00800004.)  It is possible that feature code xDF is unsupported, even though the capabilities response specifies a version.", 
            "title": "The capabilities command reports the MCCS (aka VCP) version, but elsewhere ddcutil says the version is unknown."
        }, 
        {
            "location": "/faq/#the-output-of-the-capabilities-command-is-incorrect", 
            "text": "For example, a Dell P2210 monitor has VGA, DVI, and DisplayPort inputs, but capabilities only reports:    Feature: 60 (Input Source)\n    Values (unparsed): 01 03\n    Values (  parsed):\n       01: VGA-1\n       03: DVI-1   The capabilities string reported by a monitor is often incorrect. While the  ddcutil capabilities  command parses and\nreports the string, this is solely informational.   The only way to know for sure if a monitor supports a VCP Feature Code is by testing using the  getvcp  and  setvcp  commands.   The following command will attempt to read all VCP codes that  ddcutil  understands, other than those that are write-only:   ddcutil getvcp known  To attempt to read all possible VCP codes, whether understood by  ddcutil  or not, except for those that are known to be write-only:   ddcutil getvcp scan  To see all the values defined for a non-continuous (NC) feature code, i.e. one with discrete values, use the  vcpinfo  command with the  --verbose  option.  For example, to see all the values defined in the  Monitor Control Command Specification  for VCP feature x60 (Input Source):   # ddcutil vcpinfo 60 --verbose\n\nVCP code 60: Input Source\n   Selects active video source\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Table (normal)\n   Attributes (v2.2): Read Write, Non-Continuous (simple)\n   Simple NC values:\n      0x01: VGA-1\n      0x02: VGA-2\n      0x03: DVI-1\n      0x04: DVI-2\n      0x05: Composite video 1\n      0x06: Composite video 2\n      0x07: S-Video-1\n      0x08: S-Video-2\n      0x09: Tuner-1\n      0x0a: Tuner-2\n      0x0b: Tuner-3\n      0x0c: Component video (YPrPb/YCrCb) 1\n      0x0d: Component video (YPrPb/YCrCb) 2\n      0x0e: Component video (YPrPb/YCrCb) 3\n      0x0f: DisplayPort-1\n      0x10: DisplayPort-2\n      0x11: HDMI-1\n      0x12: HDMI-2  In practice, any given monitor will implement only a few of the NC values, and some monitors will implement undocumented values. \nThe only way to know for sure is by testing.", 
            "title": "The output of the capabilities command is incorrect."
        }, 
        {
            "location": "/faq/#ddcutil-detect-verbose-reports-that-both-i2c-address-x50-edid-and-x37-ddc-are-responsive-but-ddc-communication-fails", 
            "text": "There can be any number of reasons for this situation.   Check that DDC/CI communication is enabled in the monitor's on-screen display?  It has been observed in the case of a Tegra video card using the nouveau driver.  See also the discussions of  duplicate entries for a DisplayPort monitor , and of  failures with newer docking stations .", 
            "title": "ddcutil detect --verbose reports that both I2C address x50 (EDID) and x37 (DDC) are responsive, but DDC communication fails."
        }, 
        {
            "location": "/faq/#the-same-displayport-connected-monitor-appears-twice-in-the-output-of-ddcutil-detect", 
            "text": "Sometimes the same DisplayPort connected monitor is detected at 2 different I2C bus numbers.   ddcutil detect  reads the\nEDID at on both buses, but DDC communication succeeds on only 1 bus.  The other bus is regarded as an invalid display.\nThe invalid bus appears to be related to the DisplayPort multistream facility.  You can ignore the invalid entry.", 
            "title": "The same DisplayPort connected monitor appears twice in the output of ddcutil detect."
        }, 
        {
            "location": "/faq/#the-detect-command-reports-different-edids-depending-on-how-the-monitor-is-connected-to-the-video-card", 
            "text": "Strange as it may seem at first, a monitor can have more than one EDID.\nThe EDID for a VGA connection will have a different video input definition (byte x14) than that for a  digital connection.\nThe VGA version of the EDID will have timing information.", 
            "title": "The detect command reports different EDIDs depending on how the monitor is connected to the video card."
        }, 
        {
            "location": "/faq/#the-detect-command-reports-that-i2c-bus-address-x30-edid-block-number-is-inactive", 
            "text": "EDID version 1.4 allows for addtional 128 byte EDID blocks.  I2C bus address x30 specifies \nwhich block to read.  These blocks generally contain extended timing information. ddcutil  is interested only in the contents of the first EDID block.\nThe check of bus address x30 is purely informational.", 
            "title": "The detect command reports that I2C bus address x30 (EDID block number) is inactive."
        }, 
        {
            "location": "/faq/#configure-complains-that-a-required-package-does-not-exist-but-it-is-installed-on-my-system", 
            "text": "When building  ddcutil , error messages from pkg-config (which is called by configure) can be misleading.\nIf configure complains that a package is not found but it seems to be installed, it's likely that what's \nmissing is the associated development package (with a suffix like \"-dev\").", 
            "title": "configure complains that a required package does not exist, but it is installed on my system."
        }, 
        {
            "location": "/tech_support/", 
            "text": "Technical Support\n\n\nPlease direct technical support questions, bug reports, and feature requests to the \nIssues Tracker\n on Github.    Use of this forum allows everyone to benefit from individual questions and ideas.\n\n\nWhen posting questions regarding \nddcutil\n configuration, please execute the following command, capture its output in a file, and submit the output as an attachement.\n\n\n$ ddcutil interrogate\n\n\n\n\nNote: \ninterrogate\n is a convenience command  that wraps \ndetect --verbose\n, \nenvironment --verbose\n, and (for each detected monitor) \nprobe\n.\nThere is no need to submit output of the individual commands if \ninterrogate\n is executed.\n\n\nBecause monitors that use USB for MCCS communication are rare, the extensive USB diagnostics are separated out into\na separate command, which is not packaged by \ninterrogate\n.\n\n\n$ ddcutil usbenvironment --verbose", 
            "title": "Technical Support"
        }, 
        {
            "location": "/tech_support/#technical-support", 
            "text": "Please direct technical support questions, bug reports, and feature requests to the  Issues Tracker  on Github.    Use of this forum allows everyone to benefit from individual questions and ideas.  When posting questions regarding  ddcutil  configuration, please execute the following command, capture its output in a file, and submit the output as an attachement.  $ ddcutil interrogate  Note:  interrogate  is a convenience command  that wraps  detect --verbose ,  environment --verbose , and (for each detected monitor)  probe .\nThere is no need to submit output of the individual commands if  interrogate  is executed.  Because monitors that use USB for MCCS communication are rare, the extensive USB diagnostics are separated out into\na separate command, which is not packaged by  interrogate .  $ ddcutil usbenvironment --verbose", 
            "title": "Technical Support"
        }, 
        {
            "location": "/feedback/", 
            "text": "Feedback Needed\n\n\nBy its nature, \nddcutil\n is very sensitive to the system environment.  It is not possible to exhaustively test all possibilities. \n\n\n\n\nThe build environment can vary. \n\n\nI2C implementation can vary with card, monitor, and driver.  \n\n\nMonitors vary in their MCCS interpretation.  \n\n\nI2C is an inherently unreliable protocol, requiring retry management.  \n\n\n\n\nI would appreciate hearing about any issues building and installing \nddcutil\n.\nIn particular: \n\n\n\n\nWhat changes were required to build and install \nddcutil\n?\n\n\nDoes it work with given card, driver, and monitor?  I'm not particularly \n  concerned with older monitors whose MCCS version is unspecified (i.e. is \n  less than 2.0).  On the other hand, I'm very interested in how ddcutil\n  handles monitors implementing MCCS V3.0, as the V3.0 specific code has not \n  been tested. In particular, does ddcutil properly read Table type features? \n\n\n\n\nddcutil\n can build for many hardware platforms, e.g. MIPS, that have not been tested.\nI'd appreciate hearing from any who have attempted to use \nddcutil\n on platforms beyond x86 and ARM. \n\n\nCommand \nddcutil interrogate\n collects maximal information about the \ninstallation environment, video card and driver, and monitor capabilities.\nI'd appreciate it if you could redirect its output to a file and \nsend the file\n\nto me. This will help diagnose problems and identify features that should be \nimplemented.  It also helps to document the variability in MCCS implementation across monitors.", 
            "title": "Feedback"
        }, 
        {
            "location": "/feedback/#feedback-needed", 
            "text": "By its nature,  ddcutil  is very sensitive to the system environment.  It is not possible to exhaustively test all possibilities.    The build environment can vary.   I2C implementation can vary with card, monitor, and driver.    Monitors vary in their MCCS interpretation.    I2C is an inherently unreliable protocol, requiring retry management.     I would appreciate hearing about any issues building and installing  ddcutil .\nIn particular:    What changes were required to build and install  ddcutil ?  Does it work with given card, driver, and monitor?  I'm not particularly \n  concerned with older monitors whose MCCS version is unspecified (i.e. is \n  less than 2.0).  On the other hand, I'm very interested in how ddcutil\n  handles monitors implementing MCCS V3.0, as the V3.0 specific code has not \n  been tested. In particular, does ddcutil properly read Table type features?    ddcutil  can build for many hardware platforms, e.g. MIPS, that have not been tested.\nI'd appreciate hearing from any who have attempted to use  ddcutil  on platforms beyond x86 and ARM.   Command  ddcutil interrogate  collects maximal information about the \ninstallation environment, video card and driver, and monitor capabilities.\nI'd appreciate it if you could redirect its output to a file and  send the file \nto me. This will help diagnose problems and identify features that should be \nimplemented.  It also helps to document the variability in MCCS implementation across monitors.", 
            "title": "Feedback Needed"
        }, 
        {
            "location": "/releases/", 
            "text": "Releases\n\n\nTarballs\n\n\nThese tarballs were created by command \nmake dist\n. \n\n\n\n\nddcutil-0.7.0.tar.gz\n\n\nddcutil-0.7.1.tar.gz\n\n\nddcutil-0.7.2.tar.gz\n\n\nddcutil-0.7.3.tar.gz\n\n\nddcutil-0.7.4.tar.gz\n\n\nddcutil-0.8.0.tar.gz\n\n\nddcutil-0.8.1.tar.gz\n\n\nddcutil-0.8.2.tar.gz\n\n\nddcutil-0.8.3.tar.gz\n\n\nddcutil-0.8.4.tar.gz\n\n\nddcutil-0.8.5.tar.gz\n\n\nddcutil-0.8.6.tar.gz\n\n\nddcutil-0.9.0.tar.gz", 
            "title": "Releases"
        }, 
        {
            "location": "/releases/#releases", 
            "text": "", 
            "title": "Releases"
        }, 
        {
            "location": "/releases/#tarballs", 
            "text": "These tarballs were created by command  make dist .    ddcutil-0.7.0.tar.gz  ddcutil-0.7.1.tar.gz  ddcutil-0.7.2.tar.gz  ddcutil-0.7.3.tar.gz  ddcutil-0.7.4.tar.gz  ddcutil-0.8.0.tar.gz  ddcutil-0.8.1.tar.gz  ddcutil-0.8.2.tar.gz  ddcutil-0.8.3.tar.gz  ddcutil-0.8.4.tar.gz  ddcutil-0.8.5.tar.gz  ddcutil-0.8.6.tar.gz  ddcutil-0.9.0.tar.gz", 
            "title": "Tarballs"
        }, 
        {
            "location": "/release_notes/", 
            "text": "Release Notes\n\n\n0.9.0\n\n\n13 May 2018\n\n\nSignificant Command Line Changes\n\n\nTwo enhancements will be of interest to general users: \n\n\n\n\nThe \nsetvcp\n command now allows new values for Continuous type features to be specified as relative values,\ne.g. the following commands increase or decrease the value of the brightness feature by 5. \n\n\n\n\n$ ddcutil setvcp 10 + 5\n$ ddcutil setvcp 10 - 5\n\n\n\n\nNote that parsing requires that \"+\" and \"-\" be surrounded by spaces.\n\n\n\n\n\n\nOption \n--no-table\n is now the default.\n\n\n\n\n\n\nTable type features are by default not included in most feature groups specified on \ngetvcp\n, e.g. \ngetvcp known\n.\n\nFeatures of type Table are rare.  The DDC/CI spec does not provide a clean way for \ngetvcp\n to determine that a table \nfeature does not exist.  As a result, \ngetvcp\n typically has to exceed its retry count before giving up.\n(Exclusion of table features does not occur if a feature is explicitly specified by its hex code, \nor for feature groups \nTABLE\n or \nLUT\n.)\n\nThe \n--no-table\n (formerly \n--notable\n) and \n-show-table\n options explicitly control this behavior.\n\n\n\n\n\n\nNote that \n--no-table\n does not apply for subsets TABLE or LUT.   \n\n\nFor subsets SCAN and MANUFACTURER,  the effect of \n--show-table\n/\n--no-table\n on \nmanufacturer-specific feature codes (xe0..xff) is more complicated. \nddcutil\n \nhas no information about the feature characteristics of manufacturer-specific codes.  Normally, it attempts only a non-table read.\n\nHowever, if both \n--verbose\n and \n--show-table\n are in effect, then a table read is attempted as well as a non-table read. \n\n\nReporting Unsupported Features\n\n\nThe interpretation of \n--show-unsupported\n has been tweaked.  This option applies to command \ngetvcp\n.  (The \nprobe\n\ncommand always reports unsupported features.) \n Command \ngetvcp\n reports unsupported features if any of the following hold:\n\n- A specific feature was specified by its code, as opposed to a feature set.\n\n- Verbose output is in effect\n\n- Option \n--show-unsupported\n was specified.\n\n\nOption \n--show-unsupported\n is no longer automatically set for feature set \nALL\n, which is now simply a synonym for \nKNOWN\n.\n\n\nOptions \n--rw\n, \n--ro\n, \n--wo\n\n\nOptions \n--rw\n and \n--ro\n apply to both the \ngetvcp\n and \nvcpinfo\n commands.  Option \n--wo\n applies only to \nvcpinfo\n. \n\n\nIf specified, features shown are restricted to those that are read-write, read-only, or write-only. \n\n\nFor example: \n\n\n$ ddcutil getvcp all --ro\n\n\n\n\nOption \n--mccs\n\n\nFilters the information returned by \nvcpinfo\n to that for the specified MCCS version.  For example, \n\n\n$ ddcutil vcpinfo --mccs 2.1\n\n\n\n\n\n\nFeature selection for \nddcutil vcpinfo table\n is not properly version sensitive.\n\n  -- take version from monitor selection if specified    (VERIFY)\n\n  -- option --mccs-version to force specific version\n\n\n\n\nFeature Set Identifiers\n\n\nAdditional feature sets have been defined for the \ngetvcp\n and \nvcpinfo\n commands.\nThey surface internal \nddcutil\n feature descriptions, and are intended to facilitate exploring the MCCS specification and its implementation on \nparticular monitors.  They will likely be of interest to only a few user.\n\n\n\n\n\n\n\n\nFeature Set\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSCONT\n\n\nSimple Continuous features\n\n\n\n\n\n\nCCONT\n\n\nComplex Continuous features\n\n\n\n\n\n\nCONT\n\n\nAll Continuous features\n\n\n\n\n\n\nSNC\n\n\nNC features having a defined set of features for byte SL\n\n\n\n\n\n\nCNC\n\n\nNC features using multiple bytes\n\n\n\n\n\n\nNC_WO\n\n\nNC features that are Write\n\n\n\n\n\n\nNC_CONT\n\n\nFeatures of type NC that reserve specified values as flags, alloting the remaining values to a continuous range\n\n\n\n\n\n\nNC\n\n\nAll Non-Continuous features\n\n\n\n\n\n\n\n\nMFG is now a valid synonym for feature set MANUFACTURER.\n\nFeature sets KNOWN and ALL are now synonyms.    \n\n\nMiscellaneous\n\n\n\n\nThe VCP file created by \ndumpvcp\n now includes a \nPRODUCT_CODE\n field including the manufacturer product code from the EDID.\nFor some manufacturers, the model name in the EDID does not in fact distinguish among models. Notably, Samsung commonly uses just \n\"Syncmaster\" for the model name.  Currently, \nloadvcp\n recognizes this field name but does not make use of the value.\n\n\n\n\nBuilding ddcutil\n\n\n\n\nEliminate compiler flag \n-Wpedantic\n in Makefiles.  This flag had been added to diagnose some obscure compiler warnings regarding \nsystem header files. It was flagging perfectly valid code as problematic, and caused build failures on Gentoo. \n\n\nCode changes to avoid \n-wformat-overflow\n, \n-wformat-truncation\n, and \n-wstringop-trunction\n warnings introduced with GCC 8, \ngenerally by making buffers larger.\n(All such warnings had flagged situations that never would result in buffer overflow.)\n\n\n\n\nAPI Changes\n\n\nThe C API has been extensively revised reflecting experience gained from work on a Qt C++ GUI interface.\nSee \nAPI Changes in Release 9.0\n for details.\n\n\nWork on Python API has been suspended.  Proof of concept implementations exist in the source tree for implementations using GObject API. \nSWIG, CFFI, and and Cython.  However, these are incomplete and not intended for public use.\n\n\n0.8.6\n\n\n20 January 2018\n\n\nThe externally visible changes in this release include minor enhancements and bug fixes.  There are also \nchanges in the C API.  Internally, there have been extensive changes in support of the C and (future) Python APIs.\n\n\nUser Interface Changes\n\n\nBecause of the design of the DDC/CI protocol, there is no certain way to distinguish a response indicating that \na feature of type Table (T) is unsupported from a DDC/CI protocol error.  As a result, \nddcutil getvcp\n performs the maximum \nnumber of retries on a Table type feature before giving up.  However, Table type features are rarely implemented.  The new \n--notable\n option allows Table type features to be ignored, speeding up execution of \ngetvcp\n commmands for multiple features.\n\n\n\n\nOption \n--notable\n applies if the argument to \ngetvcp\n is a feature set, e.g. \nCOLOR\n or \nKNOWN\n\ninstead of a single feature id.  In that case Table type features are ignored.\n\n\n\n\nC API changes\n\n\n\n\n\n\nReplace structs that use #iftests\n\n\nStructs \nDDCA_Single_Vcp_Value\n and \nDDCA_Non_Table_Value_Reponse\n used preprocessor #iftests for\nendian-ness to properly overlay the 2 byte continuous values (e.g. max value)\non a pairs of 1 byte NC values (e.g. ml, mh).  The use of #iftests proved incompatible with \nPython C function interface systems (e.g. Cython, CFFI).\n\n\n\n\n\n\nStruct \nDDCA_Single_Vcp_Value\n has been replaced by struct \nDDCA_Any_Vcp_Value\n. \n\n\n\n\nFunction \nddca_get_single_vcp_value()\n has been replaced by fuction \nddca_get_any_vcp_value()\n, \nwhich uses \nDDCA_Any_Vcp_Value\n.\n\n\nStruct \nDDCA_Non_Table_Value_Response\n has been replaced by struct \nDDCA_Non_Table_Value\n.\n\n\nFunction \nddca_get_non_table_value()\n now returns a \nDDCA_Non_Table_Value\n, not a \nDDCA_Non_Table_Value_Response\n. \n\n\n\n\nDDCA_Any_Vcp_Value\n and \nDDCA_Non_Table_Value\n do not define 2  byte current and max values for Continuous (C) \nfeatures.  The 2 byte current and max values must be calculated from the appropriate pairs of single byte values, e.g.\n\n\ncur_val = sh \n 8 | sl\n\n\n\n\n\n\n\n\nEliminate use of longjmp\n\n\nThe use of longjmp() to handle exceptional error condiitions (typically program logic errors) has been eliminated.\n\n\n\n\n\n\nAPI functions removed: \nddca_register_jmp_buf()\n, \nddca_get_global_failure_information()\n\n\n\n\nStructs removed:  \nDDCA_Global_Failure_Information\n\n\n\n\nMiscellaneous\n\n\n\n\nAdd trace class \nENV\n for tracing environment related functions\n\n\nInternally, many functions in key portions of the code base now return exception-like structs \n  instead of status codes.  Option \n--excp\n causes ddcutil to report these exception-like structs\n  when they are converted to status codes (and the internal detail is discarded).\n\n\n\n\nBug Fixes\n\n\n\n\nFix cause of a segfault in the \nenvironment\n command on Arch Linux due to the lack\n  of the \"arch\" command in that distribution.  Thank you Despruk.\n\n\nFix a segfault when probing DRM using the \nenvironment\n command on aarch64.\n\n\nFix a typo in the recommendations section at the end of the \nenvironment\n command. Thank you Mirek Svoboda\n\n\n\n\n0.8.5\n\n\n16 November 2017\n\n\nThis release contains a large number of minor enhancements and bug fixes.  Most significant\nare those related to alternative environments, such as Raspberry Pi systems.\n\n\nThose running \nddcutil\n on a 32 bit system, either i386 or Raspberry Pi, should\nupgrade to address a segfault in the \nenvironment\n command.\nOtherwise, there is no need to upgrade to this release unless you are experiencing problems. \n\n\nChanges to facilitate scripting\n\n\n\n\nDo not output a warning message regarding undetected VCP version if message level is \n--terse\n.\n\n\n\"Display not found\" message now directed to stderr instead of stdout.\n\n\n\n\nPackaging\n\n\n\n\nChanges to meet Debian distribution standards.  Clean up debian/rules and other files in the debian directory.\n\n\nAdd a changelog file, normally installed in file /usr/share/doc/ddcutil/Changelog.\n\n\nRename NEWS file to NEWS.md\n\n\nAdd \nconfigure\n option \n--enable-x11\n/\n--disable-x11\n.  The default is \n--enable-x11\n. \nIf \n--disable-x11\n is specified, \nddcutil\n is built without X11 related code, which is \nused only for diagnostics within the \nenvironment\n command.\n\n\nDirectory \npackage\n has been removed from the \nddcutil\n git tree and is no longer included\nin the tarball.  This more cleanly separates \"downstream\" from \"upstream\" activities.\nPackagers for Linux distributions should contact if this creates problems.\n\n\n\n\nCommand \nenvironment\n enhancements\n\n\nThe \nenvironment\n command is extensively revised.   The increasingly large collection of \ntests has been consolidated.  In particular:\n\n\n\n\nTests are now sensitive to machine architecture.  Performs alternative tests on arm systems,\ninlcuding the Raspberry Pi. \n\n\nAdded a consolidated collection of suggestions at the end that suggest ways for the \nuser to address configuration issues.\n\n\nFixed a bug that caused a segfault in 32 bit versions of \nddcutil\n. \n\n\nUse of shell commands has largely been replaced with API calls, addressing some obscure \nshell errors.\n\n\n\n\nglib-2.0\n\n\nThe required glib-2.0 version has been increased from 2.16 to 2.32 reflecting the use of glib \nthread functions.  Consequently, \nddcutil\n no longer builds on some older Linux distributions.\n\n\nBug fixes\n\n\n\n\nFix a logic error in the VCP version comparison function vcp_version_le().  This bug affected only audio \nrelated VCP feature codes x8f, x91, and x93.  It also affected experimental command \nwatch\n which listens for monitor\nchanges not made by \nddcutil\n, i.e. by pressing buttons on the monitor.\n\n\nProperly handle the failure case where a display is detected on an I2C bus (EDID is read) but DDC communication fails, \nand the user specifies the display on the command line using the I2C bus number (option \n--bus\n).\n\n\nFix the cause of a segfault when the \nloadvcp\n command reads a user modified VCP file.  The \ncommand now fails gracefully if none of MFG_ID, MODEL, and SN are present.\n\n\nFix the cause of a segfault when displaying I2C functionality flags in the --environment command.  This segfault\nwas seen only in 32 bit versions of \nddcutil\n.\n\n\nThe --stats option showed incorrect time statistics on 32 bit versions of \nddcutil\n.\n\n\nAdd \"-lddcutil\" to output of \"pkgconfig ddcutil --libs\".  Thank you Federico.\n\n\n\n\nMiscellaneous\n\n\n\n\nImprove reporting of the individual errors that result in command failure due to maximum I2C retries exceeded.\n\n\ninterrogate\n, \nenvironment\n and \nusbenvironment\n now redirect all stderr output to stdout for easier capture\n\n\nAdded command line options \n-trcfile\n and \n-trcfunc\n to enable tracing by file name and function name.\n\n\nAdded configuration option \n--enable-x11\n controlling whether X11 related diagnostics are included in the \nenvironment\n\nand \ninterrogate\n commands, allowing \nddcutil\n to build in embedded environments that lack X11.  The default is \nyes\n.\n\n\nVerbose EDID decription, e.g. on command \ndetect --verbose\n, now reports EDID byte 24 (x14), the supported features bitmap.\nThis is purely informational.\n\n\nOngoing work to make functions thread safe. \n\n\nCode cleanup.\n\n\n\n\n0.8.4\n\n\n22 July 2017\n\n\nThis release primarily contains packaging changes to meet Fedora distribution standards.\nIt also includes minor improvements and bug fixes. \nThere is no need to install it unless you are experiencing problems.\n\n\nCommand \nddcutil interrogate\n\n\n\n\nDo not include \nusbenvironment\n diagnostics as part of the \ninterrogate\n command. USB connected monitors \n  are rare and USB related diagnostics clutter the report.\n\n\n\n\nlibddcutil-devel\n\n\n\n\nDo not package static libraries (.a and .la files) in libddcutil-devel. \n\n\n\n\nBug fixes\n\n\n\n\n\n\nPrevent a segfault in monitor detection that occurrs when slave address x50 is detected on an I2C bus, but reading the EDID at that address fails.\n\n\n\n\n\n\nAddress an assert failure in the \nddcutil usbenvironment\n command due to an unexpected library return code.\n\n\n\n\n\n\nIn the device identification cross reference report of \nddcutil environment\n, properly handle I2C bus number -1, used internally to \n  indicate unknown.\n\n\n\n\n\n\n0.8.2\n\n\n17 May 2017\n\n\nThis release introduces minor improvements to the diagnostic output of the \nenvironment\n, \n\ndetect\n, and \ninterrogate\n commands.  There is no need to install it unless you are \nexperiencing problems.\n\n\nCommand \nddcutil detect\n\n\n\n\nIf a display appears to support DDC (I2C slave address x37 is active) but communication fails, \n  perform a heuristic test as to whether it is a laptop display, issue message appropriately.\n\n\nChanges to reduce the number of feature reads performed when detecting monitors, slightly \n  improving performance.\n\n\n\n\nOption \n--stats errors\n\n\n\n\nMaintain and report a secondary count of the individual errors that are rolled up into \"retry count exceeded\" errors.\n\n\n\n\nddcutil environment --verbose\n changes\n\n\n\n\nEliminate checks for package \ni2c-tools\n\n\nReport additional information about system hardware\n\n\nAdd a cross reference report for the multiple ways that different subsystems identify \n    a monitor and its I2C bus\n\n\nConsolidate some tests to reduce redundancy\n\n\nCheck for DisplayPort Multi-Stream Technology (DPMST) devices\n\n\nEliminate the cause of a bogus error message when scanning devices\n\n\n\n\nPackaging\n\n\n\n\nChanges to the requirements of package \ni2c-tools\n.  Generally speaking, it is no longer needed for \n  building \nddcutil\n, and is optionally used as part of the diagnostic output of the \nenvironment\n command.\n\n\nChanged from \nRequires:\n to \nSuggests:\n for dpkg\n\n\nRequires:\n and \nBuildRequires:\n eliminated for rpm packaging in general\n\n\nBuildRequires:\n kept for SuSE rpm packaging.  \nddcutil\n needs file linux/i2c-dev.h, which is \n  contained in package \ni2c-tools\n in SuSE releases through 13.2\n\n\n\n\n\n\nChanges to packaging to conform to Debian standards\n\n\nChanges to packaging to conform to Fedora standards\n\n\n\n\n0.8.1\n\n\n06 May 2017\n\n\nThis is a bugfix release.  There is no need to install it unless you are experiencing the \nsegfault described below.\n\n\n\n\nFixes a segfault that can occur after open() fails for a /dev/usb/hiddev device.  \n\n\n\n\n0.8.0\n\n\n01 May 2017\n\n\nRelease 0.8.0 contains new features intended to address issues with particular monitors and user environments,\nto changes to improve performance, and code restructuring for future enhancements\n\n\nGeneral Changes\n\n\n\n\n\n\nMonitor detection and cataloging has been extensively reworked. \nTo support the library version of \nddcutil\n used by the C (and future Python)\nAPIs, the list of displays is determined at program/library initialization and \nsaved.  \n\n\n\n\n\n\nThe processing of the DDC Null Response has changed.  Normally a Null Response\nindicates a processing error in the monitor.  Some monitors also use the Null Response\nto indicate that a VCP feature is unsupported.  \nddcutil\n now performs an \nextended sleep when receiving a Null Message response to allow the monitor \nto recover.  It also performs an initial check of whether a monitor uses DDC Null Response to \nindicate unsupported features. See \nDDC Null Response\n.\n\n\n\n\n\n\nLinux error numbers no longer appear \"modulated\" in messages.  That is, an EACCES\nerror is reported as -13, not -1013.  Note that the C API has always returned \nLinux error numbers in unmodulated form.\n\n\n\n\n\n\nGeneral Options\n\n\nOption \n--async\n parallelizes the monitor checks executed during display detection. \nIf there are multiple monitors, initial monitor checks are performed\nin multiple threads, improving performance.  This may become the default in future releases.\n\n\nOption \n--nodetect\n is valid if the display is specified by its I2C bus number, using option \n--bus\n.\nIn that case the initial detection of all displays is skipped, improving performance.\nThis may become the default in future releases.\n\n\nOption \n--hiddev \n specifies a USB monitor connection by its hiddev device number.  For example:\n\n\n--hiddev 3\n\n\n\n\nrefers to device /dev/usb/hiddev3.  There is no single letter \nspecifier for this option.\n\n\nOption \n--brief\n is now a synonym for \n--terse\n\n\nAdded \n--stats\n class \nelapsed\n.  \n--stats time\n is a synonum for \n--stats elapsed\n.  Shows program \nelapsed time.  \n\n\nChanges to Specific Commands:\n\n\nenvironment\n and \ninterrogate\n commands:\n\n\n\n\nReport ddcutil version\n\n\n\n\nprobe\n, \ninterrogate\n, and \ngetvcp scan\n commands:\n\n\n\n\nDo not include table features unless output level is VERBOSE. \nThis speeds up execution as table reads for unsupported features \nexecute the maximum number of retries.  It also clarifies performance statistics.\nNo monitors implementing table type features have yet been observed.\n\n\n\n\ninterrogate\n command:  \n\n\n\n\nReport performance statistics for individual parts of \ninterrogate\n.\n\n\n\n\ngetvcp\n command:  \n\n\n\n\nIf \n--terse\n output is specified, then the VCP data is output in a form that\nis easily machine readable.  See \nCommand Specific Options\n\n\n\n\nsetvcp\n and \nloadvcp\n commands:\n\n\nBy default, \nsetvcp\n and \nloadvcp\n verify that a value has been successfully\nset by reading the value from the monitor after writing it.  Option \n--noverify\n \ndisables this check.\n\n\nBug Fixes\n\n\n\n\nFixed a segfault that occurred when a monitor returned a 0 length capabilities string.\n\n\nVariables holding nanoseconds have been changed from type \nlong\n to \nuint64_t\n\nto address overflow problems on 32 bit systems such as Raspberry Pi.\n\n\n\n\nC API\n\n\nThe C API has undergone extensive changes.\n\n\nName Changes\n\n\nNames have been changed for consistency and clarity.\nNames of certain functions used in message generation have been shortened \nto simplify printf() type functions. \n\n\n\n\n\n\n\n\nOld typedef name\n\n\nNew typedef name\n\n\n\n\n\n\n\n\n\n\nVCP_Feature_Code\n\n\nDDCA_Vcp_Feature_Code\n\n\n\n\n\n\nVersion_Feature_Info\n\n\nDDCA_Version_Feature_Info\n\n\n\n\n\n\nVcp_Value_Type\n\n\nDDCA_Vcp_Value_Type\n\n\n\n\n\n\nSingle_Vcp_Value\n\n\nDDCA_Single_Vcp_Value\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOld function name\n\n\nNew function name\n\n\n\n\n\n\n\n\n\n\nddca_status_code_name()\n\n\nddca_rc_name()\n\n\n\n\n\n\nddca_status_code_desc()\n\n\nddca_rc_desc()\n\n\n\n\n\n\nddca_repr_display_identifier()\n\n\nddca_did_repr()\n\n\n\n\n\n\nddca_create_display_ref()\n\n\nddca_get_display_ref()\n\n\n\n\n\n\nddca_repr_display_ref()\n\n\nddca_dref_repr()\n\n\n\n\n\n\nddca_repr_display_handle()\n\n\nddca_dh_repr()\n\n\n\n\n\n\nddca_get_displays()\n\n\nddca_get_display_info_list()\n\n\n\n\n\n\nddca_repr_mccs_version()\n\n\nddca_mccs_version_id_name()\n\n\n\n\n\n\nddca_mccs_version_id_string()\n\n\nddca_mccs_version_id_desc()\n\n\n\n\n\n\n\n\nComments:\n\n- Function \nddca_create_display_ref()\n was renamed to \nddca_get_display_ref()\n to reflect \nthe fact that it returns a \nDDCA_Display_Reference\n from the internal data structures \nrepresenting detected displays.\n\n\n\n\n\n\n\n\nStruct\n\n\nOld field name\n\n\nNew field name\n\n\n\n\n\n\n\n\n\n\nDDCA_Ddcutil_Version_Spec\n\n\nbuild\n\n\nmicro\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnum\n\n\nOld value name\n\n\nNew value name\n\n\n\n\n\n\n\n\n\n\nDDCA_Output_Level\n\n\nOL_TERSE\n\n\nDDCA_OL_TERSE\n\n\n\n\n\n\nDDCA_Output_Level\n\n\nOL_NORMAL\n\n\nDDCA_OL_NORMAL\n\n\n\n\n\n\nDDCA_Output_Level\n\n\nOL_VERBOSE\n\n\nDDCA_OL_VERBOSE\n\n\n\n\n\n\nDDCA_IO_Mode\n\n\nDDC_IO_DEVI2C\n\n\nDDCA_IO_DEVI2C\n\n\n\n\n\n\nDDCA_IO_Mode\n\n\nDDC_IO_ADL\n\n\nDDCA_IO_ADL\n\n\n\n\n\n\nDDCA_IO_Mode\n\n\nUSB_IO\n\n\nDDCA_IO_USB\n\n\n\n\n\n\nDDCA_Vcp_Value_Type\n\n\nNON_TABLE_VCP_VALUE\n\n\nDDCA_NON_TABLE_VCP_VALUE\n\n\n\n\n\n\nDDCA_Vcp_Value_Type\n\n\nTABLE_VCP_VALUE\n\n\nDDCA_TABLE_VCP_VALUE\n\n\n\n\n\n\n\n\nStructs and Functions Removed\n\n\n\n\n\n\n\n\nStructs removed\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nDDCA_IO_Location\n\n\nUse DCCA_IO_Path\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions removed\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nddca_built_with_adl()\n\n\nUse ddca_get_build_options()\n\n\n\n\n\n\nddca_built_with_usb()\n\n\nUse ddca_get_built_options()\n\n\n\n\n\n\n\n\nEnums, Structs, and Functions Added or Changed\n\n\n\n\n\n\n\n\nNew enum\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nDDCA_Stats_Type\n\n\nUsed as both values and bitflags for statistics types\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew Structs\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nDDCA_Adlno\n\n\nRepresents a ADL adapter number/display number pair\n\n\n\n\n\n\nDDCA_IO_PATH\n\n\nPhysical path for MCCS communication\n\n\n\n\n\n\n\n\nComments:  \n\n\n\n\nStruct \nDDCA_Display_Location\n is replaced by \nDDCA_IO_Path\n, \nwhich contains only the io mode and device identifiers \nfor that mode.  USB bus and device numbers were removed\nbecause they are attributes by which the physical path \n(hiddev device) can be found, not the path itself.\n\n\nStruct \nDDCA_Display_Info\n has been adjusted to use \nDDCA_IO_Path\n.\n\n\n\n\n\n\n\n\n\n\nFunction added\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nddca_ddcutil_version()\n\n\ngets version as a struct of numbers\n\n\n\n\n\n\nddca_reset_stats()\n\n\nreset performance statistics\n\n\n\n\n\n\nddca_show_stats()\n\n\nreport performance statistics\n\n\n\n\n\n\nddca_enable_verify()\n\n\ncontrols whether VCP values are read after being set\n\n\n\n\n\n\nddca_is_verify_enabled()\n\n\nqueries whether VCP values are verified\n\n\n\n\n\n\nddca_free_display_info_list()\n\n\nfree function for struct\n\n\n\n\n\n\nddca_create_usb_hiddev_display_identifier()\n\n\ncreate identifier for hiddev number\n\n\n\n\n\n\nddca_get_simple_nc_feature_value_name()\n\n\nlookup name of simple NC feature value\n\n\n\n\n\n\n\n\nOther Changes\n\n\nFunctions now return Linux error number -EINVAL rather than DDC specific \nerror number DDCL_ARG in case of invalid argument \n\n\nThe display selection lifecycle has been changed.  The \nDDCA_Display_Identifier\n is not \nthe only way to obtain a \nDDCA_Display_Reference\n. \nIt can be found in one of 2 ways:  \n\n\n\n\nFunction \nddca_get_display_info_list()\n returns  a collection \nDDCA_Display_Info\n, containing \ndisplay identification information (e.g. ddcutil assigned display number, I2c Bus number, manufacturer id, etc.) and a display reference.\nThe client program can search through the returned collection to find the\ndesired monitor.  \n\n\nA \nDDCA_Display_Identifier\n can be created and passed to ddca_get_display_ref(), which returns \na \nDDCA_Display_Reference\n.\n\n\n\n\nSee sample program \ndemo_display_selection.c\n for examples. \n\n\nSample code files:\n\n\nThe following example files for using the C API have been added:\n\n\n\n\n\n\n\n\nFile name\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\ndemo_global_settings.c\n\n\nReport and modify global settings\n\n\n\n\n\n\ndemo_display_selection.c\n\n\nDisplay selection\n\n\n\n\n\n\ndemo_vcpinfo.c\n\n\nQuery VCP feature code descriptons\n\n\n\n\n\n\ndemo_get_set_vcp.c\n\n\nGet and set VCP values\n\n\n\n\n\n\n\n\nFile \nclmain.c\n is now a miscellaneous catchall, mainly for testing.\n\n\nBuild system changes\n\n\n\n\nsrc/Makefile.am: change dist-hook to use -prune option per Knut Omang; \navoids eror in case there is nothing to erase (i.e. build hasn't happened)\n\n\nAdded cmake file FindDDCUtil.cmake from Dorian Vogel\n\n\n\n\n0.7.3\n\n\n05 March 2017\n\n\nMaintenance release.\n\n\n\n\nAdd additional diagnostic tests to command \nddcutil environment --verbose\n*. \n\n\nNew configure option \n--enable-drm\n.   \n\n\nIf enabled (the default), command \nddcutil environment --verbose\n includes additional tests that use\nDRM services to better analyze disrepancies observed in the field between the EDID read directly from the monitor and that reported by X11.\n\n\nOption \n--enable-drm\n requires that a recent version (\n= 2.4.67) of the development package for libdrm2 (libdrm-dev or libdrm-devel depending on Linux distribution) be\ninstalled when building \nddcutil\n.  If a sufficently recent version is not detected, \nconfigure\n issues a warning and reverts to \n--disable-drm\n.\n\n\nIf minimizing executable size is important, set \n--disable-drm\n, as DRM services are used only for diagnostics.\n\n\n\n\n\n\nAdditional information on \nddcutil detect --verbose\n.\n\n\nReport and interpret USB vendor id/product id when \ndetect\n cannot open a hiddev device.  This is usually benign, and identifying the device should make this evident.\n\n\nSuggest that the user check that DDC/CI is enabled in the monitor's on screen display if I2C bus x37 (DDC) is responsive, but DDC communication fails.\n\n\n\n\n\n\n\n\n0.7.2\n\n\n01 February 2017\n\n\nMaintenance release.\n\n\n\n\nFixes a critical bug in release 0.7.1 where insufficient privileges on a /dev/i2c-n device causes program termination.\n\n\nddcutil interrogate\n always executes with \n--set-slave-address\n in effect\n\n\nMinor improvements to \nddcutil environment\n and \nddcutil interrogate\n output\n\n\nMinor improvements to \nddcutil detect --verbose\n\n\nAdd explanations for additional \nerrno\n values\n\n\n\n\n0.7.1\n\n\n27 January 2017\n\n\nMantenance release.\n\n\n\n\nAdd option \n--force-slave-address\n which causes ddcutil to take control of slave addresses on the \nI2C bus even if they are in use.  Internally, \nioctl(I2C_FORCE_SLAVE)\n is called instead of \nioctl(I2C_SLAVE)\n.\nThis is intended as a possible workaround for situations where monitors on an I2C bus are not detected. See \nOption --force-slave-address\n\n\nOption \n--force\n disables various checking.  It's use is likely to result in command failure, but may \nprovide useful information as to the source of problems.  See \nOption --force\n\n\nFix the cause of a segfault when displaying  statistics for option \n--stats errors\n or simply \n--stats\n, or on \nthe \ninterrogate\n command.\n\n\nmake install\n will not install C header files unless configuration option \n--enable-lib\n is set.\n\n\nFix the cause of a Makefile error when trying to strip dependency information from \nlibddctuil.la\n during \nmake install\n.\n\n\nExtensive rework of Autotools files for future support of Python 3 as well as Python 2.  This work is incomplete.\n\n\nEmit diagnostic messages to aid in debugging certain situations seen only in the field.\n\n\n\n\n0.7.0\n\n\n03 January 2017\n\n\n\n\nC API\n\n\nShould be fairly stable, though not all features of \nddcutil\n are exposed.\n\n\nReflecting the presence of APIs, the default for the \n--enable-lib\n configuration option is now \"yes\".\n  The following shared object library is created: libddcutil.so\n\n\nAdditional prebuilt packages: libddcutil0, libddcutil-dev (Debian, Ubuntu) or ddcutil-devel (Fedora, SUSE)\n\n\n\n\n\n\nPython API\n\n\nThe Python API, implemented using SWIG, is a rough proof of concept and subject to major change.\n\n\nSWIG support is only available by building from source, not from pre-built packages.  Requires \n--enable-swig\n configuration option.  \n\n\n\n\n\n\nA new command line option \n--mfg\n, which allows for monitor selection using the 3 character manufacturer id \n  found in the EDID.  \n--model\n and \n-sn\n no longer need to specified together.  If any of \n--mfg\n, \n-model\n, and \n-sn\n\n  are specified, the first monitor to match all of the manufacturer/model/serial-numbers that are specified is chosen.\n\n\nThe monitor feature and capabilities portion of \ninterrogate\n has been enhanced.  This functionality is also exposed using the \n  new \nprobe\n command which operates on a single monitor.\n\n\nParsing of the capabilities string is enhanced to accomodate monitors that do not separate feature codes by blanks.\n\n\n\n\n0.6.1\n\n\n21 November 2016\n\n\nMaintenance release.  \n\n\n\n\nImprove recovery and diagnotistic messages for certain exceptional conditions. \n\n\nCommand \nddcutil interrogate\n now reports the differences between VCP codes \ndeclared in the capabilities string and those observed by scanning. \n\n\nExtensive internal changes in preparation for future C and Python APIs.\n\n\n\n\n0.6.0\n\n\n01 October 2016\n\n\nRename project from ddctool to ddcutil.  \n\n\n\n\nPrimary executable is now named ddcutil  \n\n\nShared library is now named libddcutil.so\n\n\nTarball is now named ddcutil.n.n.n.tar.gz\n\n\n\n\n0.5.3\n\n\n24 September 2016\n\n\nFix overzealous code cleanup in release 0.5.1.  \n\n\n\n\nUndefined reference to function is_module_loaded_using_sysfs() when building without ADL support.  \n\n\nError in command parsing. Command arguments were ignored.\n\n\n\n\n0.5.1\n\n\n23 September 2016\n\n\nMinor improvements to diagnostics of the \nenvironment\n and \ninterrogate\n commands:\n\n\n\n\nCheck if i2c_dev is built into the kernel as an alternative to it being a loadable kernel module  \n\n\nRecognize amdgpu video driver\n\n\n\n\n0.5\n\n\n09 September 2016\n\n\nThis is the first formal release of \nddcutil\n\n\n\n\nRework USB monitor support based on testing with Eizo Coloredge and NEC PA series\n\n-- Probing of USB connected monitors is greatly extended and refactored from \nddcutil environment\n into a separate command \nddcutil usbenv\n.\nLibraries hidraw and libusb are used as well as hiddev.  HID Report Descriptors are parsed.  This probing is included in \nddcutil interrogate\n. \n\n  -- \nconfigure\n option \n--enable-usb/--disable-usb\n controls whether ddcutil is built\n  with USB monitor support.  The default is \n--enable-usb\n.  When building with USB support,\n  packages for udev, hidraw, hiddev, and libusb are required.\n\n\nSimplify README.md.  Refer to www.ddcutil.com for most documentation  \n\n\nThe assumption that I2C buses are numbered consecutively is removed.  Required for Raspberry Pi. \n\n\nAllow a display to be specified on the command \nddcutil loadvcp\n.\n This addresses the situation where a monitor presents both an I2C and a USB interface.\n Normally, the display is determined using the data stored in the VCP file, and the I2C display interface is\n chosen over the USB interface.\n If a display is specified, then the model and sn from its EDID must match\n those in the VCP data being loaded.  \n\n\nAdd \nddcutil\n command option \n--timestamp/--ts\n.  If specified, trace messages are prefaced with an elapsed timestamp.\n\n\nBecause of changing package requirements, \nddcutil\n no longer builds in the openSUSE Build Service (OBS) for older OS versions (openSUSE 13.1, Ubuntu 12.04, 14.04). \n\n\nddcutil\n currently does not build for any openSUSE version in the openSUSE Build Service due to violation of policy guidelines.  This problem will\nbe addressed in a subsequent release. openSUSE users can build ddcutil from its tarball.", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release_notes/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release_notes/#090", 
            "text": "13 May 2018", 
            "title": "0.9.0"
        }, 
        {
            "location": "/release_notes/#significant-command-line-changes", 
            "text": "Two enhancements will be of interest to general users:    The  setvcp  command now allows new values for Continuous type features to be specified as relative values,\ne.g. the following commands increase or decrease the value of the brightness feature by 5.    $ ddcutil setvcp 10 + 5\n$ ddcutil setvcp 10 - 5  Note that parsing requires that \"+\" and \"-\" be surrounded by spaces.    Option  --no-table  is now the default.    Table type features are by default not included in most feature groups specified on  getvcp , e.g.  getvcp known . \nFeatures of type Table are rare.  The DDC/CI spec does not provide a clean way for  getvcp  to determine that a table \nfeature does not exist.  As a result,  getvcp  typically has to exceed its retry count before giving up.\n(Exclusion of table features does not occur if a feature is explicitly specified by its hex code, \nor for feature groups  TABLE  or  LUT .) \nThe  --no-table  (formerly  --notable ) and  -show-table  options explicitly control this behavior.    Note that  --no-table  does not apply for subsets TABLE or LUT.     For subsets SCAN and MANUFACTURER,  the effect of  --show-table / --no-table  on \nmanufacturer-specific feature codes (xe0..xff) is more complicated.  ddcutil  \nhas no information about the feature characteristics of manufacturer-specific codes.  Normally, it attempts only a non-table read. \nHowever, if both  --verbose  and  --show-table  are in effect, then a table read is attempted as well as a non-table read.", 
            "title": "Significant Command Line Changes"
        }, 
        {
            "location": "/release_notes/#reporting-unsupported-features", 
            "text": "The interpretation of  --show-unsupported  has been tweaked.  This option applies to command  getvcp .  (The  probe \ncommand always reports unsupported features.) \n Command  getvcp  reports unsupported features if any of the following hold: \n- A specific feature was specified by its code, as opposed to a feature set. \n- Verbose output is in effect \n- Option  --show-unsupported  was specified.  Option  --show-unsupported  is no longer automatically set for feature set  ALL , which is now simply a synonym for  KNOWN .", 
            "title": "Reporting Unsupported Features"
        }, 
        {
            "location": "/release_notes/#options-rw-ro-wo", 
            "text": "Options  --rw  and  --ro  apply to both the  getvcp  and  vcpinfo  commands.  Option  --wo  applies only to  vcpinfo .   If specified, features shown are restricted to those that are read-write, read-only, or write-only.   For example:   $ ddcutil getvcp all --ro", 
            "title": "Options --rw, --ro, --wo"
        }, 
        {
            "location": "/release_notes/#option-mccs", 
            "text": "Filters the information returned by  vcpinfo  to that for the specified MCCS version.  For example,   $ ddcutil vcpinfo --mccs 2.1   Feature selection for  ddcutil vcpinfo table  is not properly version sensitive. \n  -- take version from monitor selection if specified    (VERIFY) \n  -- option --mccs-version to force specific version", 
            "title": "Option --mccs"
        }, 
        {
            "location": "/release_notes/#feature-set-identifiers", 
            "text": "Additional feature sets have been defined for the  getvcp  and  vcpinfo  commands.\nThey surface internal  ddcutil  feature descriptions, and are intended to facilitate exploring the MCCS specification and its implementation on \nparticular monitors.  They will likely be of interest to only a few user.     Feature Set  Description      SCONT  Simple Continuous features    CCONT  Complex Continuous features    CONT  All Continuous features    SNC  NC features having a defined set of features for byte SL    CNC  NC features using multiple bytes    NC_WO  NC features that are Write    NC_CONT  Features of type NC that reserve specified values as flags, alloting the remaining values to a continuous range    NC  All Non-Continuous features     MFG is now a valid synonym for feature set MANUFACTURER. \nFeature sets KNOWN and ALL are now synonyms.", 
            "title": "Feature Set Identifiers"
        }, 
        {
            "location": "/release_notes/#miscellaneous", 
            "text": "The VCP file created by  dumpvcp  now includes a  PRODUCT_CODE  field including the manufacturer product code from the EDID.\nFor some manufacturers, the model name in the EDID does not in fact distinguish among models. Notably, Samsung commonly uses just \n\"Syncmaster\" for the model name.  Currently,  loadvcp  recognizes this field name but does not make use of the value.", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/release_notes/#building-ddcutil", 
            "text": "Eliminate compiler flag  -Wpedantic  in Makefiles.  This flag had been added to diagnose some obscure compiler warnings regarding \nsystem header files. It was flagging perfectly valid code as problematic, and caused build failures on Gentoo.   Code changes to avoid  -wformat-overflow ,  -wformat-truncation , and  -wstringop-trunction  warnings introduced with GCC 8, \ngenerally by making buffers larger.\n(All such warnings had flagged situations that never would result in buffer overflow.)", 
            "title": "Building ddcutil"
        }, 
        {
            "location": "/release_notes/#api-changes", 
            "text": "The C API has been extensively revised reflecting experience gained from work on a Qt C++ GUI interface.\nSee  API Changes in Release 9.0  for details.  Work on Python API has been suspended.  Proof of concept implementations exist in the source tree for implementations using GObject API. \nSWIG, CFFI, and and Cython.  However, these are incomplete and not intended for public use.", 
            "title": "API Changes"
        }, 
        {
            "location": "/release_notes/#086", 
            "text": "20 January 2018  The externally visible changes in this release include minor enhancements and bug fixes.  There are also \nchanges in the C API.  Internally, there have been extensive changes in support of the C and (future) Python APIs.", 
            "title": "0.8.6"
        }, 
        {
            "location": "/release_notes/#user-interface-changes", 
            "text": "Because of the design of the DDC/CI protocol, there is no certain way to distinguish a response indicating that \na feature of type Table (T) is unsupported from a DDC/CI protocol error.  As a result,  ddcutil getvcp  performs the maximum \nnumber of retries on a Table type feature before giving up.  However, Table type features are rarely implemented.  The new  --notable  option allows Table type features to be ignored, speeding up execution of  getvcp  commmands for multiple features.   Option  --notable  applies if the argument to  getvcp  is a feature set, e.g.  COLOR  or  KNOWN \ninstead of a single feature id.  In that case Table type features are ignored.", 
            "title": "User Interface Changes"
        }, 
        {
            "location": "/release_notes/#c-api-changes", 
            "text": "", 
            "title": "C API changes"
        }, 
        {
            "location": "/release_notes/#replace-structs-that-use-iftests", 
            "text": "Structs  DDCA_Single_Vcp_Value  and  DDCA_Non_Table_Value_Reponse  used preprocessor #iftests for\nendian-ness to properly overlay the 2 byte continuous values (e.g. max value)\non a pairs of 1 byte NC values (e.g. ml, mh).  The use of #iftests proved incompatible with \nPython C function interface systems (e.g. Cython, CFFI).    Struct  DDCA_Single_Vcp_Value  has been replaced by struct  DDCA_Any_Vcp_Value .    Function  ddca_get_single_vcp_value()  has been replaced by fuction  ddca_get_any_vcp_value() , \nwhich uses  DDCA_Any_Vcp_Value .  Struct  DDCA_Non_Table_Value_Response  has been replaced by struct  DDCA_Non_Table_Value .  Function  ddca_get_non_table_value()  now returns a  DDCA_Non_Table_Value , not a  DDCA_Non_Table_Value_Response .    DDCA_Any_Vcp_Value  and  DDCA_Non_Table_Value  do not define 2  byte current and max values for Continuous (C) \nfeatures.  The 2 byte current and max values must be calculated from the appropriate pairs of single byte values, e.g.  cur_val = sh   8 | sl", 
            "title": "Replace structs that use #iftests"
        }, 
        {
            "location": "/release_notes/#eliminate-use-of-longjmp", 
            "text": "The use of longjmp() to handle exceptional error condiitions (typically program logic errors) has been eliminated.    API functions removed:  ddca_register_jmp_buf() ,  ddca_get_global_failure_information()   Structs removed:   DDCA_Global_Failure_Information", 
            "title": "Eliminate use of longjmp"
        }, 
        {
            "location": "/release_notes/#miscellaneous_1", 
            "text": "Add trace class  ENV  for tracing environment related functions  Internally, many functions in key portions of the code base now return exception-like structs \n  instead of status codes.  Option  --excp  causes ddcutil to report these exception-like structs\n  when they are converted to status codes (and the internal detail is discarded).", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/release_notes/#bug-fixes", 
            "text": "Fix cause of a segfault in the  environment  command on Arch Linux due to the lack\n  of the \"arch\" command in that distribution.  Thank you Despruk.  Fix a segfault when probing DRM using the  environment  command on aarch64.  Fix a typo in the recommendations section at the end of the  environment  command. Thank you Mirek Svoboda", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release_notes/#085", 
            "text": "16 November 2017  This release contains a large number of minor enhancements and bug fixes.  Most significant\nare those related to alternative environments, such as Raspberry Pi systems.  Those running  ddcutil  on a 32 bit system, either i386 or Raspberry Pi, should\nupgrade to address a segfault in the  environment  command.\nOtherwise, there is no need to upgrade to this release unless you are experiencing problems.", 
            "title": "0.8.5"
        }, 
        {
            "location": "/release_notes/#changes-to-facilitate-scripting", 
            "text": "Do not output a warning message regarding undetected VCP version if message level is  --terse .  \"Display not found\" message now directed to stderr instead of stdout.", 
            "title": "Changes to facilitate scripting"
        }, 
        {
            "location": "/release_notes/#packaging", 
            "text": "Changes to meet Debian distribution standards.  Clean up debian/rules and other files in the debian directory.  Add a changelog file, normally installed in file /usr/share/doc/ddcutil/Changelog.  Rename NEWS file to NEWS.md  Add  configure  option  --enable-x11 / --disable-x11 .  The default is  --enable-x11 . \nIf  --disable-x11  is specified,  ddcutil  is built without X11 related code, which is \nused only for diagnostics within the  environment  command.  Directory  package  has been removed from the  ddcutil  git tree and is no longer included\nin the tarball.  This more cleanly separates \"downstream\" from \"upstream\" activities.\nPackagers for Linux distributions should contact if this creates problems.", 
            "title": "Packaging"
        }, 
        {
            "location": "/release_notes/#command-environment-enhancements", 
            "text": "The  environment  command is extensively revised.   The increasingly large collection of \ntests has been consolidated.  In particular:   Tests are now sensitive to machine architecture.  Performs alternative tests on arm systems,\ninlcuding the Raspberry Pi.   Added a consolidated collection of suggestions at the end that suggest ways for the \nuser to address configuration issues.  Fixed a bug that caused a segfault in 32 bit versions of  ddcutil .   Use of shell commands has largely been replaced with API calls, addressing some obscure \nshell errors.", 
            "title": "Command environment enhancements"
        }, 
        {
            "location": "/release_notes/#glib-20", 
            "text": "The required glib-2.0 version has been increased from 2.16 to 2.32 reflecting the use of glib \nthread functions.  Consequently,  ddcutil  no longer builds on some older Linux distributions.", 
            "title": "glib-2.0"
        }, 
        {
            "location": "/release_notes/#bug-fixes_1", 
            "text": "Fix a logic error in the VCP version comparison function vcp_version_le().  This bug affected only audio \nrelated VCP feature codes x8f, x91, and x93.  It also affected experimental command  watch  which listens for monitor\nchanges not made by  ddcutil , i.e. by pressing buttons on the monitor.  Properly handle the failure case where a display is detected on an I2C bus (EDID is read) but DDC communication fails, \nand the user specifies the display on the command line using the I2C bus number (option  --bus ).  Fix the cause of a segfault when the  loadvcp  command reads a user modified VCP file.  The \ncommand now fails gracefully if none of MFG_ID, MODEL, and SN are present.  Fix the cause of a segfault when displaying I2C functionality flags in the --environment command.  This segfault\nwas seen only in 32 bit versions of  ddcutil .  The --stats option showed incorrect time statistics on 32 bit versions of  ddcutil .  Add \"-lddcutil\" to output of \"pkgconfig ddcutil --libs\".  Thank you Federico.", 
            "title": "Bug fixes"
        }, 
        {
            "location": "/release_notes/#miscellaneous_2", 
            "text": "Improve reporting of the individual errors that result in command failure due to maximum I2C retries exceeded.  interrogate ,  environment  and  usbenvironment  now redirect all stderr output to stdout for easier capture  Added command line options  -trcfile  and  -trcfunc  to enable tracing by file name and function name.  Added configuration option  --enable-x11  controlling whether X11 related diagnostics are included in the  environment \nand  interrogate  commands, allowing  ddcutil  to build in embedded environments that lack X11.  The default is  yes .  Verbose EDID decription, e.g. on command  detect --verbose , now reports EDID byte 24 (x14), the supported features bitmap.\nThis is purely informational.  Ongoing work to make functions thread safe.   Code cleanup.", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/release_notes/#084", 
            "text": "22 July 2017  This release primarily contains packaging changes to meet Fedora distribution standards.\nIt also includes minor improvements and bug fixes. \nThere is no need to install it unless you are experiencing problems.", 
            "title": "0.8.4"
        }, 
        {
            "location": "/release_notes/#command-ddcutil-interrogate", 
            "text": "Do not include  usbenvironment  diagnostics as part of the  interrogate  command. USB connected monitors \n  are rare and USB related diagnostics clutter the report.", 
            "title": "Command ddcutil interrogate"
        }, 
        {
            "location": "/release_notes/#libddcutil-devel", 
            "text": "Do not package static libraries (.a and .la files) in libddcutil-devel.", 
            "title": "libddcutil-devel"
        }, 
        {
            "location": "/release_notes/#bug-fixes_2", 
            "text": "Prevent a segfault in monitor detection that occurrs when slave address x50 is detected on an I2C bus, but reading the EDID at that address fails.    Address an assert failure in the  ddcutil usbenvironment  command due to an unexpected library return code.    In the device identification cross reference report of  ddcutil environment , properly handle I2C bus number -1, used internally to \n  indicate unknown.", 
            "title": "Bug fixes"
        }, 
        {
            "location": "/release_notes/#082", 
            "text": "17 May 2017  This release introduces minor improvements to the diagnostic output of the  environment ,  detect , and  interrogate  commands.  There is no need to install it unless you are \nexperiencing problems.", 
            "title": "0.8.2"
        }, 
        {
            "location": "/release_notes/#command-ddcutil-detect", 
            "text": "If a display appears to support DDC (I2C slave address x37 is active) but communication fails, \n  perform a heuristic test as to whether it is a laptop display, issue message appropriately.  Changes to reduce the number of feature reads performed when detecting monitors, slightly \n  improving performance.", 
            "title": "Command ddcutil detect"
        }, 
        {
            "location": "/release_notes/#option-stats-errors", 
            "text": "Maintain and report a secondary count of the individual errors that are rolled up into \"retry count exceeded\" errors.", 
            "title": "Option --stats errors"
        }, 
        {
            "location": "/release_notes/#ddcutil-environment-verbose-changes", 
            "text": "Eliminate checks for package  i2c-tools  Report additional information about system hardware  Add a cross reference report for the multiple ways that different subsystems identify \n    a monitor and its I2C bus  Consolidate some tests to reduce redundancy  Check for DisplayPort Multi-Stream Technology (DPMST) devices  Eliminate the cause of a bogus error message when scanning devices", 
            "title": "ddcutil environment --verbose changes"
        }, 
        {
            "location": "/release_notes/#packaging_1", 
            "text": "Changes to the requirements of package  i2c-tools .  Generally speaking, it is no longer needed for \n  building  ddcutil , and is optionally used as part of the diagnostic output of the  environment  command.  Changed from  Requires:  to  Suggests:  for dpkg  Requires:  and  BuildRequires:  eliminated for rpm packaging in general  BuildRequires:  kept for SuSE rpm packaging.   ddcutil  needs file linux/i2c-dev.h, which is \n  contained in package  i2c-tools  in SuSE releases through 13.2    Changes to packaging to conform to Debian standards  Changes to packaging to conform to Fedora standards", 
            "title": "Packaging"
        }, 
        {
            "location": "/release_notes/#081", 
            "text": "06 May 2017  This is a bugfix release.  There is no need to install it unless you are experiencing the \nsegfault described below.   Fixes a segfault that can occur after open() fails for a /dev/usb/hiddev device.", 
            "title": "0.8.1"
        }, 
        {
            "location": "/release_notes/#080", 
            "text": "01 May 2017  Release 0.8.0 contains new features intended to address issues with particular monitors and user environments,\nto changes to improve performance, and code restructuring for future enhancements", 
            "title": "0.8.0"
        }, 
        {
            "location": "/release_notes/#general-changes", 
            "text": "Monitor detection and cataloging has been extensively reworked. \nTo support the library version of  ddcutil  used by the C (and future Python)\nAPIs, the list of displays is determined at program/library initialization and \nsaved.      The processing of the DDC Null Response has changed.  Normally a Null Response\nindicates a processing error in the monitor.  Some monitors also use the Null Response\nto indicate that a VCP feature is unsupported.   ddcutil  now performs an \nextended sleep when receiving a Null Message response to allow the monitor \nto recover.  It also performs an initial check of whether a monitor uses DDC Null Response to \nindicate unsupported features. See  DDC Null Response .    Linux error numbers no longer appear \"modulated\" in messages.  That is, an EACCES\nerror is reported as -13, not -1013.  Note that the C API has always returned \nLinux error numbers in unmodulated form.", 
            "title": "General Changes"
        }, 
        {
            "location": "/release_notes/#general-options", 
            "text": "Option  --async  parallelizes the monitor checks executed during display detection. \nIf there are multiple monitors, initial monitor checks are performed\nin multiple threads, improving performance.  This may become the default in future releases.  Option  --nodetect  is valid if the display is specified by its I2C bus number, using option  --bus .\nIn that case the initial detection of all displays is skipped, improving performance.\nThis may become the default in future releases.  Option  --hiddev   specifies a USB monitor connection by its hiddev device number.  For example:  --hiddev 3  refers to device /dev/usb/hiddev3.  There is no single letter \nspecifier for this option.  Option  --brief  is now a synonym for  --terse  Added  --stats  class  elapsed .   --stats time  is a synonum for  --stats elapsed .  Shows program \nelapsed time.", 
            "title": "General Options"
        }, 
        {
            "location": "/release_notes/#changes-to-specific-commands", 
            "text": "environment  and  interrogate  commands:   Report ddcutil version   probe ,  interrogate , and  getvcp scan  commands:   Do not include table features unless output level is VERBOSE. \nThis speeds up execution as table reads for unsupported features \nexecute the maximum number of retries.  It also clarifies performance statistics.\nNo monitors implementing table type features have yet been observed.   interrogate  command:     Report performance statistics for individual parts of  interrogate .   getvcp  command:     If  --terse  output is specified, then the VCP data is output in a form that\nis easily machine readable.  See  Command Specific Options   setvcp  and  loadvcp  commands:  By default,  setvcp  and  loadvcp  verify that a value has been successfully\nset by reading the value from the monitor after writing it.  Option  --noverify  \ndisables this check.", 
            "title": "Changes to Specific Commands:"
        }, 
        {
            "location": "/release_notes/#bug-fixes_3", 
            "text": "Fixed a segfault that occurred when a monitor returned a 0 length capabilities string.  Variables holding nanoseconds have been changed from type  long  to  uint64_t \nto address overflow problems on 32 bit systems such as Raspberry Pi.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release_notes/#c-api", 
            "text": "The C API has undergone extensive changes.", 
            "title": "C API"
        }, 
        {
            "location": "/release_notes/#name-changes", 
            "text": "Names have been changed for consistency and clarity.\nNames of certain functions used in message generation have been shortened \nto simplify printf() type functions.      Old typedef name  New typedef name      VCP_Feature_Code  DDCA_Vcp_Feature_Code    Version_Feature_Info  DDCA_Version_Feature_Info    Vcp_Value_Type  DDCA_Vcp_Value_Type    Single_Vcp_Value  DDCA_Single_Vcp_Value        Old function name  New function name      ddca_status_code_name()  ddca_rc_name()    ddca_status_code_desc()  ddca_rc_desc()    ddca_repr_display_identifier()  ddca_did_repr()    ddca_create_display_ref()  ddca_get_display_ref()    ddca_repr_display_ref()  ddca_dref_repr()    ddca_repr_display_handle()  ddca_dh_repr()    ddca_get_displays()  ddca_get_display_info_list()    ddca_repr_mccs_version()  ddca_mccs_version_id_name()    ddca_mccs_version_id_string()  ddca_mccs_version_id_desc()     Comments: \n- Function  ddca_create_display_ref()  was renamed to  ddca_get_display_ref()  to reflect \nthe fact that it returns a  DDCA_Display_Reference  from the internal data structures \nrepresenting detected displays.     Struct  Old field name  New field name      DDCA_Ddcutil_Version_Spec  build  micro        Enum  Old value name  New value name      DDCA_Output_Level  OL_TERSE  DDCA_OL_TERSE    DDCA_Output_Level  OL_NORMAL  DDCA_OL_NORMAL    DDCA_Output_Level  OL_VERBOSE  DDCA_OL_VERBOSE    DDCA_IO_Mode  DDC_IO_DEVI2C  DDCA_IO_DEVI2C    DDCA_IO_Mode  DDC_IO_ADL  DDCA_IO_ADL    DDCA_IO_Mode  USB_IO  DDCA_IO_USB    DDCA_Vcp_Value_Type  NON_TABLE_VCP_VALUE  DDCA_NON_TABLE_VCP_VALUE    DDCA_Vcp_Value_Type  TABLE_VCP_VALUE  DDCA_TABLE_VCP_VALUE", 
            "title": "Name Changes"
        }, 
        {
            "location": "/release_notes/#structs-and-functions-removed", 
            "text": "Structs removed  Comment      DDCA_IO_Location  Use DCCA_IO_Path        Functions removed  Comment      ddca_built_with_adl()  Use ddca_get_build_options()    ddca_built_with_usb()  Use ddca_get_built_options()", 
            "title": "Structs and Functions Removed"
        }, 
        {
            "location": "/release_notes/#enums-structs-and-functions-added-or-changed", 
            "text": "New enum  Purpose      DDCA_Stats_Type  Used as both values and bitflags for statistics types        New Structs  Purpose      DDCA_Adlno  Represents a ADL adapter number/display number pair    DDCA_IO_PATH  Physical path for MCCS communication     Comments:     Struct  DDCA_Display_Location  is replaced by  DDCA_IO_Path , \nwhich contains only the io mode and device identifiers \nfor that mode.  USB bus and device numbers were removed\nbecause they are attributes by which the physical path \n(hiddev device) can be found, not the path itself.  Struct  DDCA_Display_Info  has been adjusted to use  DDCA_IO_Path .      Function added  Purpose      ddca_ddcutil_version()  gets version as a struct of numbers    ddca_reset_stats()  reset performance statistics    ddca_show_stats()  report performance statistics    ddca_enable_verify()  controls whether VCP values are read after being set    ddca_is_verify_enabled()  queries whether VCP values are verified    ddca_free_display_info_list()  free function for struct    ddca_create_usb_hiddev_display_identifier()  create identifier for hiddev number    ddca_get_simple_nc_feature_value_name()  lookup name of simple NC feature value", 
            "title": "Enums, Structs, and Functions Added or Changed"
        }, 
        {
            "location": "/release_notes/#other-changes", 
            "text": "Functions now return Linux error number -EINVAL rather than DDC specific \nerror number DDCL_ARG in case of invalid argument   The display selection lifecycle has been changed.  The  DDCA_Display_Identifier  is not \nthe only way to obtain a  DDCA_Display_Reference . \nIt can be found in one of 2 ways:     Function  ddca_get_display_info_list()  returns  a collection  DDCA_Display_Info , containing \ndisplay identification information (e.g. ddcutil assigned display number, I2c Bus number, manufacturer id, etc.) and a display reference.\nThe client program can search through the returned collection to find the\ndesired monitor.    A  DDCA_Display_Identifier  can be created and passed to ddca_get_display_ref(), which returns \na  DDCA_Display_Reference .   See sample program  demo_display_selection.c  for examples.", 
            "title": "Other Changes"
        }, 
        {
            "location": "/release_notes/#sample-code-files", 
            "text": "The following example files for using the C API have been added:     File name  Purpose      demo_global_settings.c  Report and modify global settings    demo_display_selection.c  Display selection    demo_vcpinfo.c  Query VCP feature code descriptons    demo_get_set_vcp.c  Get and set VCP values     File  clmain.c  is now a miscellaneous catchall, mainly for testing.", 
            "title": "Sample code files:"
        }, 
        {
            "location": "/release_notes/#build-system-changes", 
            "text": "src/Makefile.am: change dist-hook to use -prune option per Knut Omang; \navoids eror in case there is nothing to erase (i.e. build hasn't happened)  Added cmake file FindDDCUtil.cmake from Dorian Vogel", 
            "title": "Build system changes"
        }, 
        {
            "location": "/release_notes/#073", 
            "text": "05 March 2017  Maintenance release.   Add additional diagnostic tests to command  ddcutil environment --verbose *.   New configure option  --enable-drm .     If enabled (the default), command  ddcutil environment --verbose  includes additional tests that use\nDRM services to better analyze disrepancies observed in the field between the EDID read directly from the monitor and that reported by X11.  Option  --enable-drm  requires that a recent version ( = 2.4.67) of the development package for libdrm2 (libdrm-dev or libdrm-devel depending on Linux distribution) be\ninstalled when building  ddcutil .  If a sufficently recent version is not detected,  configure  issues a warning and reverts to  --disable-drm .  If minimizing executable size is important, set  --disable-drm , as DRM services are used only for diagnostics.    Additional information on  ddcutil detect --verbose .  Report and interpret USB vendor id/product id when  detect  cannot open a hiddev device.  This is usually benign, and identifying the device should make this evident.  Suggest that the user check that DDC/CI is enabled in the monitor's on screen display if I2C bus x37 (DDC) is responsive, but DDC communication fails.", 
            "title": "0.7.3"
        }, 
        {
            "location": "/release_notes/#072", 
            "text": "01 February 2017  Maintenance release.   Fixes a critical bug in release 0.7.1 where insufficient privileges on a /dev/i2c-n device causes program termination.  ddcutil interrogate  always executes with  --set-slave-address  in effect  Minor improvements to  ddcutil environment  and  ddcutil interrogate  output  Minor improvements to  ddcutil detect --verbose  Add explanations for additional  errno  values", 
            "title": "0.7.2"
        }, 
        {
            "location": "/release_notes/#071", 
            "text": "27 January 2017  Mantenance release.   Add option  --force-slave-address  which causes ddcutil to take control of slave addresses on the \nI2C bus even if they are in use.  Internally,  ioctl(I2C_FORCE_SLAVE)  is called instead of  ioctl(I2C_SLAVE) .\nThis is intended as a possible workaround for situations where monitors on an I2C bus are not detected. See  Option --force-slave-address  Option  --force  disables various checking.  It's use is likely to result in command failure, but may \nprovide useful information as to the source of problems.  See  Option --force  Fix the cause of a segfault when displaying  statistics for option  --stats errors  or simply  --stats , or on \nthe  interrogate  command.  make install  will not install C header files unless configuration option  --enable-lib  is set.  Fix the cause of a Makefile error when trying to strip dependency information from  libddctuil.la  during  make install .  Extensive rework of Autotools files for future support of Python 3 as well as Python 2.  This work is incomplete.  Emit diagnostic messages to aid in debugging certain situations seen only in the field.", 
            "title": "0.7.1"
        }, 
        {
            "location": "/release_notes/#070", 
            "text": "03 January 2017   C API  Should be fairly stable, though not all features of  ddcutil  are exposed.  Reflecting the presence of APIs, the default for the  --enable-lib  configuration option is now \"yes\".\n  The following shared object library is created: libddcutil.so  Additional prebuilt packages: libddcutil0, libddcutil-dev (Debian, Ubuntu) or ddcutil-devel (Fedora, SUSE)    Python API  The Python API, implemented using SWIG, is a rough proof of concept and subject to major change.  SWIG support is only available by building from source, not from pre-built packages.  Requires  --enable-swig  configuration option.      A new command line option  --mfg , which allows for monitor selection using the 3 character manufacturer id \n  found in the EDID.   --model  and  -sn  no longer need to specified together.  If any of  --mfg ,  -model , and  -sn \n  are specified, the first monitor to match all of the manufacturer/model/serial-numbers that are specified is chosen.  The monitor feature and capabilities portion of  interrogate  has been enhanced.  This functionality is also exposed using the \n  new  probe  command which operates on a single monitor.  Parsing of the capabilities string is enhanced to accomodate monitors that do not separate feature codes by blanks.", 
            "title": "0.7.0"
        }, 
        {
            "location": "/release_notes/#061", 
            "text": "21 November 2016  Maintenance release.     Improve recovery and diagnotistic messages for certain exceptional conditions.   Command  ddcutil interrogate  now reports the differences between VCP codes \ndeclared in the capabilities string and those observed by scanning.   Extensive internal changes in preparation for future C and Python APIs.", 
            "title": "0.6.1"
        }, 
        {
            "location": "/release_notes/#060", 
            "text": "01 October 2016  Rename project from ddctool to ddcutil.     Primary executable is now named ddcutil    Shared library is now named libddcutil.so  Tarball is now named ddcutil.n.n.n.tar.gz", 
            "title": "0.6.0"
        }, 
        {
            "location": "/release_notes/#053", 
            "text": "24 September 2016  Fix overzealous code cleanup in release 0.5.1.     Undefined reference to function is_module_loaded_using_sysfs() when building without ADL support.    Error in command parsing. Command arguments were ignored.", 
            "title": "0.5.3"
        }, 
        {
            "location": "/release_notes/#051", 
            "text": "23 September 2016  Minor improvements to diagnostics of the  environment  and  interrogate  commands:   Check if i2c_dev is built into the kernel as an alternative to it being a loadable kernel module    Recognize amdgpu video driver", 
            "title": "0.5.1"
        }, 
        {
            "location": "/release_notes/#05", 
            "text": "09 September 2016  This is the first formal release of  ddcutil   Rework USB monitor support based on testing with Eizo Coloredge and NEC PA series \n-- Probing of USB connected monitors is greatly extended and refactored from  ddcutil environment  into a separate command  ddcutil usbenv .\nLibraries hidraw and libusb are used as well as hiddev.  HID Report Descriptors are parsed.  This probing is included in  ddcutil interrogate .  \n  --  configure  option  --enable-usb/--disable-usb  controls whether ddcutil is built\n  with USB monitor support.  The default is  --enable-usb .  When building with USB support,\n  packages for udev, hidraw, hiddev, and libusb are required.  Simplify README.md.  Refer to www.ddcutil.com for most documentation    The assumption that I2C buses are numbered consecutively is removed.  Required for Raspberry Pi.   Allow a display to be specified on the command  ddcutil loadvcp .\n This addresses the situation where a monitor presents both an I2C and a USB interface.\n Normally, the display is determined using the data stored in the VCP file, and the I2C display interface is\n chosen over the USB interface.\n If a display is specified, then the model and sn from its EDID must match\n those in the VCP data being loaded.    Add  ddcutil  command option  --timestamp/--ts .  If specified, trace messages are prefaced with an elapsed timestamp.  Because of changing package requirements,  ddcutil  no longer builds in the openSUSE Build Service (OBS) for older OS versions (openSUSE 13.1, Ubuntu 12.04, 14.04).   ddcutil  currently does not build for any openSUSE version in the openSUSE Build Service due to violation of policy guidelines.  This problem will\nbe addressed in a subsequent release. openSUSE users can build ddcutil from its tarball.", 
            "title": "0.5"
        }, 
        {
            "location": "/prior_announcements/", 
            "text": "Prior Announcements\n\n\n20 January 2018\n\n\nRelease 0.8.6 contains a few minor externally visible enhancements and bug fixes, along with non-upwardly\ncompatible changes to the C API.  Most current users will see no need to upgrade.\n\n\nFor a complete list of changes and bug fixes, see \nRelease Notes\n.\nPrior announcements can be found \nhere\n.\n\n\nddcutil\n is now in the repositories for the upcoming Ubuntu 18.04 release and the openSUSE Tumbleweed rolling release. \n\n\n16 November 2017\n\n\nRelease 0.8.5 contains a large number of minor enhancements and bug fixes.  Users of \nddcutil\n on 32 bit platforms and\nthose on the Raspberry Pi should upgrade.  \n\n\nFor a complete list of changes and bug fixes, see \nRelease Notes\n.\nPrior announcements can be found \nhere\n.\n\n\n15 October 2017\n\n\nPackage \nddcutil\n has been sponsored into Debian and is now included in \nDebian Testing\n.\nIt is on track to be part of the next Debian release, which means it should eventually appear in downstream distributions such as Ubuntu. \nNote that only package \nddcutil\n, containing the command line version of \nddcutil\n, is currently in the Debian repositories.\nThe shared library packages, including the C and Python APIs, are not yet part of Debian.\n\n\n22 July 2017\n\n\nRelease 0.8.4 primarily contains packaging changes to meet Fedora distribution standards.\n\n\nFor a complete list of changes and bug fixes, see \nRelease Notes\n.\nPrior annoucnements can be found \nhere\n.\n\n\n17 May 2017\n\n\nRelease 0.8.2 contains minor enhancements, primarily to diagnostics in the \nenvironment\n and \ninterrogate\n commands. \n\n\nFor a complete list of changes and bug fixes, see \nRelease Notes\n.\nPrior annoucnements can be found \nhere\n.\n\n\n05 May 2017\n\n\nRelease 0.8.1 is a bugfix release that addresses a segfault that can occur when scanning for \nUSB connected monitors.\n\n\nFor a complete list of changes and bug fixes, see \nRelease Notes\n.\nPrior annoucnements can be found \nhere\n.\n\n\n01 May 2017\n\n\nRelease 0.8.0 contains new features intended to address issues with particular monitors and user environments,\nand to improve performance\n\n\nThe most significant changes visible to users are:  \n\n\n\n\nIf there are multiple monitors and option \n--async\n is specified, initial monitor checks are performed in separate threads.\nUsers with multiple monitors should see significantly better startup time.  \n\n\nIf a display is specified by its I2C bus number (option \n--bus\n) and option \n--nodetect\n is specified,\nglobal display detection is skipped, improving performance.\n\n\nBy default, \nsetvcp\n and \nloadvcp\n now read the VCP value after it has been set, \nto confirm that the monitor has made the change requested.  \n\n\nCommand \ngetvcp --terse\n now reports VCP settings in a form that is easily machine readable.\n\n\nThe C API has been extensively revised.  Many names have changed for consistency and clarity.\n\n(Apologies to those of you who have written applications.)\n\n\n\n\nFor a complete list of changes and bug fixes, see \nRelease Notes\n.\nPrior annoucnements can be found \nhere\n.\n\n\nOBS\n\n\n29 April 2017\n\n\nAt some time in the recent past, the files for release 0.7.3 in the OpenSUSE Build Service were corrupted \nwith files from the test system.  Symptoms of this corruption include\n\n\n\n\nPrefixing a VCP feature code number with \"0x\" causes a segfault, e.g. \"ddcutil setvcp 0x10 50\"  \n\n\nCommand line option \"--verify\" is recognized\n\n\n\n\nAs of this morning, the production ddcutil project on OBS was restored to release 0.7.3.\n\n\n0.7.3\n\n\n05 March 2017\n\n\nRelease 0.7.3 is a maintenance release.  There is no need to install it unless you are experiencing problems.\n\n\nThis release introduces the following features:\n\n\n\n\nCommand \nddcutil detect --verbose\n shows additional information.\n\n\nCommand \nddcutil environment --verbose\n implements additional diagnostic tests.\n\n\nconfigure\n option \n--enable-drm\n controls whether DRM is used to enhance the diagnostics of command \nddcutil environment --verbose\n.\nIf \nenable-drm=yes\n, package libdrm-dev or libdrm-devel (depending on Linux distribution) must be installed to build \nddcutil\n.\nSetting \n--enable-drm=no\n affects only diagnostic output, not normal execution.\n\n\n\n\nFor a complete list of changes and bug fixes, see \nRelease Notes\n.\nPrior annoucnements can be found \nhere\n.\n\n\n0.7.2\n\n\n01 February 2017\n\n\nMaintenance release.\n\n\n\n\nFixes a critical bug in release 0.7.1 where insufficient privileges on a /dev/i2c-n device causes program termination.\n\n\nddcutil interrogate\n always executes with \n--set-slave-address\n in effect\n\n\nMinor improvements to \nddcutil environment\n and \nddcutil interrogate\n output\n\n\nMinor improvements to \nddcutil detect --verbose\n\n\nAdd explanations for additional \nerrno\n values\n\n\n\n\nFor a complete list of changes and bug fixes, see \nRelease Notes\n.\nPrior annoucnements can be found \nhere\n.\n\n\n0.7.1\n\n\n27 January 2017\n\n\nRelease 0.7.1 is a maintenance release.  There is no need to install it unless you are experiencing problems.\n\n\nThis release introduces the following features:\n\n\n\n\nCommand option \n--force-slave-address\n causes \nddcutil\n to attempt to take control of slave addresses\non the I2C bus even if they are in use by another driver.  This may aid in certain situations where monitors on \nan I2C bus are not properly detected. See \nInstrumentation and Tuning\n)\n\n\n\n\nFor a complete list of changes and bug fixes, see \nRelease Notes\n.\nPrior annoucnements can be found \nhere\n.\n\n\n0.7.0\n\n\n03 January 2017\n\n\nRelease 0.7 introduces the following features: \n\n\n\n\nC API, exposed by shared library \nlibddcutil\n.  See \nAPI\n.  \n\n\nA new command line option \n--mfg\n, allows for the 3 character manufaturer id found in the EDID to used as part of monitor selection.\n\n\nThe monitor feature and capabilities portion of \ninterrogate\n is also exposed by the  new \nprobe\n command which explores the capabilities string and features found on a single monitor.\n\n\n\n\nFor details, see \nRelease Notes\n.\nPrior annoucnements can be found \nhere\n.\n\n\nopenSUSE Build Service packaging of release 0.7.0 is complete.  Owing to Launchpad constraints, the PPA will not be correct until \nddcutil\n's release is incremented, i.e. until release 0.7.1\n\n\n0.6.1\n\n\n21 November 2016\n\n\nThe most recent release of \nddcutil\n is 0.6.1.  This is a maintenance release and need not be installed\nunless you are experiencing problems.  For details, see \nRelease Notes\n.\n\n\n0.6.0\n\n\n01 October 2016\n\n\nAs of release 0.6, the name of this program changed from \nddctool\n to \nddcutil\n \nto avoid confusion with a commerical datacenter program also named \nddctool.\n\n\nThe following are affected:\n\n\n\n\n\n\n\n\nObject\n\n\nOld name\n\n\nNew Name\n\n\n\n\n\n\n\n\n\n\nRepository URL\n\n\nhttps://github.com/rockowitz/ddctool.git\n\n\nhttps://github.com/rockowitz/ddcutil.git\n\n\n\n\n\n\nWeb site URL\n\n\nhttp://www.ddctool.com\n\n\nhttp://www.ddcutil.com\n\n\n\n\n\n\nPrimary executable\n\n\nddctool\n\n\nddcutil\n\n\n\n\n\n\nShared library\n\n\nlibddctool.so\n\n\nlibddcutil.so", 
            "title": "Announcement History"
        }, 
        {
            "location": "/prior_announcements/#prior-announcements", 
            "text": "20 January 2018  Release 0.8.6 contains a few minor externally visible enhancements and bug fixes, along with non-upwardly\ncompatible changes to the C API.  Most current users will see no need to upgrade.  For a complete list of changes and bug fixes, see  Release Notes .\nPrior announcements can be found  here .  ddcutil  is now in the repositories for the upcoming Ubuntu 18.04 release and the openSUSE Tumbleweed rolling release.   16 November 2017  Release 0.8.5 contains a large number of minor enhancements and bug fixes.  Users of  ddcutil  on 32 bit platforms and\nthose on the Raspberry Pi should upgrade.    For a complete list of changes and bug fixes, see  Release Notes .\nPrior announcements can be found  here .  15 October 2017  Package  ddcutil  has been sponsored into Debian and is now included in  Debian Testing .\nIt is on track to be part of the next Debian release, which means it should eventually appear in downstream distributions such as Ubuntu. \nNote that only package  ddcutil , containing the command line version of  ddcutil , is currently in the Debian repositories.\nThe shared library packages, including the C and Python APIs, are not yet part of Debian.  22 July 2017  Release 0.8.4 primarily contains packaging changes to meet Fedora distribution standards.  For a complete list of changes and bug fixes, see  Release Notes .\nPrior annoucnements can be found  here .  17 May 2017  Release 0.8.2 contains minor enhancements, primarily to diagnostics in the  environment  and  interrogate  commands.   For a complete list of changes and bug fixes, see  Release Notes .\nPrior annoucnements can be found  here .  05 May 2017  Release 0.8.1 is a bugfix release that addresses a segfault that can occur when scanning for \nUSB connected monitors.  For a complete list of changes and bug fixes, see  Release Notes .\nPrior annoucnements can be found  here .  01 May 2017  Release 0.8.0 contains new features intended to address issues with particular monitors and user environments,\nand to improve performance  The most significant changes visible to users are:     If there are multiple monitors and option  --async  is specified, initial monitor checks are performed in separate threads.\nUsers with multiple monitors should see significantly better startup time.    If a display is specified by its I2C bus number (option  --bus ) and option  --nodetect  is specified,\nglobal display detection is skipped, improving performance.  By default,  setvcp  and  loadvcp  now read the VCP value after it has been set, \nto confirm that the monitor has made the change requested.    Command  getvcp --terse  now reports VCP settings in a form that is easily machine readable.  The C API has been extensively revised.  Many names have changed for consistency and clarity. \n(Apologies to those of you who have written applications.)   For a complete list of changes and bug fixes, see  Release Notes .\nPrior annoucnements can be found  here .", 
            "title": "Prior Announcements"
        }, 
        {
            "location": "/prior_announcements/#obs", 
            "text": "29 April 2017  At some time in the recent past, the files for release 0.7.3 in the OpenSUSE Build Service were corrupted \nwith files from the test system.  Symptoms of this corruption include   Prefixing a VCP feature code number with \"0x\" causes a segfault, e.g. \"ddcutil setvcp 0x10 50\"    Command line option \"--verify\" is recognized   As of this morning, the production ddcutil project on OBS was restored to release 0.7.3.", 
            "title": "OBS"
        }, 
        {
            "location": "/prior_announcements/#073", 
            "text": "05 March 2017  Release 0.7.3 is a maintenance release.  There is no need to install it unless you are experiencing problems.  This release introduces the following features:   Command  ddcutil detect --verbose  shows additional information.  Command  ddcutil environment --verbose  implements additional diagnostic tests.  configure  option  --enable-drm  controls whether DRM is used to enhance the diagnostics of command  ddcutil environment --verbose .\nIf  enable-drm=yes , package libdrm-dev or libdrm-devel (depending on Linux distribution) must be installed to build  ddcutil .\nSetting  --enable-drm=no  affects only diagnostic output, not normal execution.   For a complete list of changes and bug fixes, see  Release Notes .\nPrior annoucnements can be found  here .", 
            "title": "0.7.3"
        }, 
        {
            "location": "/prior_announcements/#072", 
            "text": "01 February 2017  Maintenance release.   Fixes a critical bug in release 0.7.1 where insufficient privileges on a /dev/i2c-n device causes program termination.  ddcutil interrogate  always executes with  --set-slave-address  in effect  Minor improvements to  ddcutil environment  and  ddcutil interrogate  output  Minor improvements to  ddcutil detect --verbose  Add explanations for additional  errno  values   For a complete list of changes and bug fixes, see  Release Notes .\nPrior annoucnements can be found  here .", 
            "title": "0.7.2"
        }, 
        {
            "location": "/prior_announcements/#071", 
            "text": "27 January 2017  Release 0.7.1 is a maintenance release.  There is no need to install it unless you are experiencing problems.  This release introduces the following features:   Command option  --force-slave-address  causes  ddcutil  to attempt to take control of slave addresses\non the I2C bus even if they are in use by another driver.  This may aid in certain situations where monitors on \nan I2C bus are not properly detected. See  Instrumentation and Tuning )   For a complete list of changes and bug fixes, see  Release Notes .\nPrior annoucnements can be found  here .", 
            "title": "0.7.1"
        }, 
        {
            "location": "/prior_announcements/#070", 
            "text": "03 January 2017  Release 0.7 introduces the following features:    C API, exposed by shared library  libddcutil .  See  API .    A new command line option  --mfg , allows for the 3 character manufaturer id found in the EDID to used as part of monitor selection.  The monitor feature and capabilities portion of  interrogate  is also exposed by the  new  probe  command which explores the capabilities string and features found on a single monitor.   For details, see  Release Notes .\nPrior annoucnements can be found  here .  openSUSE Build Service packaging of release 0.7.0 is complete.  Owing to Launchpad constraints, the PPA will not be correct until  ddcutil 's release is incremented, i.e. until release 0.7.1", 
            "title": "0.7.0"
        }, 
        {
            "location": "/prior_announcements/#061", 
            "text": "21 November 2016  The most recent release of  ddcutil  is 0.6.1.  This is a maintenance release and need not be installed\nunless you are experiencing problems.  For details, see  Release Notes .", 
            "title": "0.6.1"
        }, 
        {
            "location": "/prior_announcements/#060", 
            "text": "01 October 2016  As of release 0.6, the name of this program changed from  ddctool  to  ddcutil  \nto avoid confusion with a commerical datacenter program also named  ddctool.  The following are affected:     Object  Old name  New Name      Repository URL  https://github.com/rockowitz/ddctool.git  https://github.com/rockowitz/ddcutil.git    Web site URL  http://www.ddctool.com  http://www.ddcutil.com    Primary executable  ddctool  ddcutil    Shared library  libddctool.so  libddcutil.so", 
            "title": "0.6.0"
        }, 
        {
            "location": "/ddccontrol/", 
            "text": "Comparison with ddccontrol\n\n\nThe program \nddccontrol\n appears to be unmaintained, and has been dropped from distributions.  It is brittle \nin ways that I surmise reflect the services availble at the time it was written.  In particular:  \n\n\n\n\nddcctontrol\n, as it is normally built (based on \nconfigure\n options that control conditional compilation), programs the I2C devcies directly at the PCI level.  It has dedicated code for each of several video card interfaces (e.g. nvidia, sis, intel740, intell 810).\n\nddcutil\n, \non the other hand, relies exclusively on the the \ni2c-dev\n userspace \ninterface to I2C.  This should make it less fragile to video card variations.\n\n\nddccontrol\n uses a monitor attribute database to interpret VCP feature codes.  With MCCS \n2.0 and greater, VCP feature code definitions are largely standardized.  \nddcutil\n uses the \nMCCS specification to interpret VCP feature values, and considerable\neffort has gone into understanding that specification, particularly the variation among versions.  Unlike \nddccontrol\n, \nddcutil\n makes\nno attempt to interpret values for feature codes designated as manufacturer \nspecific (E0..FF).", 
            "title": "Comparison with ddccontrol"
        }, 
        {
            "location": "/ddccontrol/#comparison-with-ddccontrol", 
            "text": "The program  ddccontrol  appears to be unmaintained, and has been dropped from distributions.  It is brittle \nin ways that I surmise reflect the services availble at the time it was written.  In particular:     ddcctontrol , as it is normally built (based on  configure  options that control conditional compilation), programs the I2C devcies directly at the PCI level.  It has dedicated code for each of several video card interfaces (e.g. nvidia, sis, intel740, intell 810). ddcutil , \non the other hand, relies exclusively on the the  i2c-dev  userspace \ninterface to I2C.  This should make it less fragile to video card variations.  ddccontrol  uses a monitor attribute database to interpret VCP feature codes.  With MCCS \n2.0 and greater, VCP feature code definitions are largely standardized.   ddcutil  uses the \nMCCS specification to interpret VCP feature values, and considerable\neffort has gone into understanding that specification, particularly the variation among versions.  Unlike  ddccontrol ,  ddcutil  makes\nno attempt to interpret values for feature codes designated as manufacturer \nspecific (E0..FF).", 
            "title": "Comparison with ddccontrol"
        }, 
        {
            "location": "/monitor_notes/", 
            "text": "Notes on Specific Monitors\n\n\nThe following list describes some monitors that have been tested.  It highlights the variability in DDC implementation among monitors.\n\n\nAOC Q2775\n\n\nVCP Version:   2.2\n\nController Manufacturer:  Mstar \n\nController Model:  mh=0xff, ml=0x16, sh=0x00\n\nFirmware version:  0.7\n\nManufacture year: 2016  \n\n\nFeature x0B: Color temperature increment:  100 deg Kelvin\n\nFeature x0C: Color temperature request: 100\n\nCaclculated color temperature = 3000 + 100 * 100 = 3000+10000 = 13000 deg Kelvin  (nonsensical)  \n\n\nCapabilities string has controller manufacturer name in model() field.\n\n\nApple Cinema Display A1082\n\n\nHas both I2C and USB interfaces. \n\n\nVCP Version:  2.0\n\nController Manufacturer:   unspecified\n\nController Model:          unspecified  \n\nFirmware version:          unspecified\n\nManufacture year:          2005\n\n\nI2C interface has more VCP features than USB interface. \n\n\nUSB interface does not report VCP version (feature DF).\n\n\nAble to read EDID over USB. \n\n\nCapabilities string does not begin and end with parentheses. \n\n\nAsus VE247\n\n\nVCP version:  2.0 \n\nController Manufacturer:   RealTek\n\nController Model: mh=x00, ml=x24, sh=x82   \n\nFirmware version: 2.0 \n\nMaufacture year:  2010\n\n\nResponds to unknown VCP codes using the DDC NULL message instead of setting the \nUnsupported VCP code\n bit in the GETVCP response.\n\n\nSensible responses to VCP codes x0B and x0C. \n\n\nAsus ROG PG279Q\n\n\nVCP version:  2.2 \n\nController Manufacturer:   manufacturer defined controller \n\nController Model:   \n\nFirmware version: 5.57 \n\nMaufacture year:  2017\n\n\nDoes not support VCP codes x0B and X0C. \n\n\nDoes not support feature x60 - Input Source\n\n\nDoes not respond to getvcp of unsupported VCP codes by setting the unsupported feature flag in the GETVCP\nresponse. Requests for unsupported features fail by exceeding retries.\n\n\nBenQ XL2411Z\n\n\nVCP version:  2.2\n\nController Manufacturer: Mstar\n\nController Model: mh=x00 mh=x00, ml-x85, sh=x56\n\nFirmware version: 2.1 \n\nManufacture year: 2013\n\n\nFeature x0B: Color temperature increment:  50 deg Kelvin\n\nFeature x0C: Color temperature request: 0\n\nCaclculated color temperature = 3000 + (0*50) = 3000 deg Kelvin  (nonsensical)  \n\n\nResponds to VCP feature x60 (Input Source) even though this is not documented in the capabilities string.\n\n\nDell P2411\n\n\nVCP version: 2.1 \n\nController Manufacturer: Mstar\n\nController Model: mh=x00, ml=x00, sh=x56 \n\nFirmware version:       1.1\n\nManufacture year:       2011\n\n\nLots of I2C errors.  Heavily dependant on retries.  The CAPABILITIES command sometimes fails, even with maximum retries. \nMore recently, works with nouveau driver, but fails with proprietary Nvidia driver. \n\n\nReports VCP code 0B (color temperature increment) as 1 degree Kelvin, which makes the GETVCP response to VCP code 0C (color temperature\nrequest) nonsensical.\n\n\nDell P2715Q\n\n\nVCP version: 2.1\nController Manufacturer: Mstar (sl=x05)\nController Model: mh=x00, ml=x00,x sh=x56 \n\nFirmware version:       2.1\nManufacture year:       2015\n\n\nFeature x0B, Color temperature increment:   unsupported\n\nFeature x0C, Color temperature request:     unsupported\n\n\nvery clean, no  DDC retries needed\n\n\nDell Ultrasharp 1905FP\n\n\nDoes not support DDC.\n\n\nDell Ultrasharp U2413\n\n\nVCP version:   2.1\nController Manufacturer:  STMicroelectronics (sl=x0d)\n\nController Model:  mh=x00, ml=x93, sh=x01\n\nFirmware version:  2.1\n\nManufacture year:  2013\n\n\nThis monitor has a hardware LUT, however LUT loading not supported using standard VCP feature codes.\n\n\nResponds to VCP feature xc0 (Display Usage Time), but returns 0.\n\n\nColor temperature:\n\n  color temp increment (feature 0B):  unsupported\n  color temp request (feature 0C):    unsupported\n\n\nDell U3011\n\n\nVCP version: 2.1 \n\nController manufacturer:  Mstar \n\nController Model: mh=x00, ml=x94, sh=x85   \n\nFirmware version: 1.5 \n\nManufacture year: 2012  \n\n\nIf a value is set using SETVCP, the new value takes effect and appears in the on-screen display.   However, GETVCP sometimes still retieves the old value, not the new one.\n\n\nReports VCP code x0B (color temperature increment) as 1 degree Kelvin, which makes the GETVCP response to\nVCP code x0C (color temperature request) nonsensical.\n\n\nColor temperature:\n\n  color temp increment (feature 0B):  1 deg K\n\n  color temp request (feature 0C):    2\n  calculated color temp = 3000 + (x0c_val * x0b_val) = 3000  + (1 * 2) = 3002 degrees Kelvin\n\n\nDell Ultrasharp U3415W\n\n\nVCP version: 2.1 \n\nController manufacturer:  Realtek (sl=x09)    \n\nController Model: mh=x00, ml=x11, sh=x11     \n\nFirmware version: 65.1   \n\nManufacture year: 2015  \n\n\nNeither feature 0B (color temperature increment) or 0C (color temperature request) are listed\nin the capabilities string.\nHowever, querying feature 0B does work.  Querying feature 0C fails.\n\n\nColor temperature:\n\n  color temp increment (feature 0B):  100 deg K\n\n  color temp request (feature 0C):    query fails \n\n\nEizo Coloredge CG19\n\n\nVCP version:  unreported \n\nController manufacturer and model: unreported (VCP feature code C8 unsupported) \n\nFirmware version: unreported (VCP feature code C9 unsupported)   \n\n\nReports EDID at I2C bus address x50.  Does not support DDC over I2C (bus address x37). \n\n\nDoes implement MCCS over USB, and appears to conform to the USB Monitor Control Class Specification.\nHowever, it appears that the more sophisticated monitor features such as LUT loading use manufacturer\nspecific USB HID reports. \n\n\nUnable to read EDID over USB, even though the HID Report for EDID can be located.\n\n\nTo set color related VCP feature values, Custom Color mode must be selected.   If set to sRGB or Calibrated, the SETVCP command\nwill appear to succeed, but will have no effect.  (In sRGB mode, Brightness can be set, in Calibrated mode it cannot.)\n\n\nGateway Diamondtron VX920\n\n\nVCP version:  Unspecified, implies 1.0 \n\nController manufacturer and model:   Unknown (VCP feature code C8 unsupported)   \n\nFirmware version:  Unknown (VCP feature code C9 unsupported)  \n\n\nHanns G Hi221D\n\n\nVCP version:  2.1 \n\nController manufacturer:  Mstar \n\nController model:   mh=x00, ml=x92, sh=x00 \n\nFirmware version:  0.6  \n\n\nAll GETVCP requests return a value, whether or not the feature is valid for the monitor.   The monitor never reports a feature as unsupported.\n\n\nHP LP1965\n\n\nVCP version:   2.0\n\nController manufacturer:  Undocumented value:  x64\n\nController model:   mh=xff, ml=xff, sh=x86\n\nFirmware version: 0.3\n\nManufacture year: 2007\n\n\nCapabilities reports non-standard DDC command x4E.\n\n\nColor temperature:\n\n  color temp increment (feature 0B):  50 deg K\n\n  color temp request (feature 0C):    70\n\n  calculated color temp = 3000 + (x0c_val * x0b_val) = 3000  + (70 * 50) = 6500 degrees Kelvin\n\n\nHP LP2475w\n\n\nVCP version:  2.1\n\nController manufacturer: Genesis\n\nController model:  mh=xff   ml=xff  sh=x80\nFirmware version: 0.31\n\nManufacture year: 2008  \n\n\nColor temperature:\n\n  color temp increment (feature 0B):  3000 deg K\n\n  color temp request (feature 0C):    1\n\n  calculated color temp = 3000 + (x0c_val * x0b_val) = 3000  + (1 * 3000) = 6000 degrees Kelvin\n\n\nLUT loading not supported using standard VCP feature codes.\n\n\nImplements MCCS over USB as well as I2C.   However, the USB implementation appears to be non-standard.  It does not conform to the USB Monitor Control Class Specification. \n\n\nHP LP2480zx\n\n\nVCP version:   2.1 \n\nController manufacturer:  Genesis \n\nController Model: mh=xff, ml=xff, sh=x80 \n\nFirmware version:      0.139\n\nManufacture year:      2008  \n\n\nHeavily reliant on manufacturer specific VCP codes.  Most color related features, including loading the internal LUT, are not supported using\nstandard VCP feature codes.\n\n\nImplements MCCS over USB as well as I2C.   However, the USB implementation appears to be non-standard.  It does not conform to the USB Monitor Control Class Specification. \n\n\nSensible reponses to VCP codes 0B and 0C. \n\n\nCapabilities string does not match actual capabilities observed.  For example, capaibilites does not include VCP feature code x10, brightness, which is recognized by getvcp and setvcp.\n\n\nValues in capabilities string for feature 60 is a mixture of hex and decimal values, i.e. \n\n\n 01 02 03 04 05 07 0C 13 14 15 17 1C\n\n\n\n\nShould be:\n\n\n 01 02 03 04 05 07 0C 0D 0E 0F 11 ??\n\n\n\n\nCapabilities string does include cmds() segment listing supported commands, or model() segment listing model.\n\n\nHP w2207\n\n\nVCP Version:  2.1\n\nController manufacturer:  Mstar\n\nFirmware Version:          3.5\n\nManufacture year:         2007  \n\n\nColor temperature increment (feature x0B) and request (feature x0C) result in a color temperature of 13,000 degress Kelvin\n\n\nResponds with data to all VCP feature requests, never reports a feature as unsupported \n\n\nHP ZR2740w\n\n\nVCP version:  2.2  \n\n\nImplements only a few VCP codes. \n\n\nVCP feature codes 0B and 0C unsupported.\n\n\nIilyama PL2779Q\n\n\nVCP Version:    2.1\n\nController manufacturer:   unknown (feature code xC8 unsupported)\n\nFirmware version:          unknown (feature code xC9 unsupported)\n\nManufacture year:          2013  \n\n\nColor temperature increment (feature x0B) and request (feature x0C) result in a color temperature of 26,100 degress Kelvin\n\n\nDoes not include command x02 (VCP Response) or xE3 (Capabilities Reply) in its capabilities string, even though these are supported.\n\n\nResponds to several VCP feature not listed in capabilities\n\n\nLG Ultrawide\n\n\nVCP version:  2.1 \n\nController manufacturer and model:  STK\n\nFirmware version:  0.1\n\nManufacture year:  2014  \n\n\nFeature codes are not separated by blanks in the vcp() section of the capabilities string.\n\n\nNo serial number in the EDID.\n\n\nWhen responding to a Get VCP Feature request, the monitor never sets sets the Result Code field of the VCP Feature Reply to Unsupported VCP Code.\nInstead, it always reports No Error.\n\nFor unsupported VCP codes, all bytes in the response (MH, ML, SH, SL) are set to x00.\n\n\nNEC LCD3090WQXi\n\n\nVCP Version 2.0\n\nController manufacturer and model: unreported (VCP feature code C8 unsupported)\n\nFirmware version: unreported (VCP feature code C9 unsupported)   \n\n\nNEC PA241\n\n\nVCP Version 2.0\n\nController manufacturer and model: unreported (VCP feature code C8 unsupported)\n\nFirmware version: unreported (VCP feature code C9 unsupported)   \n\n\nImplements both I2C and USB interfaces.  \n\n\nMakes heavy use of manufacturer specific VCP feature codes.  Also, ddcutil capabilities --verbose reports numerous manufacturer\nspecific DDC commands  The USB interface also makes heavy use of manufacturer specific usage codes.\n\n\nMonitor must be set to ??? to allow changes. \n\n\nVCP code x0c (Color Temperature Request) returns 0, which is nonsensical. \n\n\nDoes not use the usual VCP codes (.e.g. x16/Red Gain) for color control.\nInstead uses the 6 axis color control features x8c..xa0.\n\n\nPhillips BDM3270\n\n\nVCP Version: 2.2\nController manufacturer:  Novatek, model info: mh=xff, ml=xff, sh=x00\nFirmware version:  1.0\nManufature year:  2016\n\n\nColor temperature increment (VCP code x0B) = 50 degrees Kelvin (sensible)\n\nColor temperature request (VCP code x0C) yields a calculated color temperator of 3000+(70*50) = 6500 degrees Kelvin\n\n\nPhillips BDM4037U\n\n\nVCP Version:  2.2\n\nController manufacturer:  Realtek (sl=x09), Controller model: mh=x00, ml=x00, sh=x00\n\nFirmware version 0.1\n\nManufacture year:  2016  \n\n\ncolor temp increment (feature 0B):  100 deg K \n\n  color temp request (feature 0C):    70 -\n 3000+(70*100) = 10000 deg K\n\n\nDDC communication clean, no need for retries\n\n\nSamsung S32D850\n\n\nManufacture year:  2015 \nVCP Version: 2.0\nController manufacturer:  Mstar, controller number: mh=x00, ml=x10, sh=x00\nFirmware version:         0.1\n\n\nCapabilites request returns a 0 length string.\n\n\nFeatures x0B and X0C are unsupported.  Cannot calculate color temperature.\n\n\nHas no serial number in EDID\n\n\nSamsung Syncmaster 213T\n\n\nDoes not support DDC.\n\n\nSamsung Syncmaster 730B\n\n\nVCP version:   Unspecified, implies 1.0 \n\nController manufacturer and model:   Unknown (VCP feature code C8 unsupported)   \n\nFirmware version:  Unknown (VCP feature code C9 unsupported)  \n\n\nThe capabilities string spcifies the values for non-continuous features in decimal rather than hexadecimal\n\n\nVCP feature codes 0B and 0C unsupported.", 
            "title": "Notes on specific monitors"
        }, 
        {
            "location": "/monitor_notes/#notes-on-specific-monitors", 
            "text": "The following list describes some monitors that have been tested.  It highlights the variability in DDC implementation among monitors.", 
            "title": "Notes on Specific Monitors"
        }, 
        {
            "location": "/monitor_notes/#aoc-q2775", 
            "text": "VCP Version:   2.2 \nController Manufacturer:  Mstar  \nController Model:  mh=0xff, ml=0x16, sh=0x00 \nFirmware version:  0.7 \nManufacture year: 2016    Feature x0B: Color temperature increment:  100 deg Kelvin \nFeature x0C: Color temperature request: 100 \nCaclculated color temperature = 3000 + 100 * 100 = 3000+10000 = 13000 deg Kelvin  (nonsensical)    Capabilities string has controller manufacturer name in model() field.", 
            "title": "AOC Q2775"
        }, 
        {
            "location": "/monitor_notes/#apple-cinema-display-a1082", 
            "text": "Has both I2C and USB interfaces.   VCP Version:  2.0 \nController Manufacturer:   unspecified \nController Model:          unspecified   \nFirmware version:          unspecified \nManufacture year:          2005  I2C interface has more VCP features than USB interface.   USB interface does not report VCP version (feature DF).  Able to read EDID over USB.   Capabilities string does not begin and end with parentheses.", 
            "title": "Apple Cinema Display A1082"
        }, 
        {
            "location": "/monitor_notes/#asus-ve247", 
            "text": "VCP version:  2.0  \nController Manufacturer:   RealTek \nController Model: mh=x00, ml=x24, sh=x82    \nFirmware version: 2.0  \nMaufacture year:  2010  Responds to unknown VCP codes using the DDC NULL message instead of setting the  Unsupported VCP code  bit in the GETVCP response.  Sensible responses to VCP codes x0B and x0C.", 
            "title": "Asus VE247"
        }, 
        {
            "location": "/monitor_notes/#asus-rog-pg279q", 
            "text": "VCP version:  2.2  \nController Manufacturer:   manufacturer defined controller  \nController Model:    \nFirmware version: 5.57  \nMaufacture year:  2017  Does not support VCP codes x0B and X0C.   Does not support feature x60 - Input Source  Does not respond to getvcp of unsupported VCP codes by setting the unsupported feature flag in the GETVCP\nresponse. Requests for unsupported features fail by exceeding retries.", 
            "title": "Asus ROG PG279Q"
        }, 
        {
            "location": "/monitor_notes/#benq-xl2411z", 
            "text": "VCP version:  2.2 \nController Manufacturer: Mstar \nController Model: mh=x00 mh=x00, ml-x85, sh=x56 \nFirmware version: 2.1  \nManufacture year: 2013  Feature x0B: Color temperature increment:  50 deg Kelvin \nFeature x0C: Color temperature request: 0 \nCaclculated color temperature = 3000 + (0*50) = 3000 deg Kelvin  (nonsensical)    Responds to VCP feature x60 (Input Source) even though this is not documented in the capabilities string.", 
            "title": "BenQ XL2411Z"
        }, 
        {
            "location": "/monitor_notes/#dell-p2411", 
            "text": "VCP version: 2.1  \nController Manufacturer: Mstar \nController Model: mh=x00, ml=x00, sh=x56  \nFirmware version:       1.1 \nManufacture year:       2011  Lots of I2C errors.  Heavily dependant on retries.  The CAPABILITIES command sometimes fails, even with maximum retries. \nMore recently, works with nouveau driver, but fails with proprietary Nvidia driver.   Reports VCP code 0B (color temperature increment) as 1 degree Kelvin, which makes the GETVCP response to VCP code 0C (color temperature\nrequest) nonsensical.", 
            "title": "Dell P2411"
        }, 
        {
            "location": "/monitor_notes/#dell-p2715q", 
            "text": "VCP version: 2.1\nController Manufacturer: Mstar (sl=x05)\nController Model: mh=x00, ml=x00,x sh=x56  \nFirmware version:       2.1\nManufacture year:       2015  Feature x0B, Color temperature increment:   unsupported \nFeature x0C, Color temperature request:     unsupported  very clean, no  DDC retries needed", 
            "title": "Dell P2715Q"
        }, 
        {
            "location": "/monitor_notes/#dell-ultrasharp-1905fp", 
            "text": "Does not support DDC.", 
            "title": "Dell Ultrasharp 1905FP"
        }, 
        {
            "location": "/monitor_notes/#dell-ultrasharp-u2413", 
            "text": "VCP version:   2.1\nController Manufacturer:  STMicroelectronics (sl=x0d) \nController Model:  mh=x00, ml=x93, sh=x01 \nFirmware version:  2.1 \nManufacture year:  2013  This monitor has a hardware LUT, however LUT loading not supported using standard VCP feature codes.  Responds to VCP feature xc0 (Display Usage Time), but returns 0.  Color temperature: \n  color temp increment (feature 0B):  unsupported\n  color temp request (feature 0C):    unsupported", 
            "title": "Dell Ultrasharp U2413"
        }, 
        {
            "location": "/monitor_notes/#dell-u3011", 
            "text": "VCP version: 2.1  \nController manufacturer:  Mstar  \nController Model: mh=x00, ml=x94, sh=x85    \nFirmware version: 1.5  \nManufacture year: 2012    If a value is set using SETVCP, the new value takes effect and appears in the on-screen display.   However, GETVCP sometimes still retieves the old value, not the new one.  Reports VCP code x0B (color temperature increment) as 1 degree Kelvin, which makes the GETVCP response to\nVCP code x0C (color temperature request) nonsensical.  Color temperature: \n  color temp increment (feature 0B):  1 deg K \n  color temp request (feature 0C):    2\n  calculated color temp = 3000 + (x0c_val * x0b_val) = 3000  + (1 * 2) = 3002 degrees Kelvin", 
            "title": "Dell U3011"
        }, 
        {
            "location": "/monitor_notes/#dell-ultrasharp-u3415w", 
            "text": "VCP version: 2.1  \nController manufacturer:  Realtek (sl=x09)     \nController Model: mh=x00, ml=x11, sh=x11      \nFirmware version: 65.1    \nManufacture year: 2015    Neither feature 0B (color temperature increment) or 0C (color temperature request) are listed\nin the capabilities string.\nHowever, querying feature 0B does work.  Querying feature 0C fails.  Color temperature: \n  color temp increment (feature 0B):  100 deg K \n  color temp request (feature 0C):    query fails", 
            "title": "Dell Ultrasharp U3415W"
        }, 
        {
            "location": "/monitor_notes/#eizo-coloredge-cg19", 
            "text": "VCP version:  unreported  \nController manufacturer and model: unreported (VCP feature code C8 unsupported)  \nFirmware version: unreported (VCP feature code C9 unsupported)     Reports EDID at I2C bus address x50.  Does not support DDC over I2C (bus address x37).   Does implement MCCS over USB, and appears to conform to the USB Monitor Control Class Specification.\nHowever, it appears that the more sophisticated monitor features such as LUT loading use manufacturer\nspecific USB HID reports.   Unable to read EDID over USB, even though the HID Report for EDID can be located.  To set color related VCP feature values, Custom Color mode must be selected.   If set to sRGB or Calibrated, the SETVCP command\nwill appear to succeed, but will have no effect.  (In sRGB mode, Brightness can be set, in Calibrated mode it cannot.)", 
            "title": "Eizo Coloredge CG19"
        }, 
        {
            "location": "/monitor_notes/#gateway-diamondtron-vx920", 
            "text": "VCP version:  Unspecified, implies 1.0  \nController manufacturer and model:   Unknown (VCP feature code C8 unsupported)    \nFirmware version:  Unknown (VCP feature code C9 unsupported)", 
            "title": "Gateway Diamondtron VX920"
        }, 
        {
            "location": "/monitor_notes/#hanns-g-hi221d", 
            "text": "VCP version:  2.1  \nController manufacturer:  Mstar  \nController model:   mh=x00, ml=x92, sh=x00  \nFirmware version:  0.6    All GETVCP requests return a value, whether or not the feature is valid for the monitor.   The monitor never reports a feature as unsupported.", 
            "title": "Hanns G Hi221D"
        }, 
        {
            "location": "/monitor_notes/#hp-lp1965", 
            "text": "VCP version:   2.0 \nController manufacturer:  Undocumented value:  x64 \nController model:   mh=xff, ml=xff, sh=x86 \nFirmware version: 0.3 \nManufacture year: 2007  Capabilities reports non-standard DDC command x4E.  Color temperature: \n  color temp increment (feature 0B):  50 deg K \n  color temp request (feature 0C):    70 \n  calculated color temp = 3000 + (x0c_val * x0b_val) = 3000  + (70 * 50) = 6500 degrees Kelvin", 
            "title": "HP LP1965"
        }, 
        {
            "location": "/monitor_notes/#hp-lp2475w", 
            "text": "VCP version:  2.1 \nController manufacturer: Genesis \nController model:  mh=xff   ml=xff  sh=x80\nFirmware version: 0.31 \nManufacture year: 2008    Color temperature: \n  color temp increment (feature 0B):  3000 deg K \n  color temp request (feature 0C):    1 \n  calculated color temp = 3000 + (x0c_val * x0b_val) = 3000  + (1 * 3000) = 6000 degrees Kelvin  LUT loading not supported using standard VCP feature codes.  Implements MCCS over USB as well as I2C.   However, the USB implementation appears to be non-standard.  It does not conform to the USB Monitor Control Class Specification.", 
            "title": "HP LP2475w"
        }, 
        {
            "location": "/monitor_notes/#hp-lp2480zx", 
            "text": "VCP version:   2.1  \nController manufacturer:  Genesis  \nController Model: mh=xff, ml=xff, sh=x80  \nFirmware version:      0.139 \nManufacture year:      2008    Heavily reliant on manufacturer specific VCP codes.  Most color related features, including loading the internal LUT, are not supported using\nstandard VCP feature codes.  Implements MCCS over USB as well as I2C.   However, the USB implementation appears to be non-standard.  It does not conform to the USB Monitor Control Class Specification.   Sensible reponses to VCP codes 0B and 0C.   Capabilities string does not match actual capabilities observed.  For example, capaibilites does not include VCP feature code x10, brightness, which is recognized by getvcp and setvcp.  Values in capabilities string for feature 60 is a mixture of hex and decimal values, i.e.    01 02 03 04 05 07 0C 13 14 15 17 1C  Should be:   01 02 03 04 05 07 0C 0D 0E 0F 11 ??  Capabilities string does include cmds() segment listing supported commands, or model() segment listing model.", 
            "title": "HP LP2480zx"
        }, 
        {
            "location": "/monitor_notes/#hp-w2207", 
            "text": "VCP Version:  2.1 \nController manufacturer:  Mstar \nFirmware Version:          3.5 \nManufacture year:         2007    Color temperature increment (feature x0B) and request (feature x0C) result in a color temperature of 13,000 degress Kelvin  Responds with data to all VCP feature requests, never reports a feature as unsupported", 
            "title": "HP w2207"
        }, 
        {
            "location": "/monitor_notes/#hp-zr2740w", 
            "text": "VCP version:  2.2    Implements only a few VCP codes.   VCP feature codes 0B and 0C unsupported.", 
            "title": "HP ZR2740w"
        }, 
        {
            "location": "/monitor_notes/#iilyama-pl2779q", 
            "text": "VCP Version:    2.1 \nController manufacturer:   unknown (feature code xC8 unsupported) \nFirmware version:          unknown (feature code xC9 unsupported) \nManufacture year:          2013    Color temperature increment (feature x0B) and request (feature x0C) result in a color temperature of 26,100 degress Kelvin  Does not include command x02 (VCP Response) or xE3 (Capabilities Reply) in its capabilities string, even though these are supported.  Responds to several VCP feature not listed in capabilities", 
            "title": "Iilyama PL2779Q"
        }, 
        {
            "location": "/monitor_notes/#lg-ultrawide", 
            "text": "VCP version:  2.1  \nController manufacturer and model:  STK \nFirmware version:  0.1 \nManufacture year:  2014    Feature codes are not separated by blanks in the vcp() section of the capabilities string.  No serial number in the EDID.  When responding to a Get VCP Feature request, the monitor never sets sets the Result Code field of the VCP Feature Reply to Unsupported VCP Code.\nInstead, it always reports No Error. \nFor unsupported VCP codes, all bytes in the response (MH, ML, SH, SL) are set to x00.", 
            "title": "LG Ultrawide"
        }, 
        {
            "location": "/monitor_notes/#nec-lcd3090wqxi", 
            "text": "VCP Version 2.0 \nController manufacturer and model: unreported (VCP feature code C8 unsupported) \nFirmware version: unreported (VCP feature code C9 unsupported)", 
            "title": "NEC LCD3090WQXi"
        }, 
        {
            "location": "/monitor_notes/#nec-pa241", 
            "text": "VCP Version 2.0 \nController manufacturer and model: unreported (VCP feature code C8 unsupported) \nFirmware version: unreported (VCP feature code C9 unsupported)     Implements both I2C and USB interfaces.    Makes heavy use of manufacturer specific VCP feature codes.  Also, ddcutil capabilities --verbose reports numerous manufacturer\nspecific DDC commands  The USB interface also makes heavy use of manufacturer specific usage codes.  Monitor must be set to ??? to allow changes.   VCP code x0c (Color Temperature Request) returns 0, which is nonsensical.   Does not use the usual VCP codes (.e.g. x16/Red Gain) for color control.\nInstead uses the 6 axis color control features x8c..xa0.", 
            "title": "NEC PA241"
        }, 
        {
            "location": "/monitor_notes/#phillips-bdm3270", 
            "text": "VCP Version: 2.2\nController manufacturer:  Novatek, model info: mh=xff, ml=xff, sh=x00\nFirmware version:  1.0\nManufature year:  2016  Color temperature increment (VCP code x0B) = 50 degrees Kelvin (sensible) \nColor temperature request (VCP code x0C) yields a calculated color temperator of 3000+(70*50) = 6500 degrees Kelvin", 
            "title": "Phillips BDM3270"
        }, 
        {
            "location": "/monitor_notes/#phillips-bdm4037u", 
            "text": "VCP Version:  2.2 \nController manufacturer:  Realtek (sl=x09), Controller model: mh=x00, ml=x00, sh=x00 \nFirmware version 0.1 \nManufacture year:  2016    color temp increment (feature 0B):  100 deg K  \n  color temp request (feature 0C):    70 -  3000+(70*100) = 10000 deg K  DDC communication clean, no need for retries", 
            "title": "Phillips BDM4037U"
        }, 
        {
            "location": "/monitor_notes/#samsung-s32d850", 
            "text": "Manufacture year:  2015 \nVCP Version: 2.0\nController manufacturer:  Mstar, controller number: mh=x00, ml=x10, sh=x00\nFirmware version:         0.1  Capabilites request returns a 0 length string.  Features x0B and X0C are unsupported.  Cannot calculate color temperature.  Has no serial number in EDID", 
            "title": "Samsung S32D850"
        }, 
        {
            "location": "/monitor_notes/#samsung-syncmaster-213t", 
            "text": "Does not support DDC.", 
            "title": "Samsung Syncmaster 213T"
        }, 
        {
            "location": "/monitor_notes/#samsung-syncmaster-730b", 
            "text": "VCP version:   Unspecified, implies 1.0  \nController manufacturer and model:   Unknown (VCP feature code C8 unsupported)    \nFirmware version:  Unknown (VCP feature code C9 unsupported)    The capabilities string spcifies the values for non-continuous features in decimal rather than hexadecimal  VCP feature codes 0B and 0C unsupported.", 
            "title": "Samsung Syncmaster 730B"
        }, 
        {
            "location": "/ddc_null_response/", 
            "text": "DDC Null Message\n\n\nPer section 6.4 of the Display Data Channel Command Interface Standard, Version 1.1, October 29, 2004:\n\n\n\n\nA DDC NULL message from display to host is used in the following cases:\n\n- To detect that the display is DDC/CI capable (by reading it at 0x6Fh I2C slave address)\n\n- To tell the host that the display does not have any answer to give the host (not ready or not expected)\n\n- The \"Enable Application Report\" has not been sent before using Application Messages\n\n\n\n\nThe second bullet point causes ambiguity:  \n\n\n\n\nIn the context of a getting a VCP value or reading the capabilities string, a Null Message \nnormally indicates that the display is not ready to process a DDC message.  The proper response in \nthis case is to sleep for an extended period and retry.   \n\n\nSome monitors use the Null Message to indicate an \nunsupported feature, instead of returning a normal response with the Unsupported Feature bit set.\nThe proper response in this case is to not retry.  \n\n\n\n\nHowever, it is still possible\nthat a monitor that users the Null Message to indicate an unsupported feature also on occasion uses\nthe Null Message to indicate an error.  The unfortunate consequence is that multiple retries will occur in cases where the Null Message is used to indicate VCP value not found, slowing down operation for those monitors.\n\n\nDDC attempts to read VCP feature 0x00, which never exists, during the monitor detection phase to determine if a monitor uses the Null Message to indicated unsupported.  This is used to control whether \na persistent Null Message response is interpreted by higher levels of \nddcutil\n as an error or \nunsupported feature indication.", 
            "title": "DDC Null Message"
        }, 
        {
            "location": "/ddc_null_response/#ddc-null-message", 
            "text": "Per section 6.4 of the Display Data Channel Command Interface Standard, Version 1.1, October 29, 2004:   A DDC NULL message from display to host is used in the following cases: \n- To detect that the display is DDC/CI capable (by reading it at 0x6Fh I2C slave address) \n- To tell the host that the display does not have any answer to give the host (not ready or not expected) \n- The \"Enable Application Report\" has not been sent before using Application Messages   The second bullet point causes ambiguity:     In the context of a getting a VCP value or reading the capabilities string, a Null Message \nnormally indicates that the display is not ready to process a DDC message.  The proper response in \nthis case is to sleep for an extended period and retry.     Some monitors use the Null Message to indicate an \nunsupported feature, instead of returning a normal response with the Unsupported Feature bit set.\nThe proper response in this case is to not retry.     However, it is still possible\nthat a monitor that users the Null Message to indicate an unsupported feature also on occasion uses\nthe Null Message to indicate an error.  The unfortunate consequence is that multiple retries will occur in cases where the Null Message is used to indicate VCP value not found, slowing down operation for those monitors.  DDC attempts to read VCP feature 0x00, which never exists, during the monitor detection phase to determine if a monitor uses the Null Message to indicated unsupported.  This is used to control whether \na persistent Null Message response is interpreted by higher levels of  ddcutil  as an error or \nunsupported feature indication.", 
            "title": "DDC Null Message"
        }, 
        {
            "location": "/api_main/", 
            "text": "C API\n\n\nSee also: \n\n- \nC API Changes for Release 9.0\n\n- \nPython API\n \n\n\nIf you are using the API, please contact \nddcutil\n's author (rockowitz@minsoft.com\n), both because \nyour input on the API would be helpful and also so I can alert you of upcoming changes. \n\n\nNaming\n\n\nSymbol names begin with \"ddca_\" or \"DDCA_\" (for \nDDC\nutil \nA\npi).\n\n\nInstallation\n\n\nHeader files are located in the src/public directory.\nThey are normally installed to /usr/include or /usr/local/include. \n\n\n\n\n\n\n\n\nHeader File Name\n\n\nContains\n\n\n\n\n\n\n\n\n\n\nddcutil_types.h\n\n\ntypedefs, structs, enums, etc.\n\n\n\n\n\n\nddcutil_c_api.h\n\n\nAPI functions\n\n\n\n\n\n\nddcutil_status_codes.h\n\n\nddcutil\n specific status codes\n\n\n\n\n\n\nddcutil_macros.h\n\n\nmacros to specify \nddcutil\n version at compile time\n\n\n\n\n\n\n\n\nThe API is exposed using shared library libddcutil.so.  The API is subject to change, and will not \nbe SONAME versioned until release 1.0.  Note that the command line version of \nddcutil\n\ndoes not itself use the shared library, but instead links all services statically.\n\n\nInstallation (make install, package install) installs a Package Config file (ddcutil.pc). \n\n\nInstallation also saves a cmake file (FindDDCUtil.cmake) in directory /usr/share/ddcutil/data \n(or /usr/local/share/ddcutil/data if appropriate).  To use this file, copy it to \n/usr/share/cmake/Modules.\n\n\nconfigure\n options relating to the C API:  \n\n\n\n\n\n\n\n\nOption\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\n--enable-lib\n\n\nBuild shared library. Required for the C API\n\n\n\n\n\n\n\n\nDocumentation\n\n\nC API documentation:\n\n- The header files contain extensive documentation. \n\n- Doxygen documentation can be generated (if Doxygen is installed) using scripts in the doxydoc directory.\n However, I think you'll find  the comments in the header files and sample code easier to use.\n\n\nSample programs are found in directory src/sample_programs:\n\n\n\n\n\n\n\n\nSource file\n\n\nContents\n\n\n\n\n\n\n\n\n\n\ndemo_capabilities.c\n\n\nQuery monitor capabilities string\n\n\n\n\n\n\ndemo_display_selection.c\n\n\nSelect display\n\n\n\n\n\n\ndemo_feature_list.c\n\n\nUsing DDCA_Feature_List\n\n\n\n\n\n\ndemo_get_set_vcp.c\n\n\nRead and write VCP feature values\n\n\n\n\n\n\ndemo_global_settings.c\n\n\nQuery and change global settings\n\n\n\n\n\n\ndemo_profile_features.c\n\n\nSave and restore color profile related features\n\n\n\n\n\n\ndemo_redirection.c\n\n\nCapture program output\n\n\n\n\n\n\ndemo_vcpinfo.c\n\n\nQuery VCP feature metadata\n\n\n\n\n\n\n\n\nTo build the sample client programs, issue the command \nmake check\n.", 
            "title": "C API"
        }, 
        {
            "location": "/api_main/#c-api", 
            "text": "See also:  \n-  C API Changes for Release 9.0 \n-  Python API    If you are using the API, please contact  ddcutil 's author (rockowitz@minsoft.com ), both because \nyour input on the API would be helpful and also so I can alert you of upcoming changes.", 
            "title": "C API"
        }, 
        {
            "location": "/api_main/#naming", 
            "text": "Symbol names begin with \"ddca_\" or \"DDCA_\" (for  DDC util  A pi).", 
            "title": "Naming"
        }, 
        {
            "location": "/api_main/#installation", 
            "text": "Header files are located in the src/public directory.\nThey are normally installed to /usr/include or /usr/local/include.      Header File Name  Contains      ddcutil_types.h  typedefs, structs, enums, etc.    ddcutil_c_api.h  API functions    ddcutil_status_codes.h  ddcutil  specific status codes    ddcutil_macros.h  macros to specify  ddcutil  version at compile time     The API is exposed using shared library libddcutil.so.  The API is subject to change, and will not \nbe SONAME versioned until release 1.0.  Note that the command line version of  ddcutil \ndoes not itself use the shared library, but instead links all services statically.  Installation (make install, package install) installs a Package Config file (ddcutil.pc).   Installation also saves a cmake file (FindDDCUtil.cmake) in directory /usr/share/ddcutil/data \n(or /usr/local/share/ddcutil/data if appropriate).  To use this file, copy it to \n/usr/share/cmake/Modules.  configure  options relating to the C API:       Option  Function      --enable-lib  Build shared library. Required for the C API", 
            "title": "Installation"
        }, 
        {
            "location": "/api_main/#documentation", 
            "text": "C API documentation: \n- The header files contain extensive documentation.  \n- Doxygen documentation can be generated (if Doxygen is installed) using scripts in the doxydoc directory.\n However, I think you'll find  the comments in the header files and sample code easier to use.  Sample programs are found in directory src/sample_programs:     Source file  Contents      demo_capabilities.c  Query monitor capabilities string    demo_display_selection.c  Select display    demo_feature_list.c  Using DDCA_Feature_List    demo_get_set_vcp.c  Read and write VCP feature values    demo_global_settings.c  Query and change global settings    demo_profile_features.c  Save and restore color profile related features    demo_redirection.c  Capture program output    demo_vcpinfo.c  Query VCP feature metadata     To build the sample client programs, issue the command  make check .", 
            "title": "Documentation"
        }, 
        {
            "location": "/c_api_90/", 
            "text": "C API Changes for Release 0.9.0\n\n\nSee also: \n\n- \nMain C API Page\n\n- \nPython API\n \n\n\nThe C API has been extensively revised reflecting experience gained from work on a Qt C++ GUI interface.\n\n\nNew header files:   \n\n\n\n\n\n\n\n\nFile Name\n\n\nContents\n\n\n\n\n\n\n\n\n\n\nddcutil_macros.h\n\n\nMacros to specify the \nddcutil\n version at compile time\n\n\n\n\n\n\nddcutil_status_codes.h\n\n\nStatus codes defined by \nddcutil\n\n\n\n\n\n\n\n\nMultithreading\n\n\nThere is rudiementary support for multi-threaded use of the API.\n\n\nConsiderations:\n\n\n\n\nIt is safe to perform simultaneous operations on separate displays (using distinct display handles) on separate threads.   \n\n\nMultiple simultaneous DDC operations on the same display will have unpredictable results.  \n\n\nDo not open multiple handles for the same display. \n\nThe \nddcutil\n API prevents opening multiple handles for devices with the same DDCA_IO_Path, \nwhich blocks the most common case.  However, it is conceivable that the same monitor might be \nconnected in multiple ways (e.g. with both a DDC and USB connection), with multiple cards, \nor even from separate computers.   In this case it is the application's or even user's responsibility\nto ensure that conflict does not occur.   \n\n\nThe following settings are now thread specific: \n\n\nwhether \nsetvcp\n verification is enabled (\nddca_enable_verify()\n, \nddca_is_verify_enabled()\n)\n\n\noutput redirection (\nddca_set_fout()\n, etc.)\n\n\noutput level (\nddca_set_output_level()\n, \nddca_get_output_level()\n)\n\n\n\n\n\n\n\n\nPresently, multi-threaded operation is best managed in the application. \nThe C++ Qt based GUI currently under development does the following: \n\n- Calls \nddca_get_display_info_list()\n to enumerate the displays\n\n    - Opens the display (i.e. creates a \nDDCA_Display_Handle\n)\n\n    - Maintains a queue of requests \n\n    - Calls the ddcutil API for each request, and updates the GUI accordingly \n\n\nLibrary Build Information\n\n\nNo changes.\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_ddcutil_version()\n\n\n\n\n\n\n\n\nddca_ddcutil_version_string()\n\n\n\n\n\n\n\n\nddca_build_options()\n\n\n\n\n\n\n\n\n\n\nStatus Code Functions\n\n\nNo changes.\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_rc_name()\n\n\n\n\n\n\n\n\nddca_rc_desc()\n\n\n\n\n\n\n\n\n\n\nDetailed Error Reports\n\n\nIn some cases, detailed error information is appopriate, particularly when there \nare multiple causes, each of which should be reported.  The following functions \nget and release detailed error reports for the most recent API call. \n\n\nCurrently implemented only for \nddca_set_profile_releated_values()\n, reports \neach case of invalid data in the input and the line at which it occurred.\n\n\n\n\n\n\n\n\nNew\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_error_detail()\n\n\nGet detailed error information for most recent API call\n\n\n\n\n\n\nddca_free_error_detai()\n\n\nFree detailed error information\n\n\n\n\n\n\n\n\nGlobal Settings\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_max_max_tries()\n\n\n\n\n\n\n\n\nddca_get_max_tries()\n\n\n\n\n\n\n\n\nddca_set_max_tries()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_enable_verify()\n\n\nnow thread-specific setting, returns prior value\n\n\n\n\n\n\nddca_is_verify_enabled()\n\n\nnow thread-specific setting\n\n\n\n\n\n\n\n\nOutput Redirection and Capture\n\n\nOutput redirection is now thread-specific.\n\n\n\n\n\n\n\n\nChanged Functions\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_set_fout()\n\n\nnow thread-specific\n\n\n\n\n\n\nddca_set_fout_to_default()\n\n\nnow thread-specific\n\n\n\n\n\n\nddca_set_ferr()\n\n\nnow thread-specific\n\n\n\n\n\n\nddca_set_ferr_to_default()\n\n\nnow thread-specific\n\n\n\n\n\n\n\n\nAdded convenience functions to capture output normally directed to the terminal. \nOutput capture is thread specific.\n\n\n\n\n\n\n\n\nNew\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_start_capture()\n\n\nBegin capturing output\n\n\n\n\n\n\nddca_end_capture()\n\n\nTerminates capture, returns the captured value\n\n\n\n\n\n\n\n\nFor examples of output redirection, see sample program \ndemo_redirection.c\n. \n\n\nMessage Control\n\n\nOutput level settings are now thread-specific.\n\n\n\n\n\n\n\n\nChanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_output_level()\n\n\nnow thread-specific\n\n\n\n\n\n\nddca_set_output_level()\n\n\nnow thread-specific, returns old level\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_output_level_name()\n\n\n\n\n\n\n\n\n\n\nStatistics and Diagnostics\n\n\nStatistics and diagnostics control are global, not thread-specific.\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_reset_stats()\n\n\n\n\n\n\n\n\nddca_show_stats()\n\n\n\n\n\n\n\n\nddca_is_report_ddc_errors_enabled()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_enable_report_ddc_errors()\n\n\nreturns old level\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_enable_error_info()\n\n\ncontrol display of internal exception reports\n\n\n\n\n\n\n\n\nFeature Lists\n\n\nStruct \nDDCA_Feature_List\n specifies a set of VCP feature codes using a 256 bit array.\n\n\nFunctions and constants for operating on feature lists:\n\n\n\n\n\n\n\n\nNew\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_feature_list_add()\n\n\nadd a VCP feature code to the list\n\n\n\n\n\n\nddca_feature_list_and()\n\n\nreturns intersection of 2 lists\n\n\n\n\n\n\nddca_feature_list_and_not()\n\n\nreturns the features in one list that are not in a second\n\n\n\n\n\n\nddca_feature_list_clear()\n\n\nclear all entries in the feature list\n\n\n\n\n\n\nddca_feature_list_contains()\n\n\ncheck if a VCP feature code is in the list\n\n\n\n\n\n\nddca_feature_list_count()\n\n\nnumber of features in list\n\n\n\n\n\n\nddca_feature_list_id_name()\n\n\nget symbolic name of feature list id\n\n\n\n\n\n\nddca_feature_list_or()\n\n\nreturns union of 2 feature lists\n\n\n\n\n\n\nddca_feature_list_string()\n\n\nreturns a string representation of a feature list\n\n\n\n\n\n\nddca_get_feature_list_by_dref()\n\n\nreturns a feature list identifying the features in named feature set (e.g. COLOR)\n\n\n\n\n\n\nDDCA_EMPTY_FEATURE_LIST\n\n\nan empty feature list\n\n\n\n\n\n\n\n\nFor an example of using feature lists, see sample program \ndemo_feature_list.c\n.\n\n\nMCCS Version Identification\n\n\nTo date, the API has had two different ways to specify the Monitor Control Command Set (MCCS) version:\n\n- \nDDCA_MCCS_Version_Spec\n,  a pair of 8 bit unsigned integers.\n\n- \nDDCA_MCCS_Version_Id\n, an enum of valid MCCS versions.\n\n\nGoing forward, the API will use \nDDCA_MCCS_Version_Spec\n.  Existing functions using\n\nDDCA_MCCS_Version_Id\n are retained, but are marked as deprecated and will be\nremoved in a future release.  Once the deprecated functions are removed, there\nwill likely be some simplification of the remaining function names.\n\n\nSymbolic constants \nDDCA_VSPEC_V10\n etc. have been added for \nDDCA_MCCS_Version_Spec\n values. \n\n\n\n\n\n\n\n\nDeprecated\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nDDCA_MCCS_Version_Id\n\n\nMCCS version enum\n\n\n\n\n\n\nddca_mccs_version_id_name()\n\n\n\n\n\n\n\n\nddca_mccs_version_id_desc()\n\n\n\n\n\n\n\n\nddca_get_mccs_version_id()\n\n\nGet MCCS version id for display handle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_mccs_version()\n\n\ntakes DDCA_Display_Handle argument\n\n\n\n\n\n\n\n\nBackground:\n\n\nEach way to specify the MCCS version has its advantages.  \nDDCA_MCCS_Version_Spec\n was chosen because\nit is the form already used in the MCCS spec.\n\n\nDDCA_MCCS_Version_Spec\n\n- Feature code xDF (get MCCS version) returns a number pair\n\n- The capabilities string specifies the MCCS version as a number pair\n\n\nDDCA_MCCS_Version_Id\n\n- There are only a handful of valid version numbers\n\n- Simplifies version specification\n\n- Simplifies version comparisons, which are complicated by the fact\n\nthat both Version 3.0 and Version 2.2 are independent successors to Version 2.1. \n\n\nDetect Displays\n\n\n\n\nddca_display_info_list2()\n replaces \nddca_display_info_list()\n, allows for including displays that don't support DDC, \n  signature returns a status code, conforming to standard API pattern\n\n\nddca_report_displays()\n replaces \nddca_report_active_displays\n, added parm to allow for reporting invalid displays\n\n\nStruct \nDDCA_Display_Info\n now has a field for the MCCS version.  \n\n\n\n\n\n\n\n\n\n\nDeprecated\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_display_info_list()\n\n\nUse ddca_get_display_info_list2()\n\n\n\n\n\n\nddca_report_active_displays()\n\n\nUse ddca_report_displays()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_report_display_info()\n\n\n\n\n\n\n\n\nddca_report_display_info_list()\n\n\n\n\n\n\n\n\nddca_free_display_info_list()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_display_info_list2()\n\n\nCan include displays that don't support DDC\n\n\n\n\n\n\nddca_report_display_by_dref()\n\n\nReport display information using code in \nddcutil detect\n\n\n\n\n\n\nddca_report_displays()\n\n\nOptionally include displays that don't support DDC\n\n\n\n\n\n\n\n\nDisplay Identifiers\n\n\nNo changes. \n\n\n\n\n\n\n\n\nUnchanged Functions\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_create_dispno_display_identifier()\n\n\n\n\n\n\n\n\nddca_create_busno_display_identifier()\n\n\n\n\n\n\n\n\nddca_create_adlno_display_identifier()\n\n\n\n\n\n\n\n\nddca_create_mfg_model_sn_display_identifier()\n\n\n\n\n\n\n\n\nddca_create_edid_display_identifier()\n\n\n\n\n\n\n\n\nddca_create_usb_display_identifier()\n\n\n\n\n\n\n\n\nddca_create_usb_hiddev_display_identifier()\n\n\n\n\n\n\n\n\nddca_free_display_identifier()\n\n\n\n\n\n\n\n\nddca_did_repr()\n\n\n\n\n\n\n\n\n\n\nDisplay References\n\n\n\n\n\n\n\n\nDeprecated\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_edid_by_dref()\n\n\nrenamed, was ddca_get_edid_by_display_reference()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_create_display_ref()\n\n\n\n\n\n\n\n\nddca_free_display_ref()\n\n\n\n\n\n\n\n\nddca_dref_repr()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_dbgrpt_display_ref()\n\n\nrenamed, was ddca_report_display_ref()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_report_display_by_dref()\n\n\n\n\n\n\n\n\n\n\nDisplay Handles\n\n\n\n\n\n\n\n\nDeprecated API Functions\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_open_display()\n\n\nUse ddca_open_display2()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_close_display()\n\n\n\n\n\n\n\n\nddca_dh_repr()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_open_display2()\n\n\nallows for waiting if display locked by another thread\n\n\n\n\n\n\nddca_display_ref_from_handle()\n\n\n\n\n\n\n\n\n\n\nCapabilities String\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_capabilities_string()\n\n\n\n\n\n\n\n\nddca_parse_capabilities_string()\n\n\n\n\n\n\n\n\nddca_free_parsed_capabilities()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_report_parsed_capabilities()\n\n\ninterprets feature and value codes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_feature_list_from_capabilities()\n\n\nCreate feature id bitifield from capabilities\n\n\n\n\n\n\n\n\nFeature Metadata\n\n\nStruct \nDDCA_Version_Feature_Info\n and related functions are deprecated.  Instead, the master \nrecord for feature metadata is now \nDDCA_Feature_Metadata\n.  \n\n\n\n\n\n\n\n\nDeprecated and Deleted\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n\n\nDDCA_Version_Feature_Info\n\n\nuse DDCA_Feature_Metadata\n\n\n\n\n\n\n\n\nddca_get_feature_info_by_vcp_version()\n\n\nUse ddca_get_feature_metadata()  - in 0.8.7\n\n\n\n\n\n\n\n\nddca_get_feature_info_by_display()\n\n\nUse ddca_get_feature_metadata()\n\n\n\n\n\n\n\n\nddca_free_feature_info()\n\n\nin 0.8.7?\n\n\n\n\n\n\n\n\nddca_get_simple_sl_value_table()\n\n\nTakes a DDCA_MCCS_Version_Id argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_feature_name()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdded Structs and Functions\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nDDCA_Feature_Metadata\n\n\nreplaces DDCA_Version_Feature_Info\n\n\n\n\n\n\nddca_get_feature_metadata_by_dref()\n\n\n\n\n\n\n\n\nddca_get_feature_metadata_by_dh()\n\n\n\n\n\n\n\n\nddca_free_feature_metadata_contents()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdditional new granular functions\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_feature_name_by_dref()\n\n\n\n\n\n\n\n\nddca_get_simple_sl_value_table_by_dref()\n\n\nGets table of valid values if flag \nDDCA_SIMPLE_NC\n is set in \nDDCA_Feature_Flags\n.\n\n\n\n\n\n\n\n\nMiscellaneous changes:\n\n- Bitfield \nDDCA_Version_Feature_Flags\n now has bit \nDDCA_NC_COMPLEX\n, indicating a VCP code\n(designated by MCCS as Non-Continuous) that uses certain values as an NC feature and uses the \nremaining range for continyous adjustment. An example of such a feature is VCP code x62 (Audio Speaker Volume)\nas defined in MCCS versions 3.0 and 2.2, where value x00 is defined as \"Fixed (default level)\", value xFF is \"Mute\", \nand values x01..xFE provide a continuous range for volume adjustment. \n\n\nNC Feature Value Lookup\n\n\n(See Metadata section for discussion of getting lookup tables)\n\n\n\n\n\n\n\n\nDeprecated and Deleted Functions\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_simple_nc_feature_value_name()\n\n\nGet feature metadata, then use ddca_get_simple_nc_feature_name_by_table()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_simple_nc_feature_value_name_by_table()\n\n\nnew\n\n\n\n\n\n\n\n\n|ddca_get_simple_nc_feature_value_name_by_display() | new, or deprecated??  check |\n\n\nSymbol Name Changes\n\n\nNumerous symbols have been renamed for clarity and consistency.\nGeneral changes:\n\n- The names of report functions that display internal data structures for debugging, as opposed to reports\ndesigned to be shown to users, now begin with \"ddca_dbgrpt_\" instead of \"ddca_report_\". \n\n- Enum values \nDDCA_V10\n etc. are now \nDDCA_MCCS_V10\n etc. (but note that the use of \nDDCA_MCCS_Version_Id\n is deprecated \nin favor of \nDDCA_MCCS_Version_Spec\n)\n\n- Names of parameters that specify the address at which a pointer is to be returned now generally end in \"_loc\".\n\n\nSpecific changes not listed elsewhere: \n\n\n\n\n\n\n\n\nOld Name\n\n\nNew Name\n\n\n\n\n\n\n\n\n\n\nDDCA_IO_DEVI2C\n\n\nDDCA_IO_I2C\n\n\n\n\n\n\n\n\nNaming patterns: \n\n- Functions that always return the same value generally do not include \"\n_get_\n\" in their names,\ne.g. \nddca_ddcutil_version()\n, \nddca_max_max_tries()\n \n\n- In the case of \"overloaded\" functions, \"\n_by_\n\" is usually used to distinguish variants,\ne.g. \nddca_get_feature_metadata_by_vspec()\n, \nddca_get_feature_metadata_by_dref()\n, \nget_feature_metadata_by_display()\n\n- However, in the case where there the result depends on a single input value from which the result\nis extracted, \"\n_from_\n\" is used,\ne.g. \nddca_mmk_from_dref()\n, \nddca_mmk_from_dh()\n \n\n\nGet and Set VCP Feature Values\n\n\nDDCA_Any_Vcp_Value\n vs \nDDCA_Non_Table_Vcp_Value\n\n\nThe API provides functions for getting, setting, and otherwise processing VCP values in 3 forms, \nusing the type specific \nDDCA_Non_Table_Vcp_Value\n or \nDDCA_Table_Vcp_Value\n or the more \ngeneral \nDDCA_Any_Vcp_Value\n.   The first form is simpler to use, and does not entail the \nallocation of arbitrarily size buffers. \n\n\nAs a practical matter, while the MCCS spec defines Table type features, they have not been observed\non any monitors.  Supporting Table type features in a UI adds complexity.\nAPI users will probably want to use the simpler \nDDCA_Non_Table_Vcp_Value\n functions.\n\n\nThe following tables summarize the structs and API functions for getting and setting VCP feature values.\n\n\n\n\n\n\n\n\nDeprecated and Deleted\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_set_simple_nc_vcp_value()\n\n\nunchanged, but deprecated\n\n\n\n\n\n\nddca_set_continuous_vcp_value()\n\n\nunchanged, but deprecated\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nDDCA_Non_Table_Vcp_Value\n\n\nrenamed, was DDCA_Non_Table_Value\n\n\n\n\n\n\nDDCA_Table_Vcp_Value\n\n\nrenamed, was DDCA_Table_Value\n\n\n\n\n\n\nddca_get_non_table_vcp_value()\n\n\nrenamed, was ddca_get_nontable_vcp_value()\n\n\n\n\n\n\nddca_get_any_vcp_value_using_explicit_type()\n\n\nrenamed, was ddca_get_any_vcp_value(), parm type change\n\n\n\n\n\n\nddca_set_non_table_vcp_value()\n\n\nrenamed, was ddca_set_raw_vcp_value()\n\n\n\n\n\n\nddca_get_table_vcp_value()\n\n\nparameter change\n\n\n\n\n\n\nddca_free_table_vcp_value()\n\n\nrenamed from ddca_free_table_value_response()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_any_vcp_value_using_implicit_type()\n\n\nnew function\n\n\n\n\n\n\nddca_set_table_vcp_value()\n\n\nnew\n\n\n\n\n\n\nddca_set_any_vcp_value()\n\n\nnew\n\n\n\n\n\n\nddca_free_any_vcp_value()\n\n\nnew\n\n\n\n\n\n\ndbgrpt_any_vcp_value()\n\n\nnew\n\n\n\n\n\n\n\n\nGet or Set Multiple Values\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_profile_related_values()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_set_profile_related_values()\n\n\nadd display handle parm\n\n\n\n\n\n\n\n\nif \nddca_set_profile_releated_values()\n returns \nDDCRC_BAD_DATA\n, \nddca_get_error_detail()\n \nreturns a detailed error report.\n\n\nFormat Feature Values\n\n\nFunctions \nddca_format_table_vcp_value()\n, \nddca_format_non_table_vcp_value()\n, and \nddca_format_any_vcp_value()\n \nformat a feature value, based on its feature code and MCCS version.  \n\n\nFunction \nddca_get_formatted_vcp_value()\n continues to exist, but is essentially a convenience function\nthat combines reading a VCP value with formatting.\n\n\n\n\n\n\n\n\nUnchanged\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_get_formatted_vcp_value()\n\n\nunchanged\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nddca_format_non_table_vcp_value_by_dref()\n\n\nnew\n\n\n\n\n\n\nddca_format_table_vcp_value_by_dref()\n\n\nnew\n\n\n\n\n\n\nddca_format_any_vcp_value_by_dref()\n\n\nnew\n\n\n\n\n\n\n\n\nMiscellaneous Changes\n\n\n\n\nddca_enable_report_ddc_errors()\n, \nddca_enable_verify()\n, \nddca_set_output_level\n\nnow return the prior setting  \n\n\n\n\nSample programs\n\n\nSample programs have been revised to reflect API changes and new sample programs added.  See the main \nC API page\n.", 
            "title": "C API Changes for Release 9.0"
        }, 
        {
            "location": "/c_api_90/#c-api-changes-for-release-090", 
            "text": "See also:  \n-  Main C API Page \n-  Python API    The C API has been extensively revised reflecting experience gained from work on a Qt C++ GUI interface.  New header files:        File Name  Contents      ddcutil_macros.h  Macros to specify the  ddcutil  version at compile time    ddcutil_status_codes.h  Status codes defined by  ddcutil", 
            "title": "C API Changes for Release 0.9.0"
        }, 
        {
            "location": "/c_api_90/#multithreading", 
            "text": "There is rudiementary support for multi-threaded use of the API.  Considerations:   It is safe to perform simultaneous operations on separate displays (using distinct display handles) on separate threads.     Multiple simultaneous DDC operations on the same display will have unpredictable results.    Do not open multiple handles for the same display.  \nThe  ddcutil  API prevents opening multiple handles for devices with the same DDCA_IO_Path, \nwhich blocks the most common case.  However, it is conceivable that the same monitor might be \nconnected in multiple ways (e.g. with both a DDC and USB connection), with multiple cards, \nor even from separate computers.   In this case it is the application's or even user's responsibility\nto ensure that conflict does not occur.     The following settings are now thread specific:   whether  setvcp  verification is enabled ( ddca_enable_verify() ,  ddca_is_verify_enabled() )  output redirection ( ddca_set_fout() , etc.)  output level ( ddca_set_output_level() ,  ddca_get_output_level() )     Presently, multi-threaded operation is best managed in the application. \nThe C++ Qt based GUI currently under development does the following:  \n- Calls  ddca_get_display_info_list()  to enumerate the displays \n    - Opens the display (i.e. creates a  DDCA_Display_Handle ) \n    - Maintains a queue of requests  \n    - Calls the ddcutil API for each request, and updates the GUI accordingly", 
            "title": "Multithreading"
        }, 
        {
            "location": "/c_api_90/#library-build-information", 
            "text": "No changes.     Unchanged  Comments      ddca_ddcutil_version()     ddca_ddcutil_version_string()     ddca_build_options()", 
            "title": "Library Build Information"
        }, 
        {
            "location": "/c_api_90/#status-code-functions", 
            "text": "No changes.     Unchanged  Comments      ddca_rc_name()     ddca_rc_desc()", 
            "title": "Status Code Functions"
        }, 
        {
            "location": "/c_api_90/#detailed-error-reports", 
            "text": "In some cases, detailed error information is appopriate, particularly when there \nare multiple causes, each of which should be reported.  The following functions \nget and release detailed error reports for the most recent API call.   Currently implemented only for  ddca_set_profile_releated_values() , reports \neach case of invalid data in the input and the line at which it occurred.     New  Comments      ddca_get_error_detail()  Get detailed error information for most recent API call    ddca_free_error_detai()  Free detailed error information", 
            "title": "Detailed Error Reports"
        }, 
        {
            "location": "/c_api_90/#global-settings", 
            "text": "Unchanged  Comments      ddca_max_max_tries()     ddca_get_max_tries()     ddca_set_max_tries()         Changed  Comments      ddca_enable_verify()  now thread-specific setting, returns prior value    ddca_is_verify_enabled()  now thread-specific setting", 
            "title": "Global Settings"
        }, 
        {
            "location": "/c_api_90/#output-redirection-and-capture", 
            "text": "Output redirection is now thread-specific.     Changed Functions  Comments      ddca_set_fout()  now thread-specific    ddca_set_fout_to_default()  now thread-specific    ddca_set_ferr()  now thread-specific    ddca_set_ferr_to_default()  now thread-specific     Added convenience functions to capture output normally directed to the terminal. \nOutput capture is thread specific.     New  Comments      ddca_start_capture()  Begin capturing output    ddca_end_capture()  Terminates capture, returns the captured value     For examples of output redirection, see sample program  demo_redirection.c .", 
            "title": "Output Redirection and Capture"
        }, 
        {
            "location": "/c_api_90/#message-control", 
            "text": "Output level settings are now thread-specific.     Changed  Comments      ddca_get_output_level()  now thread-specific    ddca_set_output_level()  now thread-specific, returns old level        Unchanged  Comments      ddca_output_level_name()", 
            "title": "Message Control"
        }, 
        {
            "location": "/c_api_90/#statistics-and-diagnostics", 
            "text": "Statistics and diagnostics control are global, not thread-specific.     Unchanged  Comments      ddca_reset_stats()     ddca_show_stats()     ddca_is_report_ddc_errors_enabled()         Changed  Comments      ddca_enable_report_ddc_errors()  returns old level        New  Comments      ddca_enable_error_info()  control display of internal exception reports", 
            "title": "Statistics and Diagnostics"
        }, 
        {
            "location": "/c_api_90/#feature-lists", 
            "text": "Struct  DDCA_Feature_List  specifies a set of VCP feature codes using a 256 bit array.  Functions and constants for operating on feature lists:     New  Comments      ddca_feature_list_add()  add a VCP feature code to the list    ddca_feature_list_and()  returns intersection of 2 lists    ddca_feature_list_and_not()  returns the features in one list that are not in a second    ddca_feature_list_clear()  clear all entries in the feature list    ddca_feature_list_contains()  check if a VCP feature code is in the list    ddca_feature_list_count()  number of features in list    ddca_feature_list_id_name()  get symbolic name of feature list id    ddca_feature_list_or()  returns union of 2 feature lists    ddca_feature_list_string()  returns a string representation of a feature list    ddca_get_feature_list_by_dref()  returns a feature list identifying the features in named feature set (e.g. COLOR)    DDCA_EMPTY_FEATURE_LIST  an empty feature list     For an example of using feature lists, see sample program  demo_feature_list.c .", 
            "title": "Feature Lists"
        }, 
        {
            "location": "/c_api_90/#mccs-version-identification", 
            "text": "To date, the API has had two different ways to specify the Monitor Control Command Set (MCCS) version: \n-  DDCA_MCCS_Version_Spec ,  a pair of 8 bit unsigned integers. \n-  DDCA_MCCS_Version_Id , an enum of valid MCCS versions.  Going forward, the API will use  DDCA_MCCS_Version_Spec .  Existing functions using DDCA_MCCS_Version_Id  are retained, but are marked as deprecated and will be\nremoved in a future release.  Once the deprecated functions are removed, there\nwill likely be some simplification of the remaining function names.  Symbolic constants  DDCA_VSPEC_V10  etc. have been added for  DDCA_MCCS_Version_Spec  values.      Deprecated  Comments      DDCA_MCCS_Version_Id  MCCS version enum    ddca_mccs_version_id_name()     ddca_mccs_version_id_desc()     ddca_get_mccs_version_id()  Get MCCS version id for display handle        Unchanged  Comments      ddca_get_mccs_version()  takes DDCA_Display_Handle argument     Background:  Each way to specify the MCCS version has its advantages.   DDCA_MCCS_Version_Spec  was chosen because\nit is the form already used in the MCCS spec.  DDCA_MCCS_Version_Spec \n- Feature code xDF (get MCCS version) returns a number pair \n- The capabilities string specifies the MCCS version as a number pair  DDCA_MCCS_Version_Id \n- There are only a handful of valid version numbers \n- Simplifies version specification \n- Simplifies version comparisons, which are complicated by the fact \nthat both Version 3.0 and Version 2.2 are independent successors to Version 2.1.", 
            "title": "MCCS Version Identification"
        }, 
        {
            "location": "/c_api_90/#detect-displays", 
            "text": "ddca_display_info_list2()  replaces  ddca_display_info_list() , allows for including displays that don't support DDC, \n  signature returns a status code, conforming to standard API pattern  ddca_report_displays()  replaces  ddca_report_active_displays , added parm to allow for reporting invalid displays  Struct  DDCA_Display_Info  now has a field for the MCCS version.        Deprecated  Comments      ddca_get_display_info_list()  Use ddca_get_display_info_list2()    ddca_report_active_displays()  Use ddca_report_displays()        Unchanged  Comments      ddca_report_display_info()     ddca_report_display_info_list()     ddca_free_display_info_list()         New  Comments      ddca_get_display_info_list2()  Can include displays that don't support DDC    ddca_report_display_by_dref()  Report display information using code in  ddcutil detect    ddca_report_displays()  Optionally include displays that don't support DDC", 
            "title": "Detect Displays"
        }, 
        {
            "location": "/c_api_90/#display-identifiers", 
            "text": "No changes.      Unchanged Functions  Comments      ddca_create_dispno_display_identifier()     ddca_create_busno_display_identifier()     ddca_create_adlno_display_identifier()     ddca_create_mfg_model_sn_display_identifier()     ddca_create_edid_display_identifier()     ddca_create_usb_display_identifier()     ddca_create_usb_hiddev_display_identifier()     ddca_free_display_identifier()     ddca_did_repr()", 
            "title": "Display Identifiers"
        }, 
        {
            "location": "/c_api_90/#display-references", 
            "text": "Deprecated  Comments      ddca_get_edid_by_dref()  renamed, was ddca_get_edid_by_display_reference()        Unchanged  Comments      ddca_create_display_ref()     ddca_free_display_ref()     ddca_dref_repr()         Changed  Comments      ddca_dbgrpt_display_ref()  renamed, was ddca_report_display_ref()        New  Comments      ddca_report_display_by_dref()", 
            "title": "Display References"
        }, 
        {
            "location": "/c_api_90/#display-handles", 
            "text": "Deprecated API Functions  Comments      ddca_open_display()  Use ddca_open_display2()        Unchanged  Comments      ddca_close_display()     ddca_dh_repr()         New  Comments      ddca_open_display2()  allows for waiting if display locked by another thread    ddca_display_ref_from_handle()", 
            "title": "Display Handles"
        }, 
        {
            "location": "/c_api_90/#capabilities-string", 
            "text": "Unchanged  Comments      ddca_get_capabilities_string()     ddca_parse_capabilities_string()     ddca_free_parsed_capabilities()         Changed  Comments      ddca_report_parsed_capabilities()  interprets feature and value codes        Added  Comments      ddca_feature_list_from_capabilities()  Create feature id bitifield from capabilities", 
            "title": "Capabilities String"
        }, 
        {
            "location": "/c_api_90/#feature-metadata", 
            "text": "Struct  DDCA_Version_Feature_Info  and related functions are deprecated.  Instead, the master \nrecord for feature metadata is now  DDCA_Feature_Metadata .       Deprecated and Deleted  Comments       DDCA_Version_Feature_Info  use DDCA_Feature_Metadata     ddca_get_feature_info_by_vcp_version()  Use ddca_get_feature_metadata()  - in 0.8.7     ddca_get_feature_info_by_display()  Use ddca_get_feature_metadata()     ddca_free_feature_info()  in 0.8.7?     ddca_get_simple_sl_value_table()  Takes a DDCA_MCCS_Version_Id argument.         Unchanged  Comments      ddca_get_feature_name()         Added Structs and Functions  Comments      DDCA_Feature_Metadata  replaces DDCA_Version_Feature_Info    ddca_get_feature_metadata_by_dref()     ddca_get_feature_metadata_by_dh()     ddca_free_feature_metadata_contents()         Additional new granular functions  Comments      ddca_feature_name_by_dref()     ddca_get_simple_sl_value_table_by_dref()  Gets table of valid values if flag  DDCA_SIMPLE_NC  is set in  DDCA_Feature_Flags .     Miscellaneous changes: \n- Bitfield  DDCA_Version_Feature_Flags  now has bit  DDCA_NC_COMPLEX , indicating a VCP code\n(designated by MCCS as Non-Continuous) that uses certain values as an NC feature and uses the \nremaining range for continyous adjustment. An example of such a feature is VCP code x62 (Audio Speaker Volume)\nas defined in MCCS versions 3.0 and 2.2, where value x00 is defined as \"Fixed (default level)\", value xFF is \"Mute\", \nand values x01..xFE provide a continuous range for volume adjustment.", 
            "title": "Feature Metadata"
        }, 
        {
            "location": "/c_api_90/#nc-feature-value-lookup", 
            "text": "(See Metadata section for discussion of getting lookup tables)     Deprecated and Deleted Functions  Comments      ddca_get_simple_nc_feature_value_name()  Get feature metadata, then use ddca_get_simple_nc_feature_name_by_table()        New  Comments      ddca_get_simple_nc_feature_value_name_by_table()  new     |ddca_get_simple_nc_feature_value_name_by_display() | new, or deprecated??  check |", 
            "title": "NC Feature Value Lookup"
        }, 
        {
            "location": "/c_api_90/#symbol-name-changes", 
            "text": "Numerous symbols have been renamed for clarity and consistency.\nGeneral changes: \n- The names of report functions that display internal data structures for debugging, as opposed to reports\ndesigned to be shown to users, now begin with \"ddca_dbgrpt_\" instead of \"ddca_report_\".  \n- Enum values  DDCA_V10  etc. are now  DDCA_MCCS_V10  etc. (but note that the use of  DDCA_MCCS_Version_Id  is deprecated \nin favor of  DDCA_MCCS_Version_Spec ) \n- Names of parameters that specify the address at which a pointer is to be returned now generally end in \"_loc\".  Specific changes not listed elsewhere:      Old Name  New Name      DDCA_IO_DEVI2C  DDCA_IO_I2C     Naming patterns:  \n- Functions that always return the same value generally do not include \" _get_ \" in their names,\ne.g.  ddca_ddcutil_version() ,  ddca_max_max_tries()   \n- In the case of \"overloaded\" functions, \" _by_ \" is usually used to distinguish variants,\ne.g.  ddca_get_feature_metadata_by_vspec() ,  ddca_get_feature_metadata_by_dref() ,  get_feature_metadata_by_display() \n- However, in the case where there the result depends on a single input value from which the result\nis extracted, \" _from_ \" is used,\ne.g.  ddca_mmk_from_dref() ,  ddca_mmk_from_dh()", 
            "title": "Symbol Name Changes"
        }, 
        {
            "location": "/c_api_90/#get-and-set-vcp-feature-values", 
            "text": "DDCA_Any_Vcp_Value  vs  DDCA_Non_Table_Vcp_Value  The API provides functions for getting, setting, and otherwise processing VCP values in 3 forms, \nusing the type specific  DDCA_Non_Table_Vcp_Value  or  DDCA_Table_Vcp_Value  or the more \ngeneral  DDCA_Any_Vcp_Value .   The first form is simpler to use, and does not entail the \nallocation of arbitrarily size buffers.   As a practical matter, while the MCCS spec defines Table type features, they have not been observed\non any monitors.  Supporting Table type features in a UI adds complexity.\nAPI users will probably want to use the simpler  DDCA_Non_Table_Vcp_Value  functions.  The following tables summarize the structs and API functions for getting and setting VCP feature values.     Deprecated and Deleted  Comments      ddca_set_simple_nc_vcp_value()  unchanged, but deprecated    ddca_set_continuous_vcp_value()  unchanged, but deprecated        Changed  Comments      DDCA_Non_Table_Vcp_Value  renamed, was DDCA_Non_Table_Value    DDCA_Table_Vcp_Value  renamed, was DDCA_Table_Value    ddca_get_non_table_vcp_value()  renamed, was ddca_get_nontable_vcp_value()    ddca_get_any_vcp_value_using_explicit_type()  renamed, was ddca_get_any_vcp_value(), parm type change    ddca_set_non_table_vcp_value()  renamed, was ddca_set_raw_vcp_value()    ddca_get_table_vcp_value()  parameter change    ddca_free_table_vcp_value()  renamed from ddca_free_table_value_response()        New  Comments      ddca_get_any_vcp_value_using_implicit_type()  new function    ddca_set_table_vcp_value()  new    ddca_set_any_vcp_value()  new    ddca_free_any_vcp_value()  new    dbgrpt_any_vcp_value()  new", 
            "title": "Get and Set VCP Feature Values"
        }, 
        {
            "location": "/c_api_90/#get-or-set-multiple-values", 
            "text": "Unchanged  Comments      ddca_get_profile_related_values()         Changed  Comments      ddca_set_profile_related_values()  add display handle parm     if  ddca_set_profile_releated_values()  returns  DDCRC_BAD_DATA ,  ddca_get_error_detail()  \nreturns a detailed error report.", 
            "title": "Get or Set Multiple Values"
        }, 
        {
            "location": "/c_api_90/#format-feature-values", 
            "text": "Functions  ddca_format_table_vcp_value() ,  ddca_format_non_table_vcp_value() , and  ddca_format_any_vcp_value()  \nformat a feature value, based on its feature code and MCCS version.    Function  ddca_get_formatted_vcp_value()  continues to exist, but is essentially a convenience function\nthat combines reading a VCP value with formatting.     Unchanged  Comments      ddca_get_formatted_vcp_value()  unchanged        New  Comments      ddca_format_non_table_vcp_value_by_dref()  new    ddca_format_table_vcp_value_by_dref()  new    ddca_format_any_vcp_value_by_dref()  new", 
            "title": "Format Feature Values"
        }, 
        {
            "location": "/c_api_90/#miscellaneous-changes", 
            "text": "ddca_enable_report_ddc_errors() ,  ddca_enable_verify() ,  ddca_set_output_level \nnow return the prior setting", 
            "title": "Miscellaneous Changes"
        }, 
        {
            "location": "/c_api_90/#sample-programs", 
            "text": "Sample programs have been revised to reflect API changes and new sample programs added.  See the main  C API page .", 
            "title": "Sample programs"
        }, 
        {
            "location": "/python_api/", 
            "text": "Python API\n\n\nProof of concept implementations exist using GObject introspection, SWIG, Cython, and CFFI.  However, work\non a Python API has been suspended.  The following are old comments on the implementations. \n\n\nSWIG API\n\n\nSymbol names begin with \"ddcs_\" or \"DDCS_\" (for \nDDC\nutil \nS\nwig).\n\n\nGenerated files:\n\n- _ddc_swig.so\n\n- ddc_swig.py \n\n\nNormally installed to ${pkgexecdir}/dist-packages   ?? \n\n\nIssue: \nDepending on $(prefix) value, \nmake install\n will install these files to ... \nIf installed to /usr/local... python will not mormally  see these files.  Directory ... must be added to the Python path. \nThis can be done in one several ways: \n\n- Modify PYTHONPATH globally.    See generatd fragment src/swig/...\n\n- Modify PYTHONPATH for a single Python invocation.   See generated script src/swig/...\n\n- Modify PTYHONPATH within a Python script.  See commented out lines in sample script src/swig/test_swig.py \n\n\nFor a fuller discussion on modifying  PYTHONPATH, see \nhttp://ask.xmodulo.com/change-syspath-pythonpath-python.html\n.\n\n\nGObject API\n\n\nA vestigial proof of concept for impelmenting scripting language support using \nGObject\n instrospection remains in \nsubidrectory src/gobject_api, pending removal from the source tree.  Building this code is controlled by configuration options \n\n--enable-gobject-api\n and \n--enable-introspection\n.  These options should be left disabled.", 
            "title": "Python API Overview"
        }, 
        {
            "location": "/python_api/#python-api", 
            "text": "Proof of concept implementations exist using GObject introspection, SWIG, Cython, and CFFI.  However, work\non a Python API has been suspended.  The following are old comments on the implementations.", 
            "title": "Python API"
        }, 
        {
            "location": "/python_api/#swig-api", 
            "text": "Symbol names begin with \"ddcs_\" or \"DDCS_\" (for  DDC util  S wig).  Generated files: \n- _ddc_swig.so \n- ddc_swig.py   Normally installed to ${pkgexecdir}/dist-packages   ??   Issue: \nDepending on $(prefix) value,  make install  will install these files to ... \nIf installed to /usr/local... python will not mormally  see these files.  Directory ... must be added to the Python path. \nThis can be done in one several ways:  \n- Modify PYTHONPATH globally.    See generatd fragment src/swig/... \n- Modify PYTHONPATH for a single Python invocation.   See generated script src/swig/... \n- Modify PTYHONPATH within a Python script.  See commented out lines in sample script src/swig/test_swig.py   For a fuller discussion on modifying  PYTHONPATH, see  http://ask.xmodulo.com/change-syspath-pythonpath-python.html .", 
            "title": "SWIG API"
        }, 
        {
            "location": "/python_api/#gobject-api", 
            "text": "A vestigial proof of concept for impelmenting scripting language support using  GObject  instrospection remains in \nsubidrectory src/gobject_api, pending removal from the source tree.  Building this code is controlled by configuration options  --enable-gobject-api  and  --enable-introspection .  These options should be left disabled.", 
            "title": "GObject API"
        }, 
        {
            "location": "/todo/", 
            "text": "Future Tasks\n\n\nFeatures: \n\n- Provide for user description of manufacturer specific features\n\n- User defined feature sets\n\n- Python API  \n\n\nMiscellaneous tasks:\n\n- Document the format of .VCP files (i.e. files read by \nddcutil loadvcp\n)", 
            "title": "Future Tasks"
        }, 
        {
            "location": "/todo/#future-tasks", 
            "text": "Features:  \n- Provide for user description of manufacturer specific features \n- User defined feature sets \n- Python API    Miscellaneous tasks: \n- Document the format of .VCP files (i.e. files read by  ddcutil loadvcp )", 
            "title": "Future Tasks"
        }, 
        {
            "location": "/bibliography/", 
            "text": "Reference Documents\n\n\n\n\nUSB Device Class Definition for Human Interface Devices Version 1.11, June 27, 2001\n\n\nUSB HID Usage Table Version 1.12, October 28,2004\n\n\nUSB Monitor Control Class Specification Revision 1.0, January 5, 1998\n\n\nVESA Display Data Channel Command Interface (DDC/CI) Standard Version 1.1, October 29, 2004\n\n\nVESA Monitor Control Command Set (MCCS) Standard Version 1, September 11, 1998\n\n\nVESA Monitor Control Command Set (MCCS) Standard Version 2, October 17, 2003\n\n\nVESA Monitor Control Command Set (MCCS) Standard Version 2.1, May 28, 2005 \n\n\nVESA Monitor Control Command Set (MCCS) Standard Version 2.2, January 19, 2009\n\n\nVESA Monitor Control Command Set (MCCS) Standard Version 2.2a, July 13, 2011 \n\n\nVESA Monitor Control Command Set (MCCS) Standard Version 3, July 27, 2006\n\n\nVESA Monitor Control Command Set (MCCS) Update Document for MCCS Standard Version 3, March 20, 2007", 
            "title": "References"
        }, 
        {
            "location": "/bibliography/#reference-documents", 
            "text": "USB Device Class Definition for Human Interface Devices Version 1.11, June 27, 2001  USB HID Usage Table Version 1.12, October 28,2004  USB Monitor Control Class Specification Revision 1.0, January 5, 1998  VESA Display Data Channel Command Interface (DDC/CI) Standard Version 1.1, October 29, 2004  VESA Monitor Control Command Set (MCCS) Standard Version 1, September 11, 1998  VESA Monitor Control Command Set (MCCS) Standard Version 2, October 17, 2003  VESA Monitor Control Command Set (MCCS) Standard Version 2.1, May 28, 2005   VESA Monitor Control Command Set (MCCS) Standard Version 2.2, January 19, 2009  VESA Monitor Control Command Set (MCCS) Standard Version 2.2a, July 13, 2011   VESA Monitor Control Command Set (MCCS) Standard Version 3, July 27, 2006  VESA Monitor Control Command Set (MCCS) Update Document for MCCS Standard Version 3, March 20, 2007", 
            "title": "Reference Documents"
        }, 
        {
            "location": "/acknowledgements/", 
            "text": "Acknowlegdements\n\n\n\n\nJean Delvare, Linux kernel I2C maintainer, for his helpful guidance in getting the low level I2C code to work.\n\n\nJeff Leist, co-owner of \nMicroworx\n in Rochester, NY for access to a variety of computers for testing.\n\n\nProfessor Nitan Simpat at Rochester Institute of Technology for accesss to Eizo and NEC monitors\n\n\nOndrej Zary, whose \nusbmonctl\n provided a starting point for the USB implemention.   usbmonctl was based on acdcontrol by Pavel Guervich, which in turn.. well you get the idea. It's shoulders all the way down.", 
            "title": "Acknowledgements"
        }, 
        {
            "location": "/acknowledgements/#acknowlegdements", 
            "text": "Jean Delvare, Linux kernel I2C maintainer, for his helpful guidance in getting the low level I2C code to work.  Jeff Leist, co-owner of  Microworx  in Rochester, NY for access to a variety of computers for testing.  Professor Nitan Simpat at Rochester Institute of Technology for accesss to Eizo and NEC monitors  Ondrej Zary, whose  usbmonctl  provided a starting point for the USB implemention.   usbmonctl was based on acdcontrol by Pavel Guervich, which in turn.. well you get the idea. It's shoulders all the way down.", 
            "title": "Acknowlegdements"
        }
    ]
}