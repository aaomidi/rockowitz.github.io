{
    "docs": [
        {
            "location": "/", 
            "text": "ddcutil\n\n\nAnnouncements\n\n\n21 November 2016\n\n\nThe most recent release of \nddcutil\n is 0.6.1.  This is a maintenance release and need not be installed\nunless you are experiencing problems.  For details, see \nRelease Notes\n.\n\n\n01 October 2016\n\n\nAs of release 0.6, the name of this program changed from \nddctool\n to \nddcutil\n \nto avoid confusion with a commerical datacenter program also named \nddctool.\n\n\nThe following are affected:\n\n\n\n\n\n\n\n\nObject\n\n\nOld name\n\n\nNew Name\n\n\n\n\n\n\n\n\n\n\nRepository URL\n\n\nhttps://github.com/rockowitz/ddctool.git\n\n\nhttps://github.com/rockowitz/ddcutil.git\n\n\n\n\n\n\nWeb site URL\n\n\nhttp://www.ddctool.com\n\n\nhttp://www.ddcutil.com\n\n\n\n\n\n\nPrimary executable\n\n\nddctool\n\n\nddcutil\n\n\n\n\n\n\nShared library\n\n\nlibddctool.so\n\n\nlibddcutil.so\n\n\n\n\n\n\n\n\nIntroduction\n\n\nddcutil\n is a Linux program for querying and changing monitor settings, such as \nbrightness and color levels.   \n\n\nddcutil\n primarily uses DDC/CI (Display Data Channel Command Interface) to communicate with monitors implementing MCCS \n(Monitor Control Command Set) over I2C.  Normally, the video driver for the\nmonitor exposes the I2C channel as devices named /dev/i2c-n.  Alternatively, there is support for monitors (such as Eizo ColorEdge displays) that implement MCCS using a USB connection.  See \nUSB Connected Monitors\n. \n\n\nA particular use case for \nddcutil\n is as part of color profile management. Monitor\ncalibration is relative to the monitor color settings currently in effect, \ne.g. red gain.  ddcutil allows color related settings to be saved at the time \na monitor is calibrated, and then restored when the calibration is applied.\n\n\nRestrictions:\n\n-\nddcutil\n does not support laptop displays, which are controlled using a special API, not I2C. \n\n- Nvidia's proprietary video driver may require special configuration.  See \n\nSpecial Nvidia Driver Settings\n. \n\n- Operation with AMD's proprietary video driver fglrx requires a \nspecially built version of \nddcutil\n.  See \nBuilding with ADL Support\n.\n\n- Reading and writing \nTable\n type features is implemented but untested.  See \nTable Features\n  \n\n\nCommand Overview\n\n\nddcutil\n is a command line program.  (A GUI user interface is planned.)  \nddcutil\n implements \nthe following subcommands:\n\n\n\n\n\n\n\n\nSubcommand\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\n\n\ndetect\n\n\nreport monitors detected\n\n\n\n\n\n\n\n\ncapabilities\n\n\nreport a monitor's capabilities string\n\n\n\n\n\n\n\n\nvcpinfo (feature-code-or-group)\n\n\nlist VCP features codes that ddcutil knows how to interpret\n\n\n\n\n\n\n\n\ngetvcp feature-code-or-group\n\n\nreport a single VCP feature value, or a group of values\n\n\n\n\n\n\n\n\nsetvcp feature-code new-value\n\n\nset a single VCP feature value\n\n\n\n\n\n\n\n\ndumpvcp filename\n\n\nsave color related VCP feature values to a file\n\n\n\n\n\n\n\n\nloadvcp filename\n\n\nrestore color related VCP feature values from a file\n\n\n\n\n\n\n\n\nenvironment\n\n\nexplore the ddcutil installation environment (other than USB)\n\n\n\n\n\n\n\n\nusbenv\n\n\nexplore USB aspects of the ddcutil installation environment\n\n\n\n\n\n\n\n\ninterrogate\n\n\ncollect maximal information for problem diagnosis\n\n\n\n\n\n\n\n\nchkusbmon  /dev/hiddevN\n\n\nused by udev rules to test if a USB device represents a monitor\n\n\n\n\n\n\n\n\n\n\nThere is an extensive set of options for tailoring ddcutil operation. \nSome are described in this documentation.   For a full list of options and detailed documentation for each command, \nuse the \n--help\n option or \nsee the man page:\n\n\nddcutil --help\nman 1 ddcutil\n\n\n\n\nMonitor Selection\n\n\nIf more than one monitor is attached, the desired monitor can be specified \nusing any of the following options:\n\n\n--display \ndisplay number\n\n--bus \ni2c bus number\n\n--adl \niAdapterNumber\n.\niDisplayNumber\n\n--usb \nusb bus number\n.\nusb device number\n\n--edid \n256 character hex string\n\n--model \nmodel name\n together with --sn \nserial number\n\n\n\n\n\nNotes:\n\n- Monitors under control of AMD's proprietary driver (fglrx) are selected by\n  adapter number and display number. These numbers are specified on the --adl \n  option separated by a period, e.g. \"--adlno 1.0\"\n\n- If model and serial number are used to identify the monitor, both options \n  must be specified.\n\n\nTo see a list of all attached monitors and their associated identifiers:\n\n\nddcutil detect\n\n\n\n\nExamples\n\n\n\n\nddcutil vcpinfo\n\n\nddcutil detect\n\n\nddcutil capabilities\n\n\nddcutil getvcp\n\n\n\n\nInstalling ddcutil From Prebuilt Packages\n\n\nPackages for recent openSUSE, Fedora, Debian, and Ubuntu releases are available for download from the \n\nopenSUSE build service\n\n\nFor Ubuntu Wily, there's a \nPPA\n.\nTo use it, add the following lines to /etc/apt/sources.list:\n\n\ndeb http://ppa.launchpad.net/rockowitz/ddcutil/ubuntu wily main \ndeb-src http://ppa.launchpad.net/rockowitz/ddcutil/ubuntu wily main \n\n\n\n\nFor other distributions, or if using AMD's proprietary fglrx driver, ddcutil must be \nbuilt from source\n.\n\n\nddcutil\n Configuration\n\n\nDDC/CI communication must be enabled on the monitor.  This setting can only be changed using the monitor's on screen display.\n\n\nddcutil\n users require write permission to /dev/i2c-* devices.  See \n/dev/i2c Permissions\n\n\nIf using an open source video driver, kernel module i2c-dev must be loaded.  See \nKernel Module Configuration\n\n\nIf using Nvidia's proprietary video driver, special settings may be necessary.  See \nSpecial Nvidia Driver Settings\n\n\nInstallation Diagnostics\n\n\nIf ddcutil installs successfully but execution fails, command \nddcutil environment\n \ncan be used to probe the I2C environment and may provide clues as to the problem.\n\n\nAdditional Topics\n\n\n\n\n\n\nMonitor Control Command Set\n\n\n\n\n\n\nInstrumentation and Tuning\n\n\n\n\n\n\nBuilding From Source\n\n\n\n\n\n\nAMD fglrx Driver\n\n\n\n\n\n\nVirtual Machines\n\n\n\n\n\n\nComparison with ddccontrol\n\n\n\n\n\n\nFuture Tasks\n\n\n\n\n\n\nFeedback\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nAcknowledgements\n\n\n\n\n\n\nAuthor\n\n\nSanford Rockowitz", 
            "title": "Overview"
        }, 
        {
            "location": "/#ddcutil", 
            "text": "", 
            "title": "ddcutil"
        }, 
        {
            "location": "/#announcements", 
            "text": "21 November 2016  The most recent release of  ddcutil  is 0.6.1.  This is a maintenance release and need not be installed\nunless you are experiencing problems.  For details, see  Release Notes .  01 October 2016  As of release 0.6, the name of this program changed from  ddctool  to  ddcutil  \nto avoid confusion with a commerical datacenter program also named  ddctool.  The following are affected:     Object  Old name  New Name      Repository URL  https://github.com/rockowitz/ddctool.git  https://github.com/rockowitz/ddcutil.git    Web site URL  http://www.ddctool.com  http://www.ddcutil.com    Primary executable  ddctool  ddcutil    Shared library  libddctool.so  libddcutil.so", 
            "title": "Announcements"
        }, 
        {
            "location": "/#introduction", 
            "text": "ddcutil  is a Linux program for querying and changing monitor settings, such as \nbrightness and color levels.     ddcutil  primarily uses DDC/CI (Display Data Channel Command Interface) to communicate with monitors implementing MCCS \n(Monitor Control Command Set) over I2C.  Normally, the video driver for the\nmonitor exposes the I2C channel as devices named /dev/i2c-n.  Alternatively, there is support for monitors (such as Eizo ColorEdge displays) that implement MCCS using a USB connection.  See  USB Connected Monitors .   A particular use case for  ddcutil  is as part of color profile management. Monitor\ncalibration is relative to the monitor color settings currently in effect, \ne.g. red gain.  ddcutil allows color related settings to be saved at the time \na monitor is calibrated, and then restored when the calibration is applied.  Restrictions: \n- ddcutil  does not support laptop displays, which are controlled using a special API, not I2C.  \n- Nvidia's proprietary video driver may require special configuration.  See  Special Nvidia Driver Settings .  \n- Operation with AMD's proprietary video driver fglrx requires a \nspecially built version of  ddcutil .  See  Building with ADL Support . \n- Reading and writing  Table  type features is implemented but untested.  See  Table Features", 
            "title": "Introduction"
        }, 
        {
            "location": "/#command-overview", 
            "text": "ddcutil  is a command line program.  (A GUI user interface is planned.)   ddcutil  implements \nthe following subcommands:     Subcommand  Function       detect  report monitors detected     capabilities  report a monitor's capabilities string     vcpinfo (feature-code-or-group)  list VCP features codes that ddcutil knows how to interpret     getvcp feature-code-or-group  report a single VCP feature value, or a group of values     setvcp feature-code new-value  set a single VCP feature value     dumpvcp filename  save color related VCP feature values to a file     loadvcp filename  restore color related VCP feature values from a file     environment  explore the ddcutil installation environment (other than USB)     usbenv  explore USB aspects of the ddcutil installation environment     interrogate  collect maximal information for problem diagnosis     chkusbmon  /dev/hiddevN  used by udev rules to test if a USB device represents a monitor      There is an extensive set of options for tailoring ddcutil operation. \nSome are described in this documentation.   For a full list of options and detailed documentation for each command, \nuse the  --help  option or \nsee the man page:  ddcutil --help\nman 1 ddcutil", 
            "title": "Command Overview"
        }, 
        {
            "location": "/#monitor-selection", 
            "text": "If more than one monitor is attached, the desired monitor can be specified \nusing any of the following options:  --display  display number \n--bus  i2c bus number \n--adl  iAdapterNumber . iDisplayNumber \n--usb  usb bus number . usb device number \n--edid  256 character hex string \n--model  model name  together with --sn  serial number   Notes: \n- Monitors under control of AMD's proprietary driver (fglrx) are selected by\n  adapter number and display number. These numbers are specified on the --adl \n  option separated by a period, e.g. \"--adlno 1.0\" \n- If model and serial number are used to identify the monitor, both options \n  must be specified.  To see a list of all attached monitors and their associated identifiers:  ddcutil detect", 
            "title": "Monitor Selection"
        }, 
        {
            "location": "/#examples", 
            "text": "ddcutil vcpinfo  ddcutil detect  ddcutil capabilities  ddcutil getvcp", 
            "title": "Examples"
        }, 
        {
            "location": "/#installing-ddcutil-from-prebuilt-packages", 
            "text": "Packages for recent openSUSE, Fedora, Debian, and Ubuntu releases are available for download from the  openSUSE build service  For Ubuntu Wily, there's a  PPA .\nTo use it, add the following lines to /etc/apt/sources.list:  deb http://ppa.launchpad.net/rockowitz/ddcutil/ubuntu wily main \ndeb-src http://ppa.launchpad.net/rockowitz/ddcutil/ubuntu wily main   For other distributions, or if using AMD's proprietary fglrx driver, ddcutil must be  built from source .", 
            "title": "Installing ddcutil From Prebuilt Packages"
        }, 
        {
            "location": "/#ddcutil-configuration", 
            "text": "DDC/CI communication must be enabled on the monitor.  This setting can only be changed using the monitor's on screen display.  ddcutil  users require write permission to /dev/i2c-* devices.  See  /dev/i2c Permissions  If using an open source video driver, kernel module i2c-dev must be loaded.  See  Kernel Module Configuration  If using Nvidia's proprietary video driver, special settings may be necessary.  See  Special Nvidia Driver Settings", 
            "title": "ddcutil Configuration"
        }, 
        {
            "location": "/#installation-diagnostics", 
            "text": "If ddcutil installs successfully but execution fails, command  ddcutil environment  \ncan be used to probe the I2C environment and may provide clues as to the problem.", 
            "title": "Installation Diagnostics"
        }, 
        {
            "location": "/#additional-topics", 
            "text": "Monitor Control Command Set    Instrumentation and Tuning    Building From Source    AMD fglrx Driver    Virtual Machines    Comparison with ddccontrol    Future Tasks    Feedback    References    Acknowledgements", 
            "title": "Additional Topics"
        }, 
        {
            "location": "/#author", 
            "text": "Sanford Rockowitz", 
            "title": "Author"
        }, 
        {
            "location": "/mccs_background/", 
            "text": "Monitor Control Command Set\n\n\nMCCS Terminology\n\n\nMonitor settings are referred to as Virtual Control Panel (VCP) features.\nFeatures are numbered from 0..255, and are specified using the hex\nrepresentation, e.g. 1A for blue level.   \n\n\nMCCS designates features as being one of three types:\n\n\n\n\nContinuous (C): Able to take any value up to some maximum\n\n\nNon-continuous (NC): Able to take only a designated set of values\n\n\nTable (T): Used for \"raw\" data such as a video LUT\n\n\n\n\nThis clean distinction has broken down as the MCCS specification has \nevolved.   Some features have changed category.  ddcutil distinguishes\nbetween \"simple\" NC fields, which are encoded using only a single byte (in field SL) and for which there is a simple list of possible values,\nand \"complex\" NC fields, where an algorithm must be applied to \ninterpret the bytes of a feature query.  This is a ddcutil distinction and \nnot part of the MCCS specification.\n\n\nMost features are both readable and writable (RW).  Some, such as \nVCP Version (DF), are read-only (RO), while others, such as Restore\nFactory Defaults (02) are write-only.\n\n\nMCCS Versions\n\n\n\n\nVersion 1, September 1998\n\n\n\n\nInitial version. \n\n\n\n\nVersion 2.0, October 1998\n\n\n\n\nIntroduced required features Display Controller Type (C8), Display Firmware Level (C9) and VCP Version (DF).\n\n\n\n\n\n\nVersion 2.1, May 2005   \n\n\n\n\n\n\nVersion 3.0, July 2006 \n\n\n\n\n\n\nNot upward compatible with Version 2.1.  Appears not to have achieved industry acceptance.  I have not seen\nany monitors implementing MCCS 3.0. \n\n\n\n\nVersion 2.2, July 2009 \n\n\n\n\nA revision to Version 2.1, incorporating most of the new features from Version 3.0 in a manner upwardly compatible with 2.1. \n\n\nNote that because Version 2.2 was issued after Version 3.0, when \nddcutil\n reports MCCS versions it orders them 1.0, 2.0, 2.1, 3.0, 2.2. \n\n\n\n\nVersion 2.2a, July 2011 \n\n\n\n\nMinor revision to Version 2.2.", 
            "title": "Monitor Control Command Set"
        }, 
        {
            "location": "/mccs_background/#monitor-control-command-set", 
            "text": "", 
            "title": "Monitor Control Command Set"
        }, 
        {
            "location": "/mccs_background/#mccs-terminology", 
            "text": "Monitor settings are referred to as Virtual Control Panel (VCP) features.\nFeatures are numbered from 0..255, and are specified using the hex\nrepresentation, e.g. 1A for blue level.     MCCS designates features as being one of three types:   Continuous (C): Able to take any value up to some maximum  Non-continuous (NC): Able to take only a designated set of values  Table (T): Used for \"raw\" data such as a video LUT   This clean distinction has broken down as the MCCS specification has \nevolved.   Some features have changed category.  ddcutil distinguishes\nbetween \"simple\" NC fields, which are encoded using only a single byte (in field SL) and for which there is a simple list of possible values,\nand \"complex\" NC fields, where an algorithm must be applied to \ninterpret the bytes of a feature query.  This is a ddcutil distinction and \nnot part of the MCCS specification.  Most features are both readable and writable (RW).  Some, such as \nVCP Version (DF), are read-only (RO), while others, such as Restore\nFactory Defaults (02) are write-only.", 
            "title": "MCCS Terminology"
        }, 
        {
            "location": "/mccs_background/#mccs-versions", 
            "text": "Version 1, September 1998   Initial version.    Version 2.0, October 1998   Introduced required features Display Controller Type (C8), Display Firmware Level (C9) and VCP Version (DF).    Version 2.1, May 2005       Version 3.0, July 2006     Not upward compatible with Version 2.1.  Appears not to have achieved industry acceptance.  I have not seen\nany monitors implementing MCCS 3.0.    Version 2.2, July 2009    A revision to Version 2.1, incorporating most of the new features from Version 3.0 in a manner upwardly compatible with 2.1.   Note that because Version 2.2 was issued after Version 3.0, when  ddcutil  reports MCCS versions it orders them 1.0, 2.0, 2.1, 3.0, 2.2.    Version 2.2a, July 2011    Minor revision to Version 2.2.", 
            "title": "MCCS Versions"
        }, 
        {
            "location": "/cmdargs/", 
            "text": "Command Arguments\n\n\nThe \nfeature-code\n argument to \nvcpinfo\n, \ngetvcp\n, and \nsetvcp\n is a hexadecimal feature number, \nwith or without a leading \"0x\", e.g.\n\n\n# ddcutil getvcp 10\n# ddcutil vcpinfo 0x10\n\n\n\n\nThe \nfeature-group\n argument to \nvcpinfo\n and \ngetvcp\n is a named collection of features.\n\nThe most useful are: \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nKNOWN\n\n\nall feature codes known to \nddcutil\n\n\n\n\n\n\nSCAN\n\n\nscan all feature codes 0x00..0xff\n\n\n\n\n\n\nCOLOR\n\n\ncolor related features (saved by dumpvcp)\n\n\n\n\n\n\n\n\nFor example: \n\n\n# ddcutil getvcp known\n\n\n\n\nFor a complete list of feature groups, use the \n--help\n option. \n\n\nThe \nnew-value\n argument to \nsetvcp\n is a decimal number in the range 0..255, or a single \nbyte hex value.  For example:\n\n\n# ddcutil setvcp 10 50\n# ddcutil setvcp 10 0x32", 
            "title": "Command Arguments"
        }, 
        {
            "location": "/cmdargs/#command-arguments", 
            "text": "The  feature-code  argument to  vcpinfo ,  getvcp , and  setvcp  is a hexadecimal feature number, \nwith or without a leading \"0x\", e.g.  # ddcutil getvcp 10\n# ddcutil vcpinfo 0x10  The  feature-group  argument to  vcpinfo  and  getvcp  is a named collection of features. \nThe most useful are:      Name  Description      KNOWN  all feature codes known to  ddcutil    SCAN  scan all feature codes 0x00..0xff    COLOR  color related features (saved by dumpvcp)     For example:   # ddcutil getvcp known  For a complete list of feature groups, use the  --help  option.   The  new-value  argument to  setvcp  is a decimal number in the range 0..255, or a single \nbyte hex value.  For example:  # ddcutil setvcp 10 50\n# ddcutil setvcp 10 0x32", 
            "title": "Command Arguments"
        }, 
        {
            "location": "/cmd_output/", 
            "text": "Command Output Examples\n\n\n\n\nddcutil vcpinfo\n\n\nddcutil detect\n\n\nddcutil capabilities\n\n\nddcutil getvcp", 
            "title": "Command Output Examples"
        }, 
        {
            "location": "/cmd_output/#command-output-examples", 
            "text": "ddcutil vcpinfo  ddcutil detect  ddcutil capabilities  ddcutil getvcp", 
            "title": "Command Output Examples"
        }, 
        {
            "location": "/vcpinfo_output/", 
            "text": "The following example reports \nddcutil\n's internal table of VCP Feature definitions.\n\n\n# ddcutil vcpinfo\n\nVCP code 01: Degauss\n   Causes a CRT to perform a degauss cycle\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: CRT\n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 02: New control value\n   Indicates that a display user control (other than power) has been used to change and save (or autosave) a new value.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (complex)\nVCP code 03: Soft controls\n   Allows display controls to be used as soft keys\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 04: Restore factory defaults\n   Restore all factor presets including brightness/contrast, geometry, color, and TV defaults.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Preset\n   ddcutil feature subsets: COLOR\n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 05: Restore factory brightness/contrast defaults\n   Restore factory defaults for brightness and contrast\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Preset\n   ddcutil feature subsets: COLOR\n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 06: Restore factory geometry defaults\n   Restore factory defaults for geometry adjustments\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Preset\n   ddcutil feature subsets: \n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 08: Restore color defaults\n   Restore factory defaults for color settings.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Preset\n   ddcutil feature subsets: COLOR\n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 0A: Restore factory TV defaults\n   Restore factory defaults for TV functions.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Preset\n   ddcutil feature subsets: TV\n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 0B: Color temperature increment\n   Color temperature increment used by feature 0Ch Color Temperature Request\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Only, Non-Continuous (complex)\nVCP code 0C: Color temperature request\n   Specifies a color temperature (degrees Kelvin)\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (complex)\nVCP code 0E: Clock\n   Increase/decrease the sampling clock frequency.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Continuous (standard)\nVCP code 10: Brightness\n   Increase/decrease the brightness of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 11: Flesh tone enhancement\n   Select contrast enhancement algorithm respecting flesh tone region\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Non-Continuous (complex)\nVCP code 12: Contrast\n   Increase/decrease the contrast of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 13: Backlight control\n   Increase/decrease the specified backlight control value\n   MCCS versions: 2.1, 3.0\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes (v2.1): Read Write, Continuous (complex)\n   Attributes (v3.0): Read Write, Continuous (complex)\n   Attributes (v2.2): Deprecated\nVCP code 14: Select color preset\n   Select a specified color temperature\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Non-Continuous (complex)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code 16: Video gain: Red\n   Increase/decrease the luminesence of red pixels\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 17: User color vision compensation\n   Increase/decrease the degree of compensation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 18: Video gain: Green\n   Increase/decrease the luminesence of green pixels\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 1A: Video gain: Blue\n   Increase/decrease the luminesence of blue pixels\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 1C: Focus\n   Increase/decrease the focus of the image\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Continuous (standard)\nVCP code 1E: Auto setup\n   Perform autosetup function (H/V position, clock, clock phase, A/D converter, etc.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 1F: Auto color setup\n   Perform color autosetup function (R/G/B gain and offset, A/D setup, etc. \n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 20: Horizontal Position (Phase)\n   Increasing (decreasing) this value moves the image toward the right (left) of the display.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 22: Horizontal Size\n   Increase/decrease the width of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 24: Horizontal Pincushion\n   Increasing (decreasing) this value causes the right and left sides of the image to become more (less) convex.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 26: Horizontal Pincushion Balance\n   Increasing (decreasing) this value moves the center section of the image toward the right (left) side of the display.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 28: Horizontal Convergence R/B\n   Increasing (decreasing) this value shifts the red pixels to the right (left) and the blue pixels left (right) across the image with respect to the green pixels.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 29: Horizontal Convergence M/G\n   Increasing (decreasing) this value shifts the magenta pixels to the right (left) and the green pixels left (right) across the image with respect to the magenta (sic) pixels.\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 2A: Horizontal Linearity\n   Increase/decrease the density of pixels in the image center.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 2C: Horizontal Linearity Balance\n   Increasing (decreasing) this value shifts the density of pixels from the left (right) side to the right (left) side of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 2E: Gray scale expansion\n   Gray Scale Expansion\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Non-Continuous (complex)\nVCP code 30: Vertical Position (Phase)\n   Increasing (decreasing) this value moves the image toward the top (bottom) edge of the display.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 32: Vertical Size\n   Increase/decreasing the height of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 34: Vertical Pincushion\n   Increasing (decreasing) this value will cause the top and bottom edges of the image to become more (less) convex.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 36: Vertical Pincushion Balance\n   Increasing (decreasing) this value will move the center section of the image toward the top (bottom) edge of the display.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 38: Vertical Convergence R/B\n   Increasing (decreasing) this value shifts the red pixels up (down) across the image and the blue pixels down (up) across the image with respect to the green pixels.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 39: Vertical Convergence M/G\n   Increasing (decreasing) this value shifts the magenta pixels up (down) across the image and the green pixels down (up) across the image with respect to the magenta (sic) pixels.\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 3A: Vertical Linearity\n   Increase/decease the density of scan lines in the image center.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 3C: Vertical Linearity Balance\n   Increase/decrease the density of scan lines in the image center.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 3E: Clock phase\n   Increase/decrease the sampling clock phase shift\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Continuous (standard)\nVCP code 40: Horizontal Parallelogram\n   Increasing (decreasing) this value shifts the top section of the image to the right (left) with respect to the bottom section of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 41: Vertical Parallelogram\n   Increasing (decreasing) this value shifts the top section of the image to the right (left) with respect to the bottom section of the image. (sic)\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 42: Horizontal Keystone\n   Increasing (decreasing) this value will increase (decrease) the ratio between the horizontal size at the top of the image and the horizontal size at the bottom of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 43: Vertical Keystone\n   Increasing (decreasing) this value will increase (decrease) the ratio between the vertical size at the left of the image and the vertical size at the right of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 44: Rotation\n   Increasing (decreasing) this value rotates the image (counter) clockwise around the center point of the screen.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 46: Top Corner Flare\n   Increase/decrease the distance between the left and right sides at the top of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 48: Top Corner Hook\n   Increasing (decreasing) this value moves the top of the image to the right (left).\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 4A: Bottom Corner Flare\n   Increase/decrease the distance between the left and right sides at the bottom of the image.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 4C: Bottom Corner Hook\n   Increasing (decreasing) this value moves the bottom end of the image to the right (left).\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 52: Active control\n   Read id of one feature that has changed, 0x00 indicates no more\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (complex)\nVCP code 54: Performance Preservation\n   Controls features aimed at preserving display performance\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (complex)\nVCP code 56: Horizontal Moire\n   Increase/decrease horizontal moire cancellation.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Continuous (standard)\nVCP code 58: Vertical Moire\n   Increase/decrease vertical moire cancellation.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Continuous (standard)\nVCP code 59: 6 axis saturation: Red\n   Increase/decrease red saturation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 5A: 6 axis saturation: Yellow\n   Increase/decrease yellow saturation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 5B: 6 axis saturation: Green\n   Increase/decrease green saturation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 5C: 6 axis saturation: Cyan\n   Increase/decrease cyan saturation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 5D: 6 axis saturation: Blue\n   Increase/decrease blue saturation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 5E: 6 axis saturation: Magenta\n   Increase/decrease magenta saturation\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 60: Input Source\n   Selects active video source\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Table\n   Attributes (v2.2): Read Write, Non-Continuous (simple)\nVCP code 62: Audio speaker volume\n   Adjusts speaker volume\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: AUDIO\n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Read Write, Continuous (complex)\n   Attributes (v2.2): Read Write, Continuous (standard)\nVCP code 63: Speaker Select\n   Selects a group of speakers\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: AUDIO\n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 64: Audio: Microphone Volume\n   Increase/decrease microphone gain\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: AUDIO\n   Attributes: Read Write, Continuous (standard)\nVCP code 66: Ambient light sensor\n   Enable/Disable ambient light sensor\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 6B: Backlight Level: White\n   Increase/decrease the white backlight level\n   MCCS versions: 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 6C: Video black level: Red\n   Increase/decrease the black level of red pixels\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 6D: Backlight Level: Red\n   Increase/decrease the red backlight level\n   MCCS versions: 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 6E: Video black level: Green\n   Increase/decrease the black level of green pixels\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 6F: Backlight Level: Green\n   Increase/decrease the green backlight level\n   MCCS versions: 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 70: Video black level: Blue\n   Increase/decrease the black level of blue pixels\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 71: Backlight Level: Blue\n   Increase/decrease the blue backlight level\n   MCCS versions: 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: PROFILE, COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 72: Gamma\n   Select relative or absolute gamma\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Non-Continuous (complex)\nVCP code 73: LUT Size\n   Provides the size (number of entries and number of bits/entry) for the Red, Green, and Blue LUT in the display.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: LUT\n   Attributes: Read Only, Table\nVCP code 74: Single point LUT operation\n   Writes a single point within the display's LUT, reads a single point from the LUT\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: LUT\n   Attributes: Read Write, Table\nVCP code 75: Block LUT operation\n   Load (read) multiple values into (from) the display's LUT\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: LUT\n   Attributes: Read Write, Table\nVCP code 76: Remote Procedure Call\n   Initiates a routine resident in the display\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: LUT\n   Attributes: Write Only, Table\nVCP code 78: Display Identification Operation\n   Causes a selected 128 byte block of Display Identification Data (EDID or Display ID) to be read\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes (v2.1): Read Only, Table\n   Attributes (v3.0): Read Only, Table\n   Attributes (v2.2): Read Only, Table\nVCP code 7A: Adjust Focal Plane\n   Increase/decrease the distance to the focal plane of the image\n   MCCS versions: 2.0, 2.1\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Deprecated\n   Attributes (v2.2): Deprecated\nVCP code 7C: Adjust Zoom\n   Increase/decrease the distance to the zoom function of the projection lens (optics)\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Continuous (standard)\nVCP code 7E: Trapezoid\n   Increase/decrease the trapezoid distortion in the image\n   MCCS versions: 2.0, 2.1\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Deprecated\n   Attributes (v2.2): Deprecated\nVCP code 80: Keystone\n   Increase/decrease the keystone distortion in the image.\n   MCCS versions: 2.0\n   MCCS specification groups: Geometry\n   ddcutil feature subsets: CRT\n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Deprecated\n   Attributes (v3.0): Deprecated\n   Attributes (v2.2): Deprecated\nVCP code 82: Horizontal Mirror (Flip)\n   Flip picture horizontally\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Geometry\n   ddcutil feature subsets: \n   Attributes (v2.0): Write Only, Non-Continuous (write-only)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.2): Read Write, Non-Continuous (simple)\nVCP code 84: Vertical Mirror (Flip)\n   Flip picture vertically\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Geometry\n   ddcutil feature subsets: \n   Attributes (v2.0): Write Only, Non-Continuous (write-only)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.2): Read Write, Non-Continuous (simple)\nVCP code 86: Display Scaling\n   Control the scaling (input vs output) of the display\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 87: Sharpness\n   Selects one of a range of algorithms. Increasing (decreasing) the value must increase (decrease) the edge sharpness of image features.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Read Write, Continuous (standard)\n   Attributes (v2.2): Read Write, Continuous (standard)\nVCP code 88: Velocity Scan Modulation\n   Increase (decrease) the velocity modulation of the horizontal scan as a function of the change in luminescence level\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Continuous (standard)\nVCP code 8A: Color Saturation\n   Increase/decrease the amplitude of the color difference components of the video signal\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: COLOR, TV\n   Attributes: Read Write, Continuous (standard)\nVCP code 8B: TV Channel Up/Down\n   Increment (1) or decrement (2) television channel\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: TV\n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code 8C: TV Sharpness\n   Increase/decrease the amplitude of the high frequency components  of the video signal\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: TV\n   Attributes: Read Write, Continuous (standard)\nVCP code 8D: Audio mute/Screen blank\n   Mute/unmute audio, and (v2.2) screen blank\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: TV, AUDIO\n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code 8E: TV Contrast\n   Increase/decrease the ratio between blacks and whites in the image\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: TV\n   Attributes: Read Write, Continuous (standard)\nVCP code 8F: Audio Treble\n   Emphasize/de-emphasize high frequency audio\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: AUDIO\n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Read Write, Non-Continuous (complex)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code 90: Hue\n   Increase/decrease the wavelength of the color component of the video signal. AKA tint.  Applies to currently active interface\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: COLOR, TV\n   Attributes: Read Write, Continuous (standard)\nVCP code 91: Audio Bass\n   Emphasize/de-emphasize low frequency audio\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: AUDIO\n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Read Write, Non-Continuous (complex)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code 92: TV Black level/Luminesence\n   Increase/decrease the black level of the video\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: TV\n   Attributes: Read Write, Continuous (standard)\nVCP code 93: Audio Balance L/R\n   Controls left/right audio balance\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: AUDIO\n   Attributes (v2.0): Read Write, Continuous (standard)\n   Attributes (v2.1): Read Write, Continuous (standard)\n   Attributes (v3.0): Read Write, Non-Continuous (complex)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code 94: Audio Processor Mode\n   Select audio mode\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Audio\n   ddcutil feature subsets: TV, AUDIO\n   Attributes: Read Write, Non-Continuous (simple)\nVCP code 95: Window Position(TL_X)\n   Top left X pixel of an area of the image\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry, Window\n   ddcutil feature subsets: WINDOW\n   Attributes: Read Write, Continuous (standard)\nVCP code 96: Window Position(TL_Y)\n   Top left Y pixel of an area of the image\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry, Window\n   ddcutil feature subsets: WINDOW\n   Attributes: Read Write, Continuous (standard)\nVCP code 97: Window Position(BR_X)\n   Bottom right X pixel of an area of the image\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry, Window\n   ddcutil feature subsets: WINDOW\n   Attributes: Read Write, Continuous (standard)\nVCP code 98: Window Position(BR_Y)\n   Bottom right Y pixel of an area of the image\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Geometry, Window\n   ddcutil feature subsets: WINDOW\n   Attributes: Read Write, Continuous (standard)\nVCP code 99: Window control on/off\n   Enables the brightness and color within a window to be different from the desktop.\n   MCCS versions: 2.0, 2.1, 2.2\n   MCCS specification groups: Window\n   ddcutil feature subsets: WINDOW\n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Deprecated\n   Attributes (v2.2): Read Write, Non-Continuous (simple)\nVCP code 9A: Window background\n   Changes the contrast ratio between the area of the window and the rest of the desktop\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: WINDOW\n   Attributes: Read Write, Continuous (standard)\nVCP code 9B: 6 axis hue control: Red\n   Decrease shifts toward magenta, increase shifts toward yellow\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 9C: 6 axis hue control: Yellow\n   Decrease shifts toward green, increase shifts toward red\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 9D: 6 axis hue control: Green\n   Decrease shifts toward yellow, increase shifts toward cyan\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 9E: 6 axis hue control: Cyan\n   Decrease shifts toward green, increase shifts toward blue\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code 9F: 6 axis hue control: Blue\n   Decrease shifts toward cyan, increase shifts toward magenta\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code A0: 6 axis hue control: Magenta\n   Decrease shifts toward blue, 127 no effect, increase shifts toward red\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: COLOR\n   Attributes: Read Write, Continuous (standard)\nVCP code A2: Auto setup on/off\n   Turn on/off an auto setup function\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code A4: Window mask control\n   Turn selected window operation on/off, window mask\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: WINDOW\n   Attributes (v2.0): Read Write, Non-Continuous (complex)\n   Attributes (v2.1): Read Write, Non-Continuous (complex)\n   Attributes (v3.0): Read Write, Table\n   Attributes (v2.2): Read Write, Table\nVCP code A5: Change the selected window\n   Change selected window (as defined by 95h..98h)\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Window\n   ddcutil feature subsets: WINDOW\n   Attributes: Read Write, Non-Continuous (simple)\nVCP code AA: Screen Orientation\n   Indicates screen orientation\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Geometry\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (simple)\nVCP code AC: Horizontal frequency\n   Horizontal sync signal frequency as determined by the display\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Continuous (complex)\nVCP code AE: Vertical frequency\n   Vertical sync signal frequency as determined by the display, in .01 hz\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Continuous (complex)\nVCP code B0: Settings\n   Store/restore the user saved values for the current mode.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Preset\n   ddcutil feature subsets: \n   Attributes: Write Only, Non-Continuous (write-only)\nVCP code B2: Flat panel sub-pixel layout\n   LCD sub-pixel structure\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (simple)\nVCP code B4: Source Timing Mode\n   Indicates timing mode being sent by host\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Control\n   ddcutil feature subsets: \n   Attributes (v2.1): Read Write, Non-Continuous (complex)\n   Attributes (v3.0): Read Write, Table\n   Attributes (v2.2): Read Write, Table\nVCP code B6: Display technology type\n   Indicates the base technology type\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (simple)\nVCP code B7: Monitor status\n   Video mode and status of a DPVL capable monitor\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Only, Non-Continuous (complex)\nVCP code B8: Packet count\n   Counter for DPVL packets received\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Continuous (complex)\nVCP code B9: Monitor X origin\n   X origin of the monitor in the vertical screen\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Continuous (complex)\nVCP code BA: Monitor Y origin\n   Y origin of the monitor in the vertical screen\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Continuous (complex)\nVCP code BB: Header error count\n   Error counter for the DPVL header\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Continuous (complex)\nVCP code BC: Body CRC error count\n   CRC error counter for the DPVL body\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Continuous (complex)\nVCP code BD: Client ID\n   Assigned identification number for the monitor\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Continuous (complex)\nVCP code BE: Link control\n   Indicates status of the DVI link\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: DPVL\n   ddcutil feature subsets: DPVL\n   Attributes: Read Write, Non-Continuous (complex)\nVCP code C0: Display usage time\n   Active power on time in hours\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Continuous (complex)\nVCP code C2: Display descriptor length\n   Length in bytes of non-volatile storage in the display available for writing a display descriptor, max 256\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Continuous (standard)\nVCP code C3: Transmit display descriptor\n   Reads (writes) a display descriptor from (to) non-volatile storage in the display.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Table\nVCP code C4: Enable display of 'display descriptor'\n   If enabled, the display descriptor shall be displayed when no video is being received.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (complex)\nVCP code C6: Application enable key\n   A 2 byte value used to allow an application to only operate with known products.\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (complex)\nVCP code C8: Display controller type\n   Mfg id of controller and 2 byte manufacturer-specific controller type\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Control, Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (complex)\nVCP code C9: Display firmware level\n   2 byte firmware level\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Control, Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (complex)\nVCP code CA: OSD/Button Control\n   Sets and indicates the current operational state of OSD (and buttons in v2.2)\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Control, Miscellaneous\n   ddcutil feature subsets: \n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code CC: OSD Language\n   On Screen Display languge\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Control, Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code CD: Status Indicators\n   Control up to 16 LED (or similar) indicators to indicate system status\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (complex)\nVCP code CE: Auxiliary display size\n   Rows and characters/row of auxiliary display\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (complex)\nVCP code CF: Auxiliary display data\n   Sets contents of auxiliary display device\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Write Only, Table\nVCP code D0: Output select\n   Selects the active output\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes (v2.0): Read Write, Non-Continuous (simple)\n   Attributes (v2.1): Read Write, Non-Continuous (simple)\n   Attributes (v3.0): Read Write, Table\n   Attributes (v2.2): Read Write, Non-Continuous (simple)\nVCP code D2: Asset Tag\n   Read an Asset Tag to/from the display\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Table\nVCP code D4: Stereo video mode\n   Stereo video mode\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (complex)\nVCP code D6: Power mode\n   DPM and DPMS status\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Control, Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code D7: Auxiliary power output\n   Controls an auxiliary power output from a display to a host device\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code DA: Scan mode\n   Controls scan characteristics (aka format)\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image, Geometry\n   ddcutil feature subsets: CRT\n   Attributes: Read Write, Non-Continuous (simple)\nVCP code DB: Image Mode\n   Controls aspects of the displayed image (TV applications)\n   MCCS versions: 2.1, 3.0, 2.2\n   MCCS specification groups: Control\n   ddcutil feature subsets: TV\n   Attributes: Read Write, Non-Continuous (simple)\nVCP code DC: Display Mode\n   Type of application used on display\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Image\n   ddcutil feature subsets: \n   Attributes: Read Write, Non-Continuous (simple)\nVCP code DE: Scratch Pad\n   Operation mode (2.0) or scratch pad (3.0/2.2)\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes (v2.0): Write Only, Non-Continuous (write-only)\n   Attributes (v2.1): Read Write, Non-Continuous (complex)\n   Attributes (v3.0): Read Write, Non-Continuous (complex)\n   Attributes (v2.2): Read Write, Non-Continuous (complex)\nVCP code DF: VCP Version\n   MCCS version\n   MCCS versions: 2.0, 2.1, 3.0, 2.2\n   MCCS specification groups: Miscellaneous\n   ddcutil feature subsets: \n   Attributes: Read Only, Non-Continuous (complex)", 
            "title": "ddcutil vcpinfo example"
        }, 
        {
            "location": "/detect_verbose_output/", 
            "text": "The following example shows verbose output of \nddcutil detect\n command on a system with 4 monitors attached.\n\n\n# ddcutil detect --verbose\n\nOutput level:               Verbose\nReporting DDC data errors:  false\nTrace groups active:        none\n\nDisplay 1\n   Bus:                 /dev/i2c-0\n   Supports DDC:        true\n   EDID synopsis:\n      Mfg id:           DEL\n      Model:            DELL P2411H\n      Serial number:    F8NDP11G119U\n      Manufacture year: 2011\n      EDID version:     1.3\n      EDID hex dump:\n        +0          +4          +8          +c            0   4   8   c   \n+0000   00 ff ff ff ff ff ff 00 10 ac 6e a0 55 39 31 31   ..........n.U911\n+0010   04 15 01 03 80 35 1e 78 ea bb 04 a1 59 55 9e 28   .....5.x....YU.(\n+0020   0d 50 54 a5 4b 00 71 4f 81 80 d1 c0 01 01 01 01   .PT.K.qO........\n+0030   01 01 01 01 01 01 02 3a 80 18 71 38 2d 40 58 2c   .......:..q8-@X,\n+0040   45 00 13 2b 21 00 00 1e 00 00 00 ff 00 46 38 4e   E..+!........F8N\n+0050   44 50 31 31 47 31 31 39 55 0a 00 00 00 fc 00 44   DP11G119U......D\n+0060   45 4c 4c 20 50 32 34 31 31 48 0a 20 00 00 00 fd   ELL P2411H. ....\n+0070   00 38 4c 1e 53 11 00 0a 20 20 20 20 20 20 00 63   .8L.S...      .c\n   VCP version:         2.1\n   Controller mfg:      Mstar\n   Firmware version:    1.1\n\nDisplay 2\n   Bus:                 /dev/i2c-3\n   Supports DDC:        true\n   EDID synopsis:\n      Mfg id:           ACI\n      Model:            VE247\n      Serial number:    AALMQS027787\n      Manufacture year: 2010\n      EDID version:     1.3\n      EDID hex dump:\n        +0          +4          +8          +c            0   4   8   c   \n+0000   00 ff ff ff ff ff ff 00 04 69 93 24 01 01 01 01   .........i.$....\n+0010   2c 14 01 03 80 35 1e 78 ea 2c c5 a4 56 50 a1 28   ,....5.x.,..VP.(\n+0020   0f 50 54 bf ef 00 71 4f 81 80 81 40 95 00 a9 40   .PT...qO...@...@\n+0030   b3 00 d1 c0 01 01 02 3a 80 18 71 38 2d 40 58 2c   .......:..q8-@X,\n+0040   45 00 13 2b 21 00 00 1e 00 00 00 fd 00 32 4c 1e   E..+!........2L.\n+0050   53 11 00 0a 20 20 20 20 20 20 00 00 00 fc 00 56   S...      .....V\n+0060   45 32 34 37 0a 20 20 20 20 20 20 20 00 00 00 ff   E247.       ....\n+0070   00 41 41 4c 4d 51 53 30 32 37 37 38 37 0a 00 9e   .AALMQS027787...\n   VCP version:         2.0\n   Controller mfg:      RealTek\n   Firmware version:    2.0\n\nDisplay 3\n   Bus:                 /dev/i2c-5\n   Supports DDC:        true\n   EDID synopsis:\n      Mfg id:           ACR\n      Model:            Acer X243W\n      Serial number:    LAG040064310\n      Manufacture year: 2007\n      EDID version:     1.3\n      EDID hex dump:\n        +0          +4          +8          +c            0   4   8   c   \n+0000   00 ff ff ff ff ff ff 00 04 72 00 00 cf 12 60 74   .........r....`t\n+0010   2e 11 01 03 80 34 20 78 2a ef 95 a3 54 4c 9b 26   .....4 x*...TL.\n\n+0020   0f 50 54 a5 4b 00 81 80 81 00 81 0f 95 00 95 0f   .PT.K...........\n+0030   a9 40 b3 00 01 01 28 3c 80 a0 70 b0 23 40 30 20   .@....(\n..p.#@0 \n+0040   36 00 06 44 21 00 00 1a 00 00 00 fd 00 38 4c 1e   6..D!........8L.\n+0050   52 11 00 0a 20 20 20 20 20 20 00 00 00 fc 00 41   R...      .....A\n+0060   63 65 72 20 58 32 34 33 57 0a 20 20 00 00 00 ff   cer X243W.  ....\n+0070   00 4c 41 47 30 34 30 30 36 34 33 31 30 0a 00 68   .LAG040064310..h\n   VCP version:         2.1\n   Controller mfg:      Mstar\n   Firmware version:    0.3\n\nDisplay 4\n   Bus:                 /dev/i2c-6\n   Supports DDC:        true\n   EDID synopsis:\n      Mfg id:           DEL\n      Model:            DELL U3011\n      Serial number:    PH5NY2CIANXL\n      Manufacture year: 2012\n      EDID version:     1.4\n      EDID hex dump:\n        +0          +4          +8          +c            0   4   8   c   \n+0000   00 ff ff ff ff ff ff 00 10 ac 65 40 4c 58 4e 41   ..........e@LXNA\n+0010   33 16 01 04 b5 40 28 78 3a 8d 85 ad 4f 35 b1 25   3....@(x:...O5.%\n+0020   0e 50 54 a5 4b 00 71 4f 81 00 81 80 a9 40 d1 00   .PT.K.qO.....@..\n+0030   d1 40 01 01 01 01 e2 68 00 a0 a0 40 2e 60 30 20   .@.....h...@.`0 \n+0040   36 00 81 91 21 00 00 1a 00 00 00 ff 00 50 48 35   6...!........PH5\n+0050   4e 59 32 43 49 41 4e 58 4c 0a 00 00 00 fc 00 44   NY2CIANXL......D\n+0060   45 4c 4c 20 55 33 30 31 31 0a 20 20 00 00 00 fd   ELL U3011.  ....\n+0070   00 31 56 1d 71 1c 00 0a 20 20 20 20 20 20 01 56   .1V.q...      .V\n   VCP version:         2.1\n   Controller mfg:      Mstar\n   Firmware version:    1.5", 
            "title": "ddcutil detect example"
        }, 
        {
            "location": "/cap_u3011_verbose_output/", 
            "text": "Below is the result of executing the \nddcutil capabilities\n command for a Dell U3011 monitor that \nddcutil\n has identified as display number 4.\n\n\n# ddcutil capabilities --display 4 --verbose\n\nOutput level:               Verbose\nReporting DDC data errors:  false\nTrace groups active:        none\n\nUnparsed capabilities string: (prot(monitor)type(lcd)model(U3011)cmds(01 02 03 07 0C E3 F3)vcp(02 04 05 06 08 10 12 14(01 05 08 0B 0C) 16 18 1A 52 60(01 03 04 0C 0F 11 12) AC AE B2 B6 C6 C8 C9 D6(01 04 05) DC(00 02 03 04 05) DF FD)mccs_ver(2.1)mswhql(1))\nMCCS version: 2.1\nCommands:\n  Command: 01 (VCP Request)\n  Command: 02 (VCP Response)\n  Command: 03 (VCP Set)\n  Command: 07 (Timing Request)\n  Command: 0c (Save Settings)\n  Command: e3 (Capabilities Reply)ls \n  Command: f3 (Capabilities Request)\nVCP Features:\n  Feature: 02 (New control value)\n  Feature: 04 (Restore factory defaults)\n  Feature: 05 (Restore factory brightness/contrast defaults)\n  Feature: 06 (Restore factory geometry defaults)\n  Feature: 08 (Restore color defaults)\n  Feature: 10 (Brightness)\n  Feature: 12 (Contrast)\n  Feature: 14 (Select color preset)\n    Values (unparsed): 01 05 08 0B 0C\n    Values (  parsed):\n       01: sRGB\n       05: 6500 K\n       08: 9300 K\n       0b: User 1\n       0c: User 2\n  Feature: 16 (Video gain: Red)\n  Feature: 18 (Video gain: Green)\n  Feature: 1A (Video gain: Blue)\n  Feature: 52 (Active control)\n  Feature: 60 (Input Source)\n    Values (unparsed): 01 03 04 0C 0F 11 12\n    Values (  parsed):\n       01: VGA-1\n       03: DVI-1\n       04: DVI-2\n       0c: Component video (YPrPb/YCrCb) 1\n       0f: DisplayPort-1\n       11: HDMI-1\n       12: HDMI-2\n  Feature: AC (Horizontal frequency)\n  Feature: AE (Vertical frequency)\n  Feature: B2 (Flat panel sub-pixel layout)\n  Feature: B6 (Display technology type)\n  Feature: C6 (Application enable key)\n  Feature: C8 (Display controller type)\n  Feature: C9 (Display firmware level)\n  Feature: D6 (Power mode)\n    Values (unparsed): 01 04 05\n    Values (  parsed):\n       01: DPM: On,  DPMS: Off\n       04: DPM: Off, DPMS: Off\n       05: Write only value to turn off display\n  Feature: DC (Display Mode)\n    Values (unparsed): 00 02 03 04 05\n    Values (  parsed):\n       00: Standard/Default mode\n       02: Mixed\n       03: Movie\n       04: User defined\n       05: Games\n  Feature: DF (VCP Version)\n  Feature: FD (manufacturer specific feature)", 
            "title": "ddcutil capabilities example"
        }, 
        {
            "location": "/getvcp_known_u3011_output/", 
            "text": "The following example shows the values of all VCP Feature Codes that \nddcutil\n understands for a Dell U3011 monitor attached at bus /dev/i2c-6.\n\n\n# ddcutil getvcp known --bus 6\n\nVCP code 0x02 (New control value             ): One or more new control values have been saved (0x02)\nVCP code 0x0b (Color temperature increment   ): Invalid value: 0\nVCP code 0x0c (Color temperature request     ): 3000 + 2 * (feature 0B color temp increment) degree(s) Kelvin\nVCP code 0x0e (Clock                         ): current value =    50, max value =   100\nVCP code 0x10 (Brightness                    ): current value =    57, max value =   100\nVCP code 0x12 (Contrast                      ): current value =    56, max value =   100\nVCP code 0x14 (Select color preset           ): sRGB (sl=0x01)\nVCP code 0x16 (Video gain: Red               ): current value =   100, max value =   100\nVCP code 0x18 (Video gain: Green             ): current value =   100, max value =   100\nVCP code 0x1a (Video gain: Blue              ): current value =   100, max value =   100\nVCP code 0x1e (Auto setup                    ): Auto setup not active (sl=0x00)\nVCP code 0x20 (Horizontal Position (Phase)   ): current value =    50, max value =   100\nVCP code 0x30 (Vertical Position (Phase)     ): current value =    50, max value =   100\nVCP code 0x3e (Clock phase                   ): current value =    31, max value =   100\nVCP code 0x52 (Active control                ): Value: 0x14\nVCP code 0x59 (6 axis saturation: Red        ): current value =    50, max value =   100\nVCP code 0x5a (6 axis saturation: Yellow     ): current value =    50, max value =   100\nVCP code 0x5b (6 axis saturation: Green      ): current value =    50, max value =   100\nVCP code 0x5c (6 axis saturation: Cyan       ): current value =    50, max value =   100\nVCP code 0x5d (6 axis saturation: Blue       ): current value =    50, max value =   100\nVCP code 0x5e (6 axis saturation: Magenta    ): current value =    50, max value =   100\nVCP code 0x60 (Input Source                  ): DisplayPort-1 (sl=0x0f)\nVCP code 0x6c (Video black level: Red        ): current value =    50, max value =   100\nVCP code 0x6e (Video black level: Green      ): current value =    50, max value =   100\nVCP code 0x70 (Video black level: Blue       ): current value =    50, max value =   100\nVCP code 0x87 (Sharpness                     ): current value =     8, max value =   100\nVCP code 0x8a (Color Saturation              ): current value =    50, max value =   100\nVCP code 0x90 (Hue                           ): current value =    50, max value =   100\nVCP code 0x9b (6 axis hue control: Red       ): current value =    50, max value =   100\nVCP code 0x9c (6 axis hue control: Yellow    ): current value =    50, max value =   100\nVCP code 0x9d (6 axis hue control: Green     ): current value =    50, max value =   100\nVCP code 0x9e (6 axis hue control: Cyan      ): current value =    50, max value =   100\nVCP code 0x9f (6 axis hue control: Blue      ): current value =    50, max value =   100\nVCP code 0xa0 (6 axis hue control: Magenta   ): current value =    50, max value =   100\nVCP code 0xac (Horizontal frequency          ): 32864 hz\nVCP code 0xae (Vertical frequency            ): 59.80 hz\nVCP code 0xb2 (Flat panel sub-pixel layout   ): Red/Green/Blue vertical stripe (sl=0x01)\nVCP code 0xb4 (Source Timing Mode            ): mh=0x00, ml=0x02, sh=0x00, sl=0x01\nVCP code 0xb6 (Display technology type       ): LCD (active matrix) (sl=0x03)\nVCP code 0xc0 (Display usage time            ): Usage time (hours) = 5199 (0x00144f) mh=0x00, ml=0x00, sh=0x14, sl=0x4f\nVCP code 0xc6 (Application enable key        ): 0x45cc\nVCP code 0xc8 (Display controller type       ): Mfg: Mstar (sl=0x05), controller number: mh=0x00, ml=0x94, sh=0x85\nVCP code 0xc9 (Display firmware level        ): 1.5\nVCP code 0xca (OSD                           ): OSD Enabled (sl=0x02)\nVCP code 0xcc (OSD Language                  ): English (sl=0x02)\nVCP code 0xd6 (Power mode                    ): DPM: On,  DPMS: Off (sl=0x01)\nVCP code 0xdc (Display Mode                  ): Standard/Default mode (sl=0x00)\nVCP code 0xdf (VCP Version                   ): 2.1", 
            "title": "ddcutil getvcp example"
        }, 
        {
            "location": "/colormgt/", 
            "text": "Color Management\n\n\nA primary use for \nddcutil\n is as part of color profile management.  A monitor calibration is meaningful only if the color settings on the monitor are the same as when the calibration was performed. \n\n\nNormally, monitor settings are changed by pressing buttons on the monitor bezel.  Depending on the monitor, the process ranges from annoying to excruciating.  \nddcutil\n allows this process to be automated.\n\n\nCommand \nddcutil dumpvcp\n saves the current color related monitor settings in a file, and \nddcutil loadvcp\n restores them from a file. \n\n\nIf implemented by the monitor, the VCP feature codes in feature group \nPROFILE\n are saved by \ndumpvcp\n and restored by \nloadvcp\n. \nThese are:\n\n\n\n\n10: Brightness\n\n\n12: Contrast\n\n\n13: Backlight control\n\n\n14: Video gain: Red\n\n\n16: Video gain: Green\n\n\n18: Video gain: Blue\n\n\n6B: Backlight level: White\n\n\n6C: Video black level: Red\n\n\n6D: Backlight Level: Red\n\n\n6E: Video black level: Green\n\n\n6F: Backlight level: Green\n\n\n70: Video black level: Blue\n\n\n71: Backlight Level: Blue\n\n\n\n\nTo see the list of feature codes saved and restored, you can also issue the command: \n\n\nddcutil vcpinfo profile --terse\n\n\n\n\nColor Management Workflow\n\n\nTo discuss: \n\n\n\n\n\n\nSave profile related VCP values in a custom tag in monitor profile file instead of a separate file\n\n\n\n\n\n\nHaving a GUI for ddcutil would make monitor color adjustment much easier.   Such as GUI could be shown along size the \ndispcal\n color balance screen shown at the start of calibration.\n\n\n\n\n\n\nAPI access to dump/load features for simpler integration with other programs.\n\n\n\n\n\n\nMonitor Lookup Tables\n\n\nTypically, monitor calibration creates a color lookup table that is loaded into the video card.  Advanced monitors, such as the HP Dreamcolor LP2480zx, NEC PA241, Eizos, and even a few \"prosumer\" models such as the recent Dell U2413 have an internal lookup table.   Typically, these monitors have a software development kit with an API for accessing the LUT, and typically thse SDKs support Linux either poorly or not at all.  However, the internal lookup table can also be accessed using the following VCP feature codes: \n\n\n\n\n73: LUT size\n\n\n74: Single point LUT operation\n\n\n75: Block LUT operation\n\n\n76: Remote procedure call\n\n\n\n\nThese are what MCCS categorizes as \"Table\" type features.   Reading and writing table type features is implemented in \nddcutil\n, but has not yet been tested for lack of a monitor to test with.", 
            "title": "Color Management"
        }, 
        {
            "location": "/colormgt/#color-management", 
            "text": "A primary use for  ddcutil  is as part of color profile management.  A monitor calibration is meaningful only if the color settings on the monitor are the same as when the calibration was performed.   Normally, monitor settings are changed by pressing buttons on the monitor bezel.  Depending on the monitor, the process ranges from annoying to excruciating.   ddcutil  allows this process to be automated.  Command  ddcutil dumpvcp  saves the current color related monitor settings in a file, and  ddcutil loadvcp  restores them from a file.   If implemented by the monitor, the VCP feature codes in feature group  PROFILE  are saved by  dumpvcp  and restored by  loadvcp . \nThese are:   10: Brightness  12: Contrast  13: Backlight control  14: Video gain: Red  16: Video gain: Green  18: Video gain: Blue  6B: Backlight level: White  6C: Video black level: Red  6D: Backlight Level: Red  6E: Video black level: Green  6F: Backlight level: Green  70: Video black level: Blue  71: Backlight Level: Blue   To see the list of feature codes saved and restored, you can also issue the command:   ddcutil vcpinfo profile --terse", 
            "title": "Color Management"
        }, 
        {
            "location": "/colormgt/#color-management-workflow", 
            "text": "To discuss:     Save profile related VCP values in a custom tag in monitor profile file instead of a separate file    Having a GUI for ddcutil would make monitor color adjustment much easier.   Such as GUI could be shown along size the  dispcal  color balance screen shown at the start of calibration.    API access to dump/load features for simpler integration with other programs.", 
            "title": "Color Management Workflow"
        }, 
        {
            "location": "/colormgt/#monitor-lookup-tables", 
            "text": "Typically, monitor calibration creates a color lookup table that is loaded into the video card.  Advanced monitors, such as the HP Dreamcolor LP2480zx, NEC PA241, Eizos, and even a few \"prosumer\" models such as the recent Dell U2413 have an internal lookup table.   Typically, these monitors have a software development kit with an API for accessing the LUT, and typically thse SDKs support Linux either poorly or not at all.  However, the internal lookup table can also be accessed using the following VCP feature codes:    73: LUT size  74: Single point LUT operation  75: Block LUT operation  76: Remote procedure call   These are what MCCS categorizes as \"Table\" type features.   Reading and writing table type features is implemented in  ddcutil , but has not yet been tested for lack of a monitor to test with.", 
            "title": "Monitor Lookup Tables"
        }, 
        {
            "location": "/tuning/", 
            "text": "Instrumentation and Tuning\n\n\nI2C is an inherently unreliable protocol, requiring retry management.  Furthermore, 90% of\nddcutil's elapsed time is spent in timeouts mandated by the DDC specification.    \n\n\nddcutil has extensive facilities for reporting protocol errors, retry counts, \nand peformance statistics, and some ability to tweak execution parameters from\nthe command line.\n\n\nThe relevant options are:\n\n\n\n\n\n\n\n\nOption\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\n--stats\n\n\nreport execution statistics\n\n\n\n\n\n\n--ddc\n\n\nreport DDC protocol errors\n\n\n\n\n\n\n--maxtries()\n\n\nsets maximum tries\n\n\n\n\n\n\n\n\nOption --ddc\n\n\nIf option \n--ddc\n is specified, \nddcutil\n reports protocol errors that it detects.  These may reflect I2C bus errors, or deviations by monitors from the MCCS specfication.  Most I2C errors cause a retry.  Some monitors are very clean.  Others, like the Dell P2411h, are very dirty. \n\n\nOption --stats\n\n\nOption \n--stats\n causes \nddcutil\n to report execution statistics.  It takes the following optional arguments: \n\n\n\n\n\n\n\n\n--stats Argument\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nerrors\n\n\nReport I2C/DDC error counts\n\n\n\n\n\n\ntries\n\n\nReport retry statistics\n\n\n\n\n\n\ncalls\n\n\nReport system call counts and time\n\n\n\n\n\n\nall\n\n\nReport all statistics\n\n\n\n\n\n\n\n\nIf \n--stats all\n is specified, or no argument is given, then all statistics are output. \n\n\nOption --maxtries\n\n\nThere are 3 kinds of exchanges in which retry is possible: \n\n\n\n\nwrite-only exchange.  Bytes are written with no subsequent read.\n\n  Used only to set a VCP feature value.  \n\n\nwrite-read exchange.  A write to the monitor, followed by a read.\n\n  Most DDC protocol exchanges are of this form.\n\n\nmulti-part exchange.  This is a \"meta\" exchange, consisting multiple \n  write-read exchanges. Used to query monitor capabilities, and for \n  querying and setting Table type VCP features. \n\n\n\n\nBy default, the maximum number of tries for each exchange is:\n\n\n\n\nwrite-only exchange:    4\n\n\nwrite-read exchange:   10\n\n\nmulti-part exchange:    8\n\n\n\n\nOption \n--maxtries\n allows you to play with the maximum try count.  Its argument\nonsists of 3 comma-separated values.  The following example sets the maximum \ntry counts to 3 for write-only exchanges, 6 for write-read exchanges, and 9 \nfor multi-part exchanges.\n\n\n--maxtries(3,6,9) \n\n\n\n\nA blank value leaves the corresponding try count unchanged.   The following \nexample changes only the maximum write-read try count:\n\n\n--maxtries(,7,) \n\n\n\n\nThe maximum maximum value is 15.", 
            "title": "Instrumentation and Tuning"
        }, 
        {
            "location": "/tuning/#instrumentation-and-tuning", 
            "text": "I2C is an inherently unreliable protocol, requiring retry management.  Furthermore, 90% of\nddcutil's elapsed time is spent in timeouts mandated by the DDC specification.      ddcutil has extensive facilities for reporting protocol errors, retry counts, \nand peformance statistics, and some ability to tweak execution parameters from\nthe command line.  The relevant options are:     Option  Function      --stats  report execution statistics    --ddc  report DDC protocol errors    --maxtries()  sets maximum tries", 
            "title": "Instrumentation and Tuning"
        }, 
        {
            "location": "/tuning/#option-ddc", 
            "text": "If option  --ddc  is specified,  ddcutil  reports protocol errors that it detects.  These may reflect I2C bus errors, or deviations by monitors from the MCCS specfication.  Most I2C errors cause a retry.  Some monitors are very clean.  Others, like the Dell P2411h, are very dirty.", 
            "title": "Option --ddc"
        }, 
        {
            "location": "/tuning/#option-stats", 
            "text": "Option  --stats  causes  ddcutil  to report execution statistics.  It takes the following optional arguments:      --stats Argument  Action      errors  Report I2C/DDC error counts    tries  Report retry statistics    calls  Report system call counts and time    all  Report all statistics     If  --stats all  is specified, or no argument is given, then all statistics are output.", 
            "title": "Option --stats"
        }, 
        {
            "location": "/tuning/#option-maxtries", 
            "text": "There are 3 kinds of exchanges in which retry is possible:    write-only exchange.  Bytes are written with no subsequent read. \n  Used only to set a VCP feature value.    write-read exchange.  A write to the monitor, followed by a read. \n  Most DDC protocol exchanges are of this form.  multi-part exchange.  This is a \"meta\" exchange, consisting multiple \n  write-read exchanges. Used to query monitor capabilities, and for \n  querying and setting Table type VCP features.    By default, the maximum number of tries for each exchange is:   write-only exchange:    4  write-read exchange:   10  multi-part exchange:    8   Option  --maxtries  allows you to play with the maximum try count.  Its argument\nonsists of 3 comma-separated values.  The following example sets the maximum \ntry counts to 3 for write-only exchanges, 6 for write-read exchanges, and 9 \nfor multi-part exchanges.  --maxtries(3,6,9)   A blank value leaves the corresponding try count unchanged.   The following \nexample changes only the maximum write-read try count:  --maxtries(,7,)   The maximum maximum value is 15.", 
            "title": "Option --maxtries"
        }, 
        {
            "location": "/table_features/", 
            "text": "Table Features\n\n\nSome VCP features are designated as type Table (T), as opposed to Continuous (C) or Non-Continuous (NC).\nRead and write requests for table features transmit blocks of data.\nIn particular, LUT related features are of type Table. \n\n\nddcutil\n exposes table feature values as uninterpreted hex strings,\ne.g. \n\n\nddcutil setvcp 60 01020304F1F2FEFF\n\n\n\n\nTable features support is currently implemented over DDC/CI, but has never been tested with an actual monitor. \n\n\nTo see the list of Table features, issue the command: \n\n\nddcutil vcpinfo table\n\n\n\n\nNote, however, that feature selection in vcpinfo is not properly version sensitive.  This need to change, as \nwhether a feature is of type Table can vary with MCCS version\n\n\n\n\n\n\n\n\nCode\n\n\nFeature\n\n\nVersion Detail\n\n\n\n\n\n\n\n\n\n\n60\n\n\nSelect Active Video Source\n\n\nType NC in Versions 2.0 through 2.2\n\n\n\n\n\n\na4\n\n\nControl Selected Window Operation\n\n\nType NC in MCCS 2.0, T in 3.0, 2.2\n\n\n\n\n\n\nb4\n\n\nHost time mode\n\n\nType NC in MCCS 2.0, 2.1, T in 3.0, 2.2\n\n\n\n\n\n\nd0\n\n\nSelect Active Output\n\n\nType T in MCCS 3.0, NC otherwise", 
            "title": "Table Type Features"
        }, 
        {
            "location": "/table_features/#table-features", 
            "text": "Some VCP features are designated as type Table (T), as opposed to Continuous (C) or Non-Continuous (NC).\nRead and write requests for table features transmit blocks of data.\nIn particular, LUT related features are of type Table.   ddcutil  exposes table feature values as uninterpreted hex strings,\ne.g.   ddcutil setvcp 60 01020304F1F2FEFF  Table features support is currently implemented over DDC/CI, but has never been tested with an actual monitor.   To see the list of Table features, issue the command:   ddcutil vcpinfo table  Note, however, that feature selection in vcpinfo is not properly version sensitive.  This need to change, as \nwhether a feature is of type Table can vary with MCCS version     Code  Feature  Version Detail      60  Select Active Video Source  Type NC in Versions 2.0 through 2.2    a4  Control Selected Window Operation  Type NC in MCCS 2.0, T in 3.0, 2.2    b4  Host time mode  Type NC in MCCS 2.0, 2.1, T in 3.0, 2.2    d0  Select Active Output  Type T in MCCS 3.0, NC otherwise", 
            "title": "Table Features"
        }, 
        {
            "location": "/usb/", 
            "text": "USB Connected Monitors\n\n\nddcutil\n has initial support for monitors that implement the Monitor Control Command Set (MCCS) over USB.\nThe support is considered initial in that it has only been tested with only a few models of USB connected monitors.\n\n\nNote that some monitors use USB to communicate, but do not follow the specification for MCCS over USB. \nFor example, the HP Dreamcolor 2480zx uses a proprietary, undocumented protocol. \n\n\nLimitations: \n\n- The MCCS over USB specification has no method for querying a capabilities string.  The \nddcutil capabilities\n \ncommand synthesizes a response based on the feature codes it detects. \n\n- Table type features are completely unsupported.\n\n- Apple Thunderbolt displays might work, but are not supported.  Thunderbolt integrates video, USB, and ethernet into a single cable, and \nappears to require a Thunderbolt capable capable computer, as I can find no adapters that split out all the signals.\nOther than actual Macs, these are uncommon.\n\n\nOn the other hand, MCCS over USB has advantages:\n\n- Unlike I2C, the protocol is inherently reliable.  No retry logic is needed.\n\n- Unlike I2C, USB communication does not require waits between system calls.  It is therefore faster. \n\n\nThanks to Ojdrej Zary, whose \nusbmonctl\n was used as the basis for USB support in \nddcutil\n.\n\n\nCommand \nddcutil chkusbmon\n\n\nCommand \nddcutil chkusbmon\n helps to detect USB HID compliant monitors.  It is intended for use in udev rules.\n\n\nddcutil chkusbmon ***hiddev device name***\n\n\n\n\ne.g. \n\n\nddcutil chkusbmon /dev/usb/hiddev3 \n\n\n\n\nReturns 0 if a device represents a USB attached monitor, non-zero if not.  See \nDevice Permissions\n\n\nCommand option --usb\n\n\nUSB connected monitors can be specified by their USB bus number and device number.  The numbers are separated by either a period or colon.\n\n\nFor example: \n\n\nddcutil --usb 3.5 ...\n\n\n\n\nselects the monitor at USB bus number 3, device number 5.  \n\n\nTo see a list of all USB devices: \n\n\nlsusb", 
            "title": "USB Connected Monitors"
        }, 
        {
            "location": "/usb/#usb-connected-monitors", 
            "text": "ddcutil  has initial support for monitors that implement the Monitor Control Command Set (MCCS) over USB.\nThe support is considered initial in that it has only been tested with only a few models of USB connected monitors.  Note that some monitors use USB to communicate, but do not follow the specification for MCCS over USB. \nFor example, the HP Dreamcolor 2480zx uses a proprietary, undocumented protocol.   Limitations:  \n- The MCCS over USB specification has no method for querying a capabilities string.  The  ddcutil capabilities  \ncommand synthesizes a response based on the feature codes it detects.  \n- Table type features are completely unsupported. \n- Apple Thunderbolt displays might work, but are not supported.  Thunderbolt integrates video, USB, and ethernet into a single cable, and \nappears to require a Thunderbolt capable capable computer, as I can find no adapters that split out all the signals.\nOther than actual Macs, these are uncommon.  On the other hand, MCCS over USB has advantages: \n- Unlike I2C, the protocol is inherently reliable.  No retry logic is needed. \n- Unlike I2C, USB communication does not require waits between system calls.  It is therefore faster.   Thanks to Ojdrej Zary, whose  usbmonctl  was used as the basis for USB support in  ddcutil .", 
            "title": "USB Connected Monitors"
        }, 
        {
            "location": "/usb/#command-ddcutil-chkusbmon", 
            "text": "Command  ddcutil chkusbmon  helps to detect USB HID compliant monitors.  It is intended for use in udev rules.  ddcutil chkusbmon ***hiddev device name***  e.g.   ddcutil chkusbmon /dev/usb/hiddev3   Returns 0 if a device represents a USB attached monitor, non-zero if not.  See  Device Permissions", 
            "title": "Command ddcutil chkusbmon"
        }, 
        {
            "location": "/usb/#command-option-usb", 
            "text": "USB connected monitors can be specified by their USB bus number and device number.  The numbers are separated by either a period or colon.  For example:   ddcutil --usb 3.5 ...  selects the monitor at USB bus number 3, device number 5.    To see a list of all USB devices:   lsusb", 
            "title": "Command option --usb"
        }, 
        {
            "location": "/building/", 
            "text": "Building From Source\n\n\nBuilding from tarball\n\n\nddcutil\n can be built from its \ntarball\n in the usual way.\nUnpack the tar file, change to its directory, and issue the commands: \n\n\n# ./configure\n# make\n# sudo make install\n\n\n\n\nNote that additional steps are required to build \nddcutil\n with \nADL\n support.\nSee \nADL support\n.\n\n\nconfigure\n options\n\n\nThe \nconfigure\n script has several custom options.  Some reflect features under development.\nThe currently supported options are:\n\n\n\n\n\n\n\n\nOption\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\n--with-adl \n\n\nBuild with support for ADL connected monitors. See below\n\n\n\n\n\n\n--disable-usb\n\n\nDo not build with support for USB connected monitors.  Reduces size and package requirements. (Default is --enable-usb.)\n\n\n\n\n\n\n\n\nRequired packages\n\n\nBecause of the variation among distributions, only general guidelines can be \ngiven for ddcutil prerequisites.  Ultimately, you'll have to try to build ddcutil and see what breaks.\n\n\nddcutil requires the following packages for both building and execution:\n\n\n\n\ni2c-tools\n\n\nglib-2.0  (Note: glib-2.0 can be packaged with different names, e.g. libglib2.0-0, and may entail installing multiple packages.)\n\n\nlibgudev  (e.g. libgudev1)\n\n\nlibusb-1.0 (e.g. libusb-1.0-0) \n\n\nlibudev (e.g. libudev1)\n\n\n\n\nOn most platforms, development related files (e.g. headers files) are in separate packages having a \n\"-dev\" or similar suffix in their names.   ddcutil needs development packages for:\n\n\n\n\nglib2.0 (e.g. libglib2.0-0)\n\n\nlibusb (e.g. libusb-1_0-devel, libusb-1.0-0-dev)\n\n\npython (e.g. python-all-dev)\n\n\nudev or systemd  (udev may be part of systemd, e.g. libudev-devel, libudev-dev)\n\n\nx11 (e.g. libx11-dev)\n\n\nxrandr (e.g. libxrandr-dev)\n\n\n\n\nAt least on Ubuntu, the i2c.h header file is found in a separate package. \n\nIf the following package exists, it is required to build ddcutil.\n\n\n\n\nlibi2c-dev \n\n\n\n\nError messages in this regard from autoconf can be misleading.  If autoconf complains that a package \nis not found but it seems to be installed, it's likely that the associated development package \n(with a suffix like \"-dev\") needs to be installed.\n\n\nBuilding requires that the core build files be installed (e.g. build-essential on Ubuntu) and \nalso the pkg-config system. \n\n\n\n\npkg-config\n\n\n\n\nBuilding from git\n\n\nThe git repository for \nddcutil\n is \nhere\n\n\n\n\n\n\nBuilding \nddcutil\n from git requires that the \nautotools\n related packages be installed.\n\nThe exact packages vary from distribution to distribution.   On Ubuntu, these include:\n\n\n\n\nautoconf  \n\n\nautomake  \n\n\nautotools-dev  \n\n\nlibtool  \n\n\nm4  \n\n\n\n\n\n\n\n\nTo configure the build, change to the main \nddcutil\n directory and execute the file: \n\n\n# ./autogen.sh\n\n\n\n\nOr issue the individual commands: \n\n\n# aclocal\n# autoconf\n# automake\n\n\n\n\nThen to configure, build, and install \nddcutil\n: \n\n\n# ./configure\n# make\n# sudo make install\n\n\n\n\nCommon issues:\n\n\n\n\nBuilding with support for the AMD proprietary video driver (fglrx) requires that \nconfigure\n be executed using \nthe \n-with-adl-headers\n argument.  See \nADL support\n.  \n\n\nIf you see a message \"required file './ltmain.sh.' not found\", run \nlibtoolize\n\n  (See https://www.gnu.org/software/automake/manual/html_node/Error-required-file-ltmain_002esh-not-found.html)  \n\n\nMay get the following warning when running automake\n\n\n\n\nsrc/Makefile.am:38: warning: compiling 'cmdline/cmd_parser_aux.c' in subdir requires 'AM_PROG_CC_C_O' in 'configure.ac'\n\n\n\n\nThis is an autotools versioning issue.  It appears that this warning can be ignored.\n\n- (need notes on other warnings that can be ignored)", 
            "title": "Building From Source"
        }, 
        {
            "location": "/building/#building-from-source", 
            "text": "", 
            "title": "Building From Source"
        }, 
        {
            "location": "/building/#building-from-tarball", 
            "text": "ddcutil  can be built from its  tarball  in the usual way.\nUnpack the tar file, change to its directory, and issue the commands:   # ./configure\n# make\n# sudo make install  Note that additional steps are required to build  ddcutil  with  ADL  support.\nSee  ADL support .", 
            "title": "Building from tarball"
        }, 
        {
            "location": "/building/#configure-options", 
            "text": "The  configure  script has several custom options.  Some reflect features under development.\nThe currently supported options are:     Option  Purpose      --with-adl   Build with support for ADL connected monitors. See below    --disable-usb  Do not build with support for USB connected monitors.  Reduces size and package requirements. (Default is --enable-usb.)", 
            "title": "configure options"
        }, 
        {
            "location": "/building/#required-packages", 
            "text": "Because of the variation among distributions, only general guidelines can be \ngiven for ddcutil prerequisites.  Ultimately, you'll have to try to build ddcutil and see what breaks.  ddcutil requires the following packages for both building and execution:   i2c-tools  glib-2.0  (Note: glib-2.0 can be packaged with different names, e.g. libglib2.0-0, and may entail installing multiple packages.)  libgudev  (e.g. libgudev1)  libusb-1.0 (e.g. libusb-1.0-0)   libudev (e.g. libudev1)   On most platforms, development related files (e.g. headers files) are in separate packages having a \n\"-dev\" or similar suffix in their names.   ddcutil needs development packages for:   glib2.0 (e.g. libglib2.0-0)  libusb (e.g. libusb-1_0-devel, libusb-1.0-0-dev)  python (e.g. python-all-dev)  udev or systemd  (udev may be part of systemd, e.g. libudev-devel, libudev-dev)  x11 (e.g. libx11-dev)  xrandr (e.g. libxrandr-dev)   At least on Ubuntu, the i2c.h header file is found in a separate package.  \nIf the following package exists, it is required to build ddcutil.   libi2c-dev    Error messages in this regard from autoconf can be misleading.  If autoconf complains that a package \nis not found but it seems to be installed, it's likely that the associated development package \n(with a suffix like \"-dev\") needs to be installed.  Building requires that the core build files be installed (e.g. build-essential on Ubuntu) and \nalso the pkg-config system.    pkg-config", 
            "title": "Required packages"
        }, 
        {
            "location": "/building/#building-from-git", 
            "text": "The git repository for  ddcutil  is  here    Building  ddcutil  from git requires that the  autotools  related packages be installed. \nThe exact packages vary from distribution to distribution.   On Ubuntu, these include:   autoconf    automake    autotools-dev    libtool    m4       To configure the build, change to the main  ddcutil  directory and execute the file:   # ./autogen.sh  Or issue the individual commands:   # aclocal\n# autoconf\n# automake  Then to configure, build, and install  ddcutil :   # ./configure\n# make\n# sudo make install  Common issues:   Building with support for the AMD proprietary video driver (fglrx) requires that  configure  be executed using \nthe  -with-adl-headers  argument.  See  ADL support .    If you see a message \"required file './ltmain.sh.' not found\", run  libtoolize \n  (See https://www.gnu.org/software/automake/manual/html_node/Error-required-file-ltmain_002esh-not-found.html)    May get the following warning when running automake   src/Makefile.am:38: warning: compiling 'cmdline/cmd_parser_aux.c' in subdir requires 'AM_PROG_CC_C_O' in 'configure.ac'  This is an autotools versioning issue.  It appears that this warning can be ignored. \n- (need notes on other warnings that can be ignored)", 
            "title": "Building from git"
        }, 
        {
            "location": "/i2c_permissions/", 
            "text": "Device Permissions\n\n\nExcept when using AMD's proprietary driver (see \nhere\n) ddcutil requires \nwrite access to /dev/i2c-*.  \n\n\nOn some distributions, package i2c-tools creates group i2c, and assigns that the group to\n/dev/i2c-* devices using a udev rule. In that case all that is necessary is to add your user\nname to group i2c: \n\n\n# sudo usermod your-user-name -G i2c\n\n\n\n\nFor testing, it may be simpler to give everyone permission to write to \n/dev/i2c-* for the current boot:\n\n\n#  sudo chmod a+rw /dev/i2c-*\n\n\n\n\nIf needed, a udev rule for giving group i2c RW permission on the /i2c-dev-* devices \ncan be found in distributed file \n45-ddcutils-i2c.rules\n.  It can be copied to \n/etc/udef/rules.d, but do check that this rule does not conflict with others in that directory.\n\n\n# sudo cp /usr/share/ddcutil/data/etc/udev/rules.d/45-ddcutils-i2c.rules /etc/udev/rules.d\n\n\n\n\nIf using a monitor that transmits MCCS over USB, ddcutil requires read/write access to device\n/dev/usb/hiddev\nN\n, where \nN\n is the number for the device representing the monitor's USB connection.\n\n\nddcutil has to be careful when accessing the /dev/usb/hiddev* devices, as some of these \ncan represent USB attached input devices such as keyboards or mice. \n\n\nDistributed file \n45-ddcutil-usb.rules\n shows a couple ways to give ddcutil the required \naccess.  This file can be copied to /etc/udev/rules.d.  All but one of the command lines in \nthat file should commented out. \n\n\nThe following rule gives group \nvideo\n access to the USB port of an Apple Cinema Display by specifying its \nUSB device user id (aka uid) and product id (aka pid):\n\n\nSUBSYSTEM==\nusbmisc\n, ATTRS{idVendor}==\n05ac\n, ATTRS{idProduct}==\n9223\n,  MODE=\n0666\n \n\n\n\n\nThis line would of course have to edited for your monitor.  One way to find its uid/pid is the \n\nlsusb\n command. \n\n\nAn alternative way to set proper device permissions is to call \nddcutil\n from the udev rule \nto test whether a device is a HID compliant monitor: \n\n\nSUBSYSTEM==\nusbmisc\n,  KERNEL==\nhiddev*\n, PROGRAM=\n/usr/local/bin/ddcutil chkusbmon $env{DEVNAME} -v\n, MODE=\n0660\n, GROUP=\nvideo\n\n\n\n\n\nNote that the path to the ddcutil executable will have be edited to the location where ddcutil installed on your system. \n\n\nThe -v option produces informational messages.  These are lost when the rule is normally executed by\nudev, but can be helpful when rules are tested using the \"udevadm test\" command. \n\n\nDistribution\nfile \n45-ddcutils-usb.rules\n contains sample udev rules to set permissions for USB connector monitors. \nIt can be copied to \n/etc/udev/rules.d, but do check that this rule does not conflict with others in that directory.\n\n\n# sudo cp /usr/share/ddcutil/data/etc/udev/rules.d/45-ddcutils-usb.rules /etc/udev/rules.d\n\n\n\n\nBear in mind when looking at the variety of udev rules is that there are often several valid ways to identify a device.\n\n\nThe following section from the udev documentation \n(\nhttps://www.kernel.org/pub/linux/utils/kernel/hotplug/udev/udev.html\n) \nmay be helpful:\n\n\n\n\nThe udev rules are read from the files located in the system rules directory \n/usr/lib/udev/rules.d, the volatile runtime directory /run/udev/rules.d and \nthe local administration directory /etc/udev/rules.d. All rules files are \ncollectively sorted and processed in lexical order, regardless of the directories \nin which they live. However, files with identical file names replace each other. \nFiles in /etc have the highest priority, files in /run take precedence over files \nwith the same name in /lib. This can be used to override a system-supplied rules \nfile with a local file if needed; a symlink in /etc with the same name as a rules \nfile in /lib, pointing to /dev/null, disables the rules file entirely.", 
            "title": "Device Permissions"
        }, 
        {
            "location": "/i2c_permissions/#device-permissions", 
            "text": "Except when using AMD's proprietary driver (see  here ) ddcutil requires \nwrite access to /dev/i2c-*.    On some distributions, package i2c-tools creates group i2c, and assigns that the group to\n/dev/i2c-* devices using a udev rule. In that case all that is necessary is to add your user\nname to group i2c:   # sudo usermod your-user-name -G i2c  For testing, it may be simpler to give everyone permission to write to \n/dev/i2c-* for the current boot:  #  sudo chmod a+rw /dev/i2c-*  If needed, a udev rule for giving group i2c RW permission on the /i2c-dev-* devices \ncan be found in distributed file  45-ddcutils-i2c.rules .  It can be copied to \n/etc/udef/rules.d, but do check that this rule does not conflict with others in that directory.  # sudo cp /usr/share/ddcutil/data/etc/udev/rules.d/45-ddcutils-i2c.rules /etc/udev/rules.d  If using a monitor that transmits MCCS over USB, ddcutil requires read/write access to device\n/dev/usb/hiddev N , where  N  is the number for the device representing the monitor's USB connection.  ddcutil has to be careful when accessing the /dev/usb/hiddev* devices, as some of these \ncan represent USB attached input devices such as keyboards or mice.   Distributed file  45-ddcutil-usb.rules  shows a couple ways to give ddcutil the required \naccess.  This file can be copied to /etc/udev/rules.d.  All but one of the command lines in \nthat file should commented out.   The following rule gives group  video  access to the USB port of an Apple Cinema Display by specifying its \nUSB device user id (aka uid) and product id (aka pid):  SUBSYSTEM== usbmisc , ATTRS{idVendor}== 05ac , ATTRS{idProduct}== 9223 ,  MODE= 0666    This line would of course have to edited for your monitor.  One way to find its uid/pid is the  lsusb  command.   An alternative way to set proper device permissions is to call  ddcutil  from the udev rule \nto test whether a device is a HID compliant monitor:   SUBSYSTEM== usbmisc ,  KERNEL== hiddev* , PROGRAM= /usr/local/bin/ddcutil chkusbmon $env{DEVNAME} -v , MODE= 0660 , GROUP= video   Note that the path to the ddcutil executable will have be edited to the location where ddcutil installed on your system.   The -v option produces informational messages.  These are lost when the rule is normally executed by\nudev, but can be helpful when rules are tested using the \"udevadm test\" command.   Distribution\nfile  45-ddcutils-usb.rules  contains sample udev rules to set permissions for USB connector monitors. \nIt can be copied to \n/etc/udev/rules.d, but do check that this rule does not conflict with others in that directory.  # sudo cp /usr/share/ddcutil/data/etc/udev/rules.d/45-ddcutils-usb.rules /etc/udev/rules.d  Bear in mind when looking at the variety of udev rules is that there are often several valid ways to identify a device.  The following section from the udev documentation \n( https://www.kernel.org/pub/linux/utils/kernel/hotplug/udev/udev.html ) \nmay be helpful:   The udev rules are read from the files located in the system rules directory \n/usr/lib/udev/rules.d, the volatile runtime directory /run/udev/rules.d and \nthe local administration directory /etc/udev/rules.d. All rules files are \ncollectively sorted and processed in lexical order, regardless of the directories \nin which they live. However, files with identical file names replace each other. \nFiles in /etc have the highest priority, files in /run take precedence over files \nwith the same name in /lib. This can be used to override a system-supplied rules \nfile with a local file if needed; a symlink in /etc with the same name as a rules \nfile in /lib, pointing to /dev/null, disables the rules file entirely.", 
            "title": "Device Permissions"
        }, 
        {
            "location": "/kernel_module/", 
            "text": "Kernel Module Configuration\n\n\nIf using an open source video driver, kernel module i2c-dev must be available.\nOn some distributions, it is built into the Linux kernel.  If not, it must be loaded explicitly. \n\n\nTo see if i2c-dev is built into the kernel, issue the following command: \n\n\ngrep i2c-dev.ko  /lib/modules/`uname -r`/modules.builtin\n\n\n\n\nIf i2c-dev is not built in, add the line \"i2c_dev\" to /etc/modules or a file containing the single line:\n\n\ni2c_dev\n\n\n\n\nto directory /etc/modules-load.d\n\n\n\n\n\nFrom the freedesktop.org systemd doc: \n\n\n\n\nsystemd-modules-load.service(8) reads files from the [following]directories\nwhich contain kernel modules to load during boot in a static list. \n\n\n/etc/modules-load.d/\n.conf\n/run/modules-load.d/\n.conf\n/usr.lib.modules-load.d/*.conf\n\n\nEach configuration file is named in the style of /etc/modules-load.d/program.conf. \nNote that it is usually a better idea to rely on the automatic module loading \nby PCI IDs, USB IDs, DMI IDs or similar triggers encoded in the kernel modules \nthemselves instead of static configuration like this. In fact, most modern \nkernel modules are prepared for automatic loading already.", 
            "title": "Kernel Module Configuration"
        }, 
        {
            "location": "/kernel_module/#kernel-module-configuration", 
            "text": "If using an open source video driver, kernel module i2c-dev must be available.\nOn some distributions, it is built into the Linux kernel.  If not, it must be loaded explicitly.   To see if i2c-dev is built into the kernel, issue the following command:   grep i2c-dev.ko  /lib/modules/`uname -r`/modules.builtin  If i2c-dev is not built in, add the line \"i2c_dev\" to /etc/modules or a file containing the single line:  i2c_dev  to directory /etc/modules-load.d   From the freedesktop.org systemd doc:    systemd-modules-load.service(8) reads files from the [following]directories\nwhich contain kernel modules to load during boot in a static list.   /etc/modules-load.d/ .conf\n/run/modules-load.d/ .conf\n/usr.lib.modules-load.d/*.conf  Each configuration file is named in the style of /etc/modules-load.d/program.conf. \nNote that it is usually a better idea to rely on the automatic module loading \nby PCI IDs, USB IDs, DMI IDs or similar triggers encoded in the kernel modules \nthemselves instead of static configuration like this. In fact, most modern \nkernel modules are prepared for automatic loading already.", 
            "title": "Kernel Module Configuration"
        }, 
        {
            "location": "/nvidia/", 
            "text": "Special Nvidia driver settings\n\n\nWhen using Nvidia's proprietary driver, I2C communication fails on some cards. \n\n\nIt works on several older Nvidia cards I have, but failed with my more recent \nGTX660Ti. (Specfically, I2C reads of 1 or 2 bytes succeeded, but reads of 3 \nor more bytes failed.)  Others have reported similar problems. \n\n\nPer \nthis discussion\n, adding the \nfollowing to the \"Device\" section for the Nvidia driver resolves the problem for some cards:\n\n\n Option     \nRegistryDwords\n  \nRMUseSwI2c=0x01; RMI2cSpeed=100\n\n\n\n\n\nA file for making this change is 90-nvidia_i2c.conf located in distribution \n directory data/etc/X11/xorg.conf.d  \n\n\nSection \nDevice\n\n   Driver \nnvidia\n\n   Identifier \nDev0\n\n   Option     \nRegistryDwords\n  \nRMUseSwI2c=0x01; RMI2cSpeed=100\n\n   # solves problem of i2c errors with nvidia driver\n   # per https://devtalk.nvidia.com/default/topic/572292/-solved-does-gddccontrol-work-for-anyone-here-nvidia-i2c-monitor-display-ddc/#4309293\nEndSection\n\n\n\n\nCopy this file to /etc/X11/xorg.conf.d  \n\n\nNote: This file works if there is no /etc/X11/xorg.conf file.  If you do have an \nxorg.conf file the Identifier field will likely require modification.\n\n\nThis does not, however, appear to be a universal solution.  It has been reported to fail on a GTX960 with Nvidia driver version 358.16.", 
            "title": "Special Nvidia Driver Settings"
        }, 
        {
            "location": "/nvidia/#special-nvidia-driver-settings", 
            "text": "When using Nvidia's proprietary driver, I2C communication fails on some cards.   It works on several older Nvidia cards I have, but failed with my more recent \nGTX660Ti. (Specfically, I2C reads of 1 or 2 bytes succeeded, but reads of 3 \nor more bytes failed.)  Others have reported similar problems.   Per  this discussion , adding the \nfollowing to the \"Device\" section for the Nvidia driver resolves the problem for some cards:   Option      RegistryDwords    RMUseSwI2c=0x01; RMI2cSpeed=100   A file for making this change is 90-nvidia_i2c.conf located in distribution \n directory data/etc/X11/xorg.conf.d    Section  Device \n   Driver  nvidia \n   Identifier  Dev0 \n   Option      RegistryDwords    RMUseSwI2c=0x01; RMI2cSpeed=100 \n   # solves problem of i2c errors with nvidia driver\n   # per https://devtalk.nvidia.com/default/topic/572292/-solved-does-gddccontrol-work-for-anyone-here-nvidia-i2c-monitor-display-ddc/#4309293\nEndSection  Copy this file to /etc/X11/xorg.conf.d    Note: This file works if there is no /etc/X11/xorg.conf file.  If you do have an \nxorg.conf file the Identifier field will likely require modification.  This does not, however, appear to be a universal solution.  It has been reported to fail on a GTX960 with Nvidia driver version 358.16.", 
            "title": "Special Nvidia driver settings"
        }, 
        {
            "location": "/adl/", 
            "text": "Building with ADL Support\n\n\nSpecial consideration is required if using AMD's proprietary driver (fglrx).\nThis driver does not expose /dev/i2c-* devices.  Instead, the driver provides\nI2C communication with the montior through its API, known as the AMD Device Library (ADL).\n\n\nThe ADL license does not allow its header files to be redistributed with the ddcutil source. \n\nConsequently, extra steps are required to build a copy of ddcutil that supports fglrx monitors: \n\n\n\n\nDownload the ADL SDK from \nhere\n.\n\n\nExtract the following files (they will be found in various subdirectories).\n\n  Copy them to some directory on your system: \n\n\n\n\n adl_defines.h\n adl_sdk.h\n adl_structures.h\n mccs.h\n\n\n\n\n\n\nWhen building ddcutil from either the git source or tarball, execute configure as follows\n\n\n\n\n# ./configure --with-adl-headers=DIR\n\n\n\n\nwhere DIR is the name of the directory where you saved the ADL header files.\n\n\nNote: The license for the AMD Device Library (ADL) SDK library does allow for \nincorporating its components in distributed executables.  In the future, binaries \ndistributed from this site will be built with ADL support. That is not currently the case.", 
            "title": "AMD fglrx Driver"
        }, 
        {
            "location": "/adl/#building-with-adl-support", 
            "text": "Special consideration is required if using AMD's proprietary driver (fglrx).\nThis driver does not expose /dev/i2c-* devices.  Instead, the driver provides\nI2C communication with the montior through its API, known as the AMD Device Library (ADL).  The ADL license does not allow its header files to be redistributed with the ddcutil source.  \nConsequently, extra steps are required to build a copy of ddcutil that supports fglrx monitors:    Download the ADL SDK from  here .  Extract the following files (they will be found in various subdirectories). \n  Copy them to some directory on your system:     adl_defines.h\n adl_sdk.h\n adl_structures.h\n mccs.h   When building ddcutil from either the git source or tarball, execute configure as follows   # ./configure --with-adl-headers=DIR  where DIR is the name of the directory where you saved the ADL header files.  Note: The license for the AMD Device Library (ADL) SDK library does allow for \nincorporating its components in distributed executables.  In the future, binaries \ndistributed from this site will be built with ADL support. That is not currently the case.", 
            "title": "Building with ADL Support"
        }, 
        {
            "location": "/virtual_machines/", 
            "text": "Virtual Machines\n\n\nddcutil can be built in a virtual machine.  However, when using the built-in video drivers, loading i2_dev does \nnot create /dev/i2c-* devices, either on VirtualBox or VMware.   This is as expected, since DDC features affect the physical monitor.\n\n\nIt's possible that ddcutil would work if using a normal video device driver with PCI passthrough, so that the device driver is \nactually controlling a real monitor.  This has not been tested.", 
            "title": "Virtual Machines"
        }, 
        {
            "location": "/virtual_machines/#virtual-machines", 
            "text": "ddcutil can be built in a virtual machine.  However, when using the built-in video drivers, loading i2_dev does \nnot create /dev/i2c-* devices, either on VirtualBox or VMware.   This is as expected, since DDC features affect the physical monitor.  It's possible that ddcutil would work if using a normal video device driver with PCI passthrough, so that the device driver is \nactually controlling a real monitor.  This has not been tested.", 
            "title": "Virtual Machines"
        }, 
        {
            "location": "/raspberry/", 
            "text": "Raspberry Pi\n\n\nOne user has reporting building \nddcutil\n for the Raspberry Pi and successfully running it.\nThe following settings were required in file /boot/config.txt in order to enable the I2C buses:\n\n\ndtparam=i2c0=on\ndtparam=i2c1=on\ndtparam=i2c_vc=on\ndtparam=i2c_arm=on\ndtparam=i2c2_iknowwhatimdoing=yes", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/raspberry/#raspberry-pi", 
            "text": "One user has reporting building  ddcutil  for the Raspberry Pi and successfully running it.\nThe following settings were required in file /boot/config.txt in order to enable the I2C buses:  dtparam=i2c0=on\ndtparam=i2c1=on\ndtparam=i2c_vc=on\ndtparam=i2c_arm=on\ndtparam=i2c2_iknowwhatimdoing=yes", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/ddccontrol/", 
            "text": "Comparison with ddccontrol\n\n\nThe program \nddccontrol\n appears to be unmaintained, and has been dropped from distributions.  It is brittle \nin ways that I surmise reflect the services availble at the time it was written.  In particular:  \n\n\n\n\nddcctontrol\n, as it is normally built (based on \nconfigure\n options that control conditional compilation), programs the I2C devcies directly at the PCI level.  It has dedicated code for each of several video card interfaces (e.g. nvidia, sis, intel740, intell 810).\n\nddcutil\n, \non the other hand, relies exclusively on the the \ni2c-dev\n userspace \ninterface to I2C.  This should make it less fragile to video card variations.\n\n\nddccontrol\n uses a monitor attribute database to interpret VCP feature codes.  With MCCS \n2.0 and greater, VCP feature code definitions are largely standardized.  \nddcutil\n uses the \nMCCS specification to interpret VCP feature values, and considerable\neffort has gone into understanding that specification, particularly the variation among versions.  Unlike \nddccontrol\n, \nddcutil\n makes\nno attempt to interpret values for feature codes designated as manufacturer \nspecific (E0..FF).", 
            "title": "Comparison with ddccontrol"
        }, 
        {
            "location": "/ddccontrol/#comparison-with-ddccontrol", 
            "text": "The program  ddccontrol  appears to be unmaintained, and has been dropped from distributions.  It is brittle \nin ways that I surmise reflect the services availble at the time it was written.  In particular:     ddcctontrol , as it is normally built (based on  configure  options that control conditional compilation), programs the I2C devcies directly at the PCI level.  It has dedicated code for each of several video card interfaces (e.g. nvidia, sis, intel740, intell 810). ddcutil , \non the other hand, relies exclusively on the the  i2c-dev  userspace \ninterface to I2C.  This should make it less fragile to video card variations.  ddccontrol  uses a monitor attribute database to interpret VCP feature codes.  With MCCS \n2.0 and greater, VCP feature code definitions are largely standardized.   ddcutil  uses the \nMCCS specification to interpret VCP feature values, and considerable\neffort has gone into understanding that specification, particularly the variation among versions.  Unlike  ddccontrol ,  ddcutil  makes\nno attempt to interpret values for feature codes designated as manufacturer \nspecific (E0..FF).", 
            "title": "Comparison with ddccontrol"
        }, 
        {
            "location": "/monitor_notes/", 
            "text": "Notes on Specific Monitors\n\n\nThe following list describes some monitors that have been tested.  It highlights the variability in DDC implementation among monitors.\n\n\nApple Cinema Display A1082\n\n\nHas both I2C and USB interfaces. \n\n\nVCP Version:  2.0\n\nController Manufacturer:   unspecified\n\nController Model:          unspecified  \n\nFirmware version:          unspecified\n\nManufacture year:          2005\n\n\nI2C interface has more VCP features than USB interface. \n\n\nUSB interface does not report VCP version (feature DF).\n\n\nAble to read EDID over USB. \n\n\nCapabilities string does not begin and end with parentheses. \n\n\nAsus VE247\n\n\nVCP version:  2.0 \n\nController Manufacturer:   RealTek\n\nController Model: mh=0x00, ml=0x24, sh=0x82   \n\nFirmware version: 2.0   \n\n\nResponds to unknown VCP codes using the DDC NULL message instead of setting the \nUnsupported VCP code\n bit in the GETVCP response.\n\n\nSensible reponses to VCP codes 0B and 0C. \n\n\nDell P2411\n\n\nVCP version: 2.1 \n\nController Manufacturer: Mstar\n\nController Model: mh=0x00, ml=0x00, sh=0x56 \n\nFirmware version:       1.1\n\nManufacture year:       2011\n\n\nLots of I2C errors.  Heavily dependant on retries.  The CAPABILITIES command sometimes fails, even with maximum retries. \nMore recently, all I2C responses contain errors.\n\n\nReports VCP code 0B (color temperature increment) as 1 degree Kelvin, which makes the GETVCP response to VCP code 0C (color temperature\nrequest) nonsensical.\n\n\nDell Ultrasharp 1905FP\n\n\nDoes not support DDC.\n\n\nDell U3011\n\n\nVCP version: 2.1 \n\nController manufacturer:  Mstar \n\nController Model: mh=0x00, ml=0x94, sh=0x85   \n\nFirmware version: 1.5 \n\nManufacture year: 2012  \n\n\nIf a value is set using SETVCP, the new value takes effect and appears in the on-screen display.   However, GETVCP sometimes still retieves the old value, not the new one.\n\n\nReports VCP code 0B (color temperature increment) as 1 degree Kelvin, which makes the GETVCP response to VCP code 0C (color temperature\nrequest) nonsensical.\n\n\nEizo Coloredge CG19\n\n\nVCP version:  unreported \n\nController manufacturer and model: unreported (VCP feature code C8 unsupported) \n\nFirmware version: unreported (VCP feature code C9 unsupported)   \n\n\nReports EDID at I2C bus address 0x50.  Does not support DDC over I2C (bus address 0x37). \n\n\nDoes implement MCCS over USB, and appears to conform to the USB Monitor Control Class Specification.  However, it appears that the more\nsophisticated monitor features such as LUT loading use manufacturer specific USB HID reports. \n\n\nUnable to read EDID over USB, even though the HID Report for EDID can be located.\n\n\nTo set color related VCP feature values, Custom Color mode must be selected.   If set to sRGB or Calibrated, the SETVCP command\nwill appear to succeed, but will have no effect.  (In sRGB mode, Brightness can be set, in Calibrated mode it cannot.)\n\n\nGateway Diamondtron VX920\n\n\nVCP version:  Unspecified, implies 1.0 \n\nController manufacturer and model:   Unknown (VCP feature code C8 unsupported)   \n\nFirmware version:  Unknown (VCP feature code C9 unsupported)  \n\n\nHanns G Hi221D\n\n\nVCP version:  2.1 \n\nController manufacturer:  Mstar \n\nController model:   mh=0x00, ml=0x92, sh=0x00 \n\nFirmware version:  0.6  \n\n\nAll GETVCP requests return a value, whether or not the feature is valid for the monitor.   The monitor never reports a feature as unsupported.\n\n\nHP LP2480zx\n\n\nVCP version:   2.1 \n\nController manufacturer:  Genesis \n\nController Model: mh=0xff, ml=0xff, sh=0x80 \n\nFirmware version:      0.139\n\nManufacture year:      2008  \n\n\nHeavily reliant on manufacturer specific VCP codes.  Most color related features, including loading the internal LUT, are not supported using\nstandard VCP feature codes.\n\n\nImplements MCCS over USB as well as I2C.   However, the USB implementation appears to be non-standard.  It does not conform to the USB Monitor Control Class Specification. \n\n\nSensible reponses to VCP codes 0B and 0C. \n\n\nCapabilities string does not match actual capabilities observed.  For example, capaibilites does not include VCP feature code 0x10, brightness, which is recognized by getvcp and setvcp.\n\n\nCapabilities string does include cmds() segment listed supported commands, ore model() segment listing model.\n\n\nHP w2207\n\n\nVCP Version:  2.1\n\nController manufacturer:  Mstar\n\nFirmware Version:          3.5\n\nManufacture year:         2007  \n\n\nColor temperature increment (feature x0B) and request (feature x0C) result in a color temperature of 13,000 degress Kelvin\n\n\nResponds with data to all VCP feature requests, never reports a feature as unsupported \n\n\nHP ZR2740w\n\n\nVCP version:  2.2  \n\n\nImplements only a few VCP codes. \n\n\nVCP feature codes 0B and 0C unsupported.\n\n\nIilyama PL2779Q\n\n\nVCP Version:    2.1\n\nController manufacturer:   unknown (feature code xC8 unsupported)\n\nFirmware version:          unkown  (feature code xC9 unsupported)\n\nManufacture year:          2013  \n\n\nColor temperature increment (feature x0B) and request (feature x0C) result in a color temperature of 26,100 degress Kelvin\n\n\nDoes not include command x02 (VCP Response) or xE3 (Capabilities Reply) in its capabilities string, even though these are supported.\n\n\nResponds to several VCP feature not listed in capabilities\n\n\nLG Ultrawide\n\n\nVCP version:  2.1 \n\nController manufacturer and model:  STK\n\nFirmware version:  0.1\n\nManufacture year:  2014  \n\n\nFeature codes are not separated by blanks in the vcp() section of the capabilities string.\n\n\nNo serial number in the EDID.\n\n\nWhen responding to a Get VCP Feature request, the monitor never sets sets the Result Code field of the VCP Feature Reply to Unsupported VCP Code.\nInstead, it always reports No Error.\n\nFor unsupported VCP codes, all bytes in the response (MH, ML, SH, SL) are set to 0x00.\n\n\nNEC LCD3090WQXi\n\n\nVCP Version 2.0\n\nController manufacturer and model: unreported (VCP feature code C8 unsupported)\n\nFirmware version: unreported (VCP feature code C9 unsupported)   \n\n\nNEC PA241\n\n\nVCP Version 2.0\n\nController manufacturer and model: unreported (VCP feature code C8 unsupported)\n\nFirmware version: unreported (VCP feature code C9 unsupported)   \n\n\nImplements both I2C and USB interfaces.  \n\n\nMakes heavy use of manufacturer specific VCP feature codes.  Also, ddcutil capabilities --verbose reports numerous manufacturer\nspecific DDC commands  The USB interface also makes heavy use of manufacturer specific usage codes.\n\n\nMonitor must be set to ??? to allow changes. \n\n\nVCP code 0x0c (Color Temperature Request) returns 0, which is nonsensical. \n\n\nDoes not use the usual VCP codes (.e.g. 0x16/Red Gain) for color control.\nInstead uses the 6 axis color control features 0x8c..0xa0.\n\n\nSamsung Syncmaster 213T\n\n\nDoes not support DDC.\n\n\nSamsung Syncmaster 730B\n\n\nVCP version:   Unspecified, implies 1.0 \n\nController manufacturer and model:   Unknown (VCP feature code C8 unsupported)   \n\nFirmware version:  Unknown (VCP feature code C9 unsupported)  \n\n\nThe capabilities string spcifies the values for non-continuous features in decimal rather than hexadecimal\n\n\nVCP feature codes 0B and 0C unsupported.", 
            "title": "Notes on specific monitors"
        }, 
        {
            "location": "/monitor_notes/#notes-on-specific-monitors", 
            "text": "The following list describes some monitors that have been tested.  It highlights the variability in DDC implementation among monitors.", 
            "title": "Notes on Specific Monitors"
        }, 
        {
            "location": "/monitor_notes/#apple-cinema-display-a1082", 
            "text": "Has both I2C and USB interfaces.   VCP Version:  2.0 \nController Manufacturer:   unspecified \nController Model:          unspecified   \nFirmware version:          unspecified \nManufacture year:          2005  I2C interface has more VCP features than USB interface.   USB interface does not report VCP version (feature DF).  Able to read EDID over USB.   Capabilities string does not begin and end with parentheses.", 
            "title": "Apple Cinema Display A1082"
        }, 
        {
            "location": "/monitor_notes/#asus-ve247", 
            "text": "VCP version:  2.0  \nController Manufacturer:   RealTek \nController Model: mh=0x00, ml=0x24, sh=0x82    \nFirmware version: 2.0     Responds to unknown VCP codes using the DDC NULL message instead of setting the  Unsupported VCP code  bit in the GETVCP response.  Sensible reponses to VCP codes 0B and 0C.", 
            "title": "Asus VE247"
        }, 
        {
            "location": "/monitor_notes/#dell-p2411", 
            "text": "VCP version: 2.1  \nController Manufacturer: Mstar \nController Model: mh=0x00, ml=0x00, sh=0x56  \nFirmware version:       1.1 \nManufacture year:       2011  Lots of I2C errors.  Heavily dependant on retries.  The CAPABILITIES command sometimes fails, even with maximum retries. \nMore recently, all I2C responses contain errors.  Reports VCP code 0B (color temperature increment) as 1 degree Kelvin, which makes the GETVCP response to VCP code 0C (color temperature\nrequest) nonsensical.", 
            "title": "Dell P2411"
        }, 
        {
            "location": "/monitor_notes/#dell-ultrasharp-1905fp", 
            "text": "Does not support DDC.", 
            "title": "Dell Ultrasharp 1905FP"
        }, 
        {
            "location": "/monitor_notes/#dell-u3011", 
            "text": "VCP version: 2.1  \nController manufacturer:  Mstar  \nController Model: mh=0x00, ml=0x94, sh=0x85    \nFirmware version: 1.5  \nManufacture year: 2012    If a value is set using SETVCP, the new value takes effect and appears in the on-screen display.   However, GETVCP sometimes still retieves the old value, not the new one.  Reports VCP code 0B (color temperature increment) as 1 degree Kelvin, which makes the GETVCP response to VCP code 0C (color temperature\nrequest) nonsensical.", 
            "title": "Dell U3011"
        }, 
        {
            "location": "/monitor_notes/#eizo-coloredge-cg19", 
            "text": "VCP version:  unreported  \nController manufacturer and model: unreported (VCP feature code C8 unsupported)  \nFirmware version: unreported (VCP feature code C9 unsupported)     Reports EDID at I2C bus address 0x50.  Does not support DDC over I2C (bus address 0x37).   Does implement MCCS over USB, and appears to conform to the USB Monitor Control Class Specification.  However, it appears that the more\nsophisticated monitor features such as LUT loading use manufacturer specific USB HID reports.   Unable to read EDID over USB, even though the HID Report for EDID can be located.  To set color related VCP feature values, Custom Color mode must be selected.   If set to sRGB or Calibrated, the SETVCP command\nwill appear to succeed, but will have no effect.  (In sRGB mode, Brightness can be set, in Calibrated mode it cannot.)", 
            "title": "Eizo Coloredge CG19"
        }, 
        {
            "location": "/monitor_notes/#gateway-diamondtron-vx920", 
            "text": "VCP version:  Unspecified, implies 1.0  \nController manufacturer and model:   Unknown (VCP feature code C8 unsupported)    \nFirmware version:  Unknown (VCP feature code C9 unsupported)", 
            "title": "Gateway Diamondtron VX920"
        }, 
        {
            "location": "/monitor_notes/#hanns-g-hi221d", 
            "text": "VCP version:  2.1  \nController manufacturer:  Mstar  \nController model:   mh=0x00, ml=0x92, sh=0x00  \nFirmware version:  0.6    All GETVCP requests return a value, whether or not the feature is valid for the monitor.   The monitor never reports a feature as unsupported.", 
            "title": "Hanns G Hi221D"
        }, 
        {
            "location": "/monitor_notes/#hp-lp2480zx", 
            "text": "VCP version:   2.1  \nController manufacturer:  Genesis  \nController Model: mh=0xff, ml=0xff, sh=0x80  \nFirmware version:      0.139 \nManufacture year:      2008    Heavily reliant on manufacturer specific VCP codes.  Most color related features, including loading the internal LUT, are not supported using\nstandard VCP feature codes.  Implements MCCS over USB as well as I2C.   However, the USB implementation appears to be non-standard.  It does not conform to the USB Monitor Control Class Specification.   Sensible reponses to VCP codes 0B and 0C.   Capabilities string does not match actual capabilities observed.  For example, capaibilites does not include VCP feature code 0x10, brightness, which is recognized by getvcp and setvcp.  Capabilities string does include cmds() segment listed supported commands, ore model() segment listing model.", 
            "title": "HP LP2480zx"
        }, 
        {
            "location": "/monitor_notes/#hp-w2207", 
            "text": "VCP Version:  2.1 \nController manufacturer:  Mstar \nFirmware Version:          3.5 \nManufacture year:         2007    Color temperature increment (feature x0B) and request (feature x0C) result in a color temperature of 13,000 degress Kelvin  Responds with data to all VCP feature requests, never reports a feature as unsupported", 
            "title": "HP w2207"
        }, 
        {
            "location": "/monitor_notes/#hp-zr2740w", 
            "text": "VCP version:  2.2    Implements only a few VCP codes.   VCP feature codes 0B and 0C unsupported.", 
            "title": "HP ZR2740w"
        }, 
        {
            "location": "/monitor_notes/#iilyama-pl2779q", 
            "text": "VCP Version:    2.1 \nController manufacturer:   unknown (feature code xC8 unsupported) \nFirmware version:          unkown  (feature code xC9 unsupported) \nManufacture year:          2013    Color temperature increment (feature x0B) and request (feature x0C) result in a color temperature of 26,100 degress Kelvin  Does not include command x02 (VCP Response) or xE3 (Capabilities Reply) in its capabilities string, even though these are supported.  Responds to several VCP feature not listed in capabilities", 
            "title": "Iilyama PL2779Q"
        }, 
        {
            "location": "/monitor_notes/#lg-ultrawide", 
            "text": "VCP version:  2.1  \nController manufacturer and model:  STK \nFirmware version:  0.1 \nManufacture year:  2014    Feature codes are not separated by blanks in the vcp() section of the capabilities string.  No serial number in the EDID.  When responding to a Get VCP Feature request, the monitor never sets sets the Result Code field of the VCP Feature Reply to Unsupported VCP Code.\nInstead, it always reports No Error. \nFor unsupported VCP codes, all bytes in the response (MH, ML, SH, SL) are set to 0x00.", 
            "title": "LG Ultrawide"
        }, 
        {
            "location": "/monitor_notes/#nec-lcd3090wqxi", 
            "text": "VCP Version 2.0 \nController manufacturer and model: unreported (VCP feature code C8 unsupported) \nFirmware version: unreported (VCP feature code C9 unsupported)", 
            "title": "NEC LCD3090WQXi"
        }, 
        {
            "location": "/monitor_notes/#nec-pa241", 
            "text": "VCP Version 2.0 \nController manufacturer and model: unreported (VCP feature code C8 unsupported) \nFirmware version: unreported (VCP feature code C9 unsupported)     Implements both I2C and USB interfaces.    Makes heavy use of manufacturer specific VCP feature codes.  Also, ddcutil capabilities --verbose reports numerous manufacturer\nspecific DDC commands  The USB interface also makes heavy use of manufacturer specific usage codes.  Monitor must be set to ??? to allow changes.   VCP code 0x0c (Color Temperature Request) returns 0, which is nonsensical.   Does not use the usual VCP codes (.e.g. 0x16/Red Gain) for color control.\nInstead uses the 6 axis color control features 0x8c..0xa0.", 
            "title": "NEC PA241"
        }, 
        {
            "location": "/monitor_notes/#samsung-syncmaster-213t", 
            "text": "Does not support DDC.", 
            "title": "Samsung Syncmaster 213T"
        }, 
        {
            "location": "/monitor_notes/#samsung-syncmaster-730b", 
            "text": "VCP version:   Unspecified, implies 1.0  \nController manufacturer and model:   Unknown (VCP feature code C8 unsupported)    \nFirmware version:  Unknown (VCP feature code C9 unsupported)    The capabilities string spcifies the values for non-continuous features in decimal rather than hexadecimal  VCP feature codes 0B and 0C unsupported.", 
            "title": "Samsung Syncmaster 730B"
        }, 
        {
            "location": "/faq/", 
            "text": "Frequently Asked Questions\n\n\nThe \ncapabilities\n command reports the MCCS (aka VCP) version, but elsewhere ddcutil says the version is unknown.\n\n\nCommand \nddcutil capabilities\n reports the response to the DDC API capabilities request.  However, \nddcutil\n regards this \noutput as purely informational.   It does not use the capabilities API call when formulating commands and \ninterpeting responses.  This is for multiple reasons:\n\n\n\n\n\n\nA DDC capabilities request requires multiple I2C exchanges, making it both slow and unreliable.  Because of its complexity, it is particularly vulnerable to\nI2C errors.  On monitors with paticularly poor I2C implementations it sometimes fails because the maximum number of \nI2C retries is exceeded.\n\n\n\n\n\n\nThere is no capabilities request defined in the programming interface for USB connected monitors. \nddcutil simulates a capabilities response by looking at what USB HID reports exist for feature codes. \n\n\n\n\n\n\nThe response to the DDC capabilities API request may be incorrect.   For example, the capabilities response from the HP LP2480zx\nmonitor does not list VCP feature code x10 (brighness) as supported.  However, feature code x10 is in fact supported.  The only \nway to know for sure if a monitor implememts a VCP feature code is to try. \n\n\n\n\n\n\nddcutil\n relies on VCP feature code xDF to determine the VCP version.  (For USB connected monitors, it queries HID usage x00800004.)  It is possible that feature code xDF is unspported, even though the capabilities response specifies a version.\n\n\nconfigure\n complains that a required package does not exist, but it is installed on my system.\n\n\nError messages from pkg-config (which is called by configure) can be misleading.  If configure complains that a\npackage is not found but it seems to be installed, it's likely that what's missing is the associated development package \n(with a suffix like \"-dev\").", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#frequently-asked-questions", 
            "text": "", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#the-capabilities-command-reports-the-mccs-aka-vcp-version-but-elsewhere-ddcutil-says-the-version-is-unknown", 
            "text": "Command  ddcutil capabilities  reports the response to the DDC API capabilities request.  However,  ddcutil  regards this \noutput as purely informational.   It does not use the capabilities API call when formulating commands and \ninterpeting responses.  This is for multiple reasons:    A DDC capabilities request requires multiple I2C exchanges, making it both slow and unreliable.  Because of its complexity, it is particularly vulnerable to\nI2C errors.  On monitors with paticularly poor I2C implementations it sometimes fails because the maximum number of \nI2C retries is exceeded.    There is no capabilities request defined in the programming interface for USB connected monitors. \nddcutil simulates a capabilities response by looking at what USB HID reports exist for feature codes.     The response to the DDC capabilities API request may be incorrect.   For example, the capabilities response from the HP LP2480zx\nmonitor does not list VCP feature code x10 (brighness) as supported.  However, feature code x10 is in fact supported.  The only \nway to know for sure if a monitor implememts a VCP feature code is to try.     ddcutil  relies on VCP feature code xDF to determine the VCP version.  (For USB connected monitors, it queries HID usage x00800004.)  It is possible that feature code xDF is unspported, even though the capabilities response specifies a version.", 
            "title": "The capabilities command reports the MCCS (aka VCP) version, but elsewhere ddcutil says the version is unknown."
        }, 
        {
            "location": "/faq/#configure-complains-that-a-required-package-does-not-exist-but-it-is-installed-on-my-system", 
            "text": "Error messages from pkg-config (which is called by configure) can be misleading.  If configure complains that a\npackage is not found but it seems to be installed, it's likely that what's missing is the associated development package \n(with a suffix like \"-dev\").", 
            "title": "configure complains that a required package does not exist, but it is installed on my system."
        }, 
        {
            "location": "/release_notes/", 
            "text": "Release Notes\n\n\n0.6.1\n\n\n21 November 2016\n\n\nMaintenance release.  \n\n\n\n\nImprove recovery and diagnotistic messages for certain exceptional conditions. \n\n\nCommand \nddcutil interrogate\n now reports the differences between VCP codes \ndeclared in the capabilities string and those observed by scanning. \n\n\nExtensive internal changes in preparation for future C and Python APIs.\n\n\n\n\n0.6.0\n\n\n01 October 2016\n\n\nRename project from ddctool to ddcutil.  \n\n\n\n\nPrimary executable is now named ddcutil  \n\n\nShared library is now named libddcutil.so\n\n\nTarball is now named ddcutil.n.n.n.tar.gz\n\n\n\n\n0.5.3\n\n\n24 September 2016\n\n\nFix overzealous code cleanup in release 0.5.1.  \n\n\n\n\nUndefined reference to function is_module_loaded_using_sysfs() when building without ADL support.  \n\n\nError in command parsing. Command arguments were ignored.\n\n\n\n\n0.5.1\n\n\n23 September 2016\n\n\nMinor improvements to diagnostics of the \nenvironment\n and \ninterrogate\n commands:\n\n\n\n\nCheck if i2c_dev is built into the kernel as an alternative to it being a loadable kernel module  \n\n\nRecognize amdgpu video driver\n\n\n\n\n0.5\n\n\n09 September 2016\n\n\nThis is the first formal release of \nddcutil\n\n\n\n\nRework USB monitor support based on testing with Eizo Coloredge and NEC PA series\n\n-- Probing of USB connected monitors is greatly extended and refactored from \nddcutil environment\n into a separate command \nddcutil usbenv\n.\nLibraries hidraw and libusb are used as well as hiddev.  HID Report Descriptors are parsed.  This probing is included in \nddcutil interrogate\n. \n\n  -- \nconfigure\n option \n--enable-usb/--disable-usb\n controls whether ddcutil is built\n  with USB monitor support.  The default is \n--enable-usb\n.  When building with USB support,\n  packages for udev, hidraw, hiddev, and libusb are required.\n\n\nSimplify README.md.  Refer to www.ddcutil.com for most documentation  \n\n\nThe assumption that I2C buses are numbered consecutively is removed.  Required for Raspberry Pi. \n\n\nAllow a display to be specified on the command \nddcutil loadvcp\n.\n This addresses the situation where a monitor presents both an I2C and a USB interface.\n Normally, the display is determined using the data stored in the VCP file, and the I2C display interface is\n chosen over the USB interface.\n If a display is specified, then the model and sn from its EDID must match\n those in the VCP data being loaded.  \n\n\nAdd \nddcutil\n command option \n--timestamp/--ts\n.  If specified, trace messages are prefaced with an elapsed timestamp.\n\n\nBecause of changing package requirements, \nddcutil\n no longer builds in the openSUSE Build Service (OBS) for older OS versions (openSUSE 13.1, Ubuntu 12.04, 14.04). \n\n\nddcutil\n currently does not build for any openSUSE version in the openSUSE Build Service due to violation of policy guidelines.  This problem will\nbe addressed in a subsequent release. openSUSE users can build ddcutil from its tarball.", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release_notes/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release_notes/#061", 
            "text": "21 November 2016  Maintenance release.     Improve recovery and diagnotistic messages for certain exceptional conditions.   Command  ddcutil interrogate  now reports the differences between VCP codes \ndeclared in the capabilities string and those observed by scanning.   Extensive internal changes in preparation for future C and Python APIs.", 
            "title": "0.6.1"
        }, 
        {
            "location": "/release_notes/#060", 
            "text": "01 October 2016  Rename project from ddctool to ddcutil.     Primary executable is now named ddcutil    Shared library is now named libddcutil.so  Tarball is now named ddcutil.n.n.n.tar.gz", 
            "title": "0.6.0"
        }, 
        {
            "location": "/release_notes/#053", 
            "text": "24 September 2016  Fix overzealous code cleanup in release 0.5.1.     Undefined reference to function is_module_loaded_using_sysfs() when building without ADL support.    Error in command parsing. Command arguments were ignored.", 
            "title": "0.5.3"
        }, 
        {
            "location": "/release_notes/#051", 
            "text": "23 September 2016  Minor improvements to diagnostics of the  environment  and  interrogate  commands:   Check if i2c_dev is built into the kernel as an alternative to it being a loadable kernel module    Recognize amdgpu video driver", 
            "title": "0.5.1"
        }, 
        {
            "location": "/release_notes/#05", 
            "text": "09 September 2016  This is the first formal release of  ddcutil   Rework USB monitor support based on testing with Eizo Coloredge and NEC PA series \n-- Probing of USB connected monitors is greatly extended and refactored from  ddcutil environment  into a separate command  ddcutil usbenv .\nLibraries hidraw and libusb are used as well as hiddev.  HID Report Descriptors are parsed.  This probing is included in  ddcutil interrogate .  \n  --  configure  option  --enable-usb/--disable-usb  controls whether ddcutil is built\n  with USB monitor support.  The default is  --enable-usb .  When building with USB support,\n  packages for udev, hidraw, hiddev, and libusb are required.  Simplify README.md.  Refer to www.ddcutil.com for most documentation    The assumption that I2C buses are numbered consecutively is removed.  Required for Raspberry Pi.   Allow a display to be specified on the command  ddcutil loadvcp .\n This addresses the situation where a monitor presents both an I2C and a USB interface.\n Normally, the display is determined using the data stored in the VCP file, and the I2C display interface is\n chosen over the USB interface.\n If a display is specified, then the model and sn from its EDID must match\n those in the VCP data being loaded.    Add  ddcutil  command option  --timestamp/--ts .  If specified, trace messages are prefaced with an elapsed timestamp.  Because of changing package requirements,  ddcutil  no longer builds in the openSUSE Build Service (OBS) for older OS versions (openSUSE 13.1, Ubuntu 12.04, 14.04).   ddcutil  currently does not build for any openSUSE version in the openSUSE Build Service due to violation of policy guidelines.  This problem will\nbe addressed in a subsequent release. openSUSE users can build ddcutil from its tarball.", 
            "title": "0.5"
        }, 
        {
            "location": "/todo/", 
            "text": "To Do List\n\n\nThere's an extensive TODO list\n\n\n\n\nwrite VCP Table type fields\n\n\ndocument the format of .VCP files (i.e. files read by \nddcutil loadvcp\n)\n\n\npackage as library for use by other programs\n\n-- C API\n\n-- Python API implemented using SWIG\n\n\nGUI user interface\n\n\nFeature selection for \nddcutil vcpinfo table\n is not properly version sensitive.\n\n  -- take version from monitor selection if specified\n\n  -- option --mccs-version to force specific version", 
            "title": "Future Tasks"
        }, 
        {
            "location": "/todo/#to-do-list", 
            "text": "There's an extensive TODO list   write VCP Table type fields  document the format of .VCP files (i.e. files read by  ddcutil loadvcp )  package as library for use by other programs \n-- C API \n-- Python API implemented using SWIG  GUI user interface  Feature selection for  ddcutil vcpinfo table  is not properly version sensitive. \n  -- take version from monitor selection if specified \n  -- option --mccs-version to force specific version", 
            "title": "To Do List"
        }, 
        {
            "location": "/feedback/", 
            "text": "Feedback Needed\n\n\nThis is a preliminary release, and feedback would be very helpful. There are a \nlot of \"moving parts\" that can vary from system to system: \n\n\n\n\nThe build environment can vary. \n\n\nI2C implementation can vary with card, monitor, and driver.\n\n  There is variation in MCCS interpretation.  \n\n\nI2C is an inherently unreliable protocol, requiring retry management.  \n\n\n\n\nIn particular: \n\n\n\n\nWere you able to install/build ddcutil?\n\n  What changes were required to the Autoconf files?   \n\n\nDoes it work with given card, driver, and monitor?  I'm not particularly \n  concerned with older monitors whose MCCS version is unspecified (i.e. is \n  less than 2.0).  On the other hand, I'm very interested in how ddcutil\n  handles monitors implementing MCCS V3.0, as the V3.0 specific code has not \n  been tested. In particular, does ddcutil properly read Table type features? \n\n\nAnd of course, is the program useful?   Does it merit further development?  What \n  additional features are most important?\n\n\n\n\nCommand \nddcutil interrogate\n collects maximal information about the \ninstallation environment, video card and driver, and monitor capabilities.\nI'd appreciate it if you could redirect its output to a file and \nsend the file\n\nto me. This will help diagnose problems and identify features that should be \nimplemented.", 
            "title": "Feedback"
        }, 
        {
            "location": "/feedback/#feedback-needed", 
            "text": "This is a preliminary release, and feedback would be very helpful. There are a \nlot of \"moving parts\" that can vary from system to system:    The build environment can vary.   I2C implementation can vary with card, monitor, and driver. \n  There is variation in MCCS interpretation.    I2C is an inherently unreliable protocol, requiring retry management.     In particular:    Were you able to install/build ddcutil? \n  What changes were required to the Autoconf files?     Does it work with given card, driver, and monitor?  I'm not particularly \n  concerned with older monitors whose MCCS version is unspecified (i.e. is \n  less than 2.0).  On the other hand, I'm very interested in how ddcutil\n  handles monitors implementing MCCS V3.0, as the V3.0 specific code has not \n  been tested. In particular, does ddcutil properly read Table type features?   And of course, is the program useful?   Does it merit further development?  What \n  additional features are most important?   Command  ddcutil interrogate  collects maximal information about the \ninstallation environment, video card and driver, and monitor capabilities.\nI'd appreciate it if you could redirect its output to a file and  send the file \nto me. This will help diagnose problems and identify features that should be \nimplemented.", 
            "title": "Feedback Needed"
        }, 
        {
            "location": "/bibliography/", 
            "text": "Reference Documents\n\n\n\n\nUSB Device Class Definition for Human Interface Devices Version 1.11, June 27, 2001\n\n\nUSB HID Usage Table Version 1.12, October 28,2004\n\n\nUSB Monitor Control Class Specification Revision 1.0, January 5, 1998\n\n\nVESA Display Data Channel Command Interface (DDC/CI) Standard Version 1.1, October 29, 2004\n\n\nVESA Monitor Control Command Set (MCCS) Standard Version 1, September 11, 1998\n\n\nVESA Monitor Control Command Set (MCCS) Standard Version 2, October 17, 2003\n\n\nVESA Monitor Control Command Set (MCCS) Standard Version 2.1, May 28, 2005 \n\n\nVESA Monitor Control Command Set (MCCS) Standard Version 2.2, January 19, 2009\n\n\nVESA Monitor Control Command Set (MCCS) Standard Version 2.2a, July 13, 2011 \n\n\nVESA Monitor Control Command Set (MCCS) Standard Version 3, July 27, 2006\n\n\nVESA Monitor Control Command Set (MCCS) Update Document for MCCS Standard Version 3, March 20, 2007", 
            "title": "References"
        }, 
        {
            "location": "/bibliography/#reference-documents", 
            "text": "USB Device Class Definition for Human Interface Devices Version 1.11, June 27, 2001  USB HID Usage Table Version 1.12, October 28,2004  USB Monitor Control Class Specification Revision 1.0, January 5, 1998  VESA Display Data Channel Command Interface (DDC/CI) Standard Version 1.1, October 29, 2004  VESA Monitor Control Command Set (MCCS) Standard Version 1, September 11, 1998  VESA Monitor Control Command Set (MCCS) Standard Version 2, October 17, 2003  VESA Monitor Control Command Set (MCCS) Standard Version 2.1, May 28, 2005   VESA Monitor Control Command Set (MCCS) Standard Version 2.2, January 19, 2009  VESA Monitor Control Command Set (MCCS) Standard Version 2.2a, July 13, 2011   VESA Monitor Control Command Set (MCCS) Standard Version 3, July 27, 2006  VESA Monitor Control Command Set (MCCS) Update Document for MCCS Standard Version 3, March 20, 2007", 
            "title": "Reference Documents"
        }, 
        {
            "location": "/acknowledgements/", 
            "text": "Acknowlegdements\n\n\n\n\nProfessor Nitan Simpat at Rochester Institute of Technology for accesss to Eizo and NEC monitors\n\n\nOndrej Zary, whose usbmonctl provided a starting point for the USB implemention.   usbmonctl was based on acdcontrol by Pavel Guervich, which in turn.. well you get the idea. It's shoulders all the way down.", 
            "title": "Acknowledgements"
        }, 
        {
            "location": "/acknowledgements/#acknowlegdements", 
            "text": "Professor Nitan Simpat at Rochester Institute of Technology for accesss to Eizo and NEC monitors  Ondrej Zary, whose usbmonctl provided a starting point for the USB implemention.   usbmonctl was based on acdcontrol by Pavel Guervich, which in turn.. well you get the idea. It's shoulders all the way down.", 
            "title": "Acknowlegdements"
        }
    ]
}